{
  "info": {
    "version": "3.1.0",
    "description": "Move programming from the user to the machine.",
    "title": "Nutanix Intentful API"
  },
  "x-stoplight": {
    "id": "d9whfrkas70ax"
  },
  "paths": {
    "/azure_rm/v1/resource_groups/list": {
      "post": {
        "description": "Retrieves the list of all resource_groups available. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/resource_groups"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure resource_groups",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_resource_group",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/features/approval_policy": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/feature_approval_policy_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/feature_approval_policy_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Set behaviour for feature - Approval Policy",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "calm_feature",
        "description": "Set behaviour for feature - Approval Policy"
      },
      "get": {
        "description": "Get current behaviour for feature - Approval Policy",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get current behaviour for feature - Approval Policy",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_approval_policy_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/apps/{uuid}/blueprints/original": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get application's blueprint",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the source blueprint used for the specified application."
      }
    },
    "/runbooks/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_custom_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update runbook",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Updates the specified runbook using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete runbook",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Deletes the specified runbook."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runbook",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Returns the specified runbook."
      }
    },
    "/policies/{uuid}/executions/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/approval_request_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/policy_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Policy's execution history",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy",
        "description": "Retrieves the list of policy's executions, applying filters provided (if any) in the request"
      }
    },
    "/gcp/v1/firewalls/list": {
      "post": {
        "description": "List all firewalls available for a project. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/firewalls"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud firewalls",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_firewall",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/{uuid}/consumption": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_consumption_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_consumption_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          },
          {
            "type": "number",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get consumption details",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the consumption details for the specified application.\n"
      }
    },
    "/app_icons/{uuid}/summary": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_icon_summary_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get app icon summary",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_icon",
        "description": "Retrieves the metadata of the specified app icon."
      }
    },
    "/approvals/{uuid}/approval_sets/{set_uuid}/approval_elements/{element_uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/approval_request_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "description": "The UUID of the approval set.",
            "set_uuid": null,
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "description": "The UUID of the approval element.",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "element_uuid": null,
            "required": true,
            "in": "path",
            "type": "string"
          },
          {
            "schema": {
              "$ref": "#/definitions/approval_request_operation_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "approval_requests"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update Approval",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "approval_request",
        "description": "Updates the specified approval_request's state\n"
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}/snapshot_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of substrate on which the action is run"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "The API for snapshot_create action of application on provided target.",
        "x-ntnx-operations": [
          "snapshot_create"
        ],
        "x-ntnx-kind": "app",
        "description": "API for snapshot_create action on provided target."
      }
    },
    "/network_groups/{uuid}/verify": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Verify Network Group configuration",
        "x-ntnx-operations": [
          "verify"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Verify Network Group configuration"
      }
    },
    "/jobs/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/jobs_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/jobs_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List jobs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "job",
        "description": "Retrieves the list of jobs, applying filters provided (if any) in the request."
      }
    },
    "/vmware/v6/customization/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/customization"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List predefined windows guest customization",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_customization",
        "description": "List all predefined guest customization in a Vcenter. Supported filters are:\n- account_uuid\n"
      }
    },
    "/blueprints/brownfield_import/vms/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List brownfield import vms",
        "x-ntnx-operations": [
          "brownfield_view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves a list of all the blueprint launch pending request. Supported filters are:\n- platform_type\n- account_uuid\n- platform_filters.\n"
      }
    },
    "/app_tasks": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_task_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_task_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create library task",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Creates a library task using data included in the request."
      }
    },
    "/approval_requests/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/approval_request_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "approval_requests"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get Approval Request",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "approval_request",
        "description": "Retrieves the specified approval_request"
      }
    },
    "/aws/v1/roles/list": {
      "post": {
        "description": "List all the AWS roles. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the roles on the default region of a\nparticular AWS account.\nUse account_uuid and region filter together to list all the roles on a\nparticular region of an aws_account.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_role_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/roles"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS roles",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_role",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_role_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/meter/clusters/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/meter_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/meter_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/meter_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Meter"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Filter API to get cumulative stats at Project and Cluster level",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "meter",
        "description": "Filter API to get cumulative stats at Project and Cluster level\n"
      }
    },
    "/environments": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/environment_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/environment_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create Environment",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "environment",
        "description": "Given a spec creates a Environment with associated metadata\n"
      }
    },
    "/quotas/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/quota_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List Quota",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "quota",
        "description": "List quota entries for a given filter.\n"
      }
    },
    "/replication_connections": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create replication_connection",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Creates an replication_connection using data included in the request.\n"
      }
    },
    "/azure_rm/v1/virtual_networks/list": {
      "post": {
        "description": "Retrieves the list of all virtual_networks available. Supported filters are:\n- account_uuid\n- location\n- resource_group\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/virtual_networks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure virtual_networks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_virtual_network",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/app_showback/disable": {
      "post": {
        "description": "Disables showback on the current instance.",
        "tags": [
          "App Showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Disable showback",
        "x-ntnx-operations": [
          "disable"
        ],
        "x-ntnx-kind": "app_showback",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/runbooks/runlogs/{uuid}/play": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID'",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "trype": "string",
            "description": "Runlog UUID to play"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Play runbook runlog",
        "x-ntnx-operations": [
          "play"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Plays the specified paused runbook runlog."
      }
    },
    "/runbooks/marketplace_clone": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_marketplace_clone_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Execute runbook marketplace item",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Execute the runbook marketplace item using data included in the request.\n"
      }
    },
    "/vmware/v6/host/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/host"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all hosts",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_host",
        "description": "List all hosts in a datacenter. Supported filters are:\n- account_uuid\n"
      }
    },
    "/network_groups/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/network_group_list_with_nested_attributes_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List Network Groups",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Retrieves a list of all Network Groups. Supported filters are:\n- account_uuid\n"
      }
    },
    "/nutanix/v1/clusters/list": {
      "post": {
        "description": "List all clusters according to the filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/cluster_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/clusters"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix clusters.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/cluster_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/gcp/v1/accounts/{account_uuid}/zone/{zone_name}/instances/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of gcp instance"
          },
          {
            "name": "account_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of account"
          },
          {
            "required": true,
            "type": "string",
            "description": "zone name for gcp account",
            "in": "path",
            "name": "zone_name"
          }
        ],
        "tags": [
          "gcp/instances"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get gcp vm",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_instance",
        "description": "Given a UUID, returns a gcp vm"
      }
    },
    "/xi/v1/images/list": {
      "post": {
        "description": "List all the images according to the filters",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/xi_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "xi/images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Xi cloud images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_provider_xi_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/xi_image_list_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          }
        }
      }
    },
    "/calm_marketplace_items/{uuid}/patch_with_environment/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/mpi_patch_with_environment_validate_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/mpi_patch_with_environment_validate_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Validate marketplace item patching",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "marketplace_item",
        "description": "Validate if the specified app profiles in the marketplace item can be patched with the specified environments.\n"
      }
    },
    "/tunnels/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/tunnel_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/tunnel_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update Tunnel",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Updates the specified Tunnel using data included in the request"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete Tunnel",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Deletes the specified tunnel"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/tunnel_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get Tunnel",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Retrieves the specified Tunnel"
      }
    },
    "/apps/{uuid}/blueprints/new/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Validate application blueprint",
        "x-ntnx-operations": [
          "validate"
        ],
        "x-ntnx-kind": "app",
        "description": "Validates updated application blueprint for the specified application.\n"
      }
    },
    "/app_tasks/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_task_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_task_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List library tasks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Retrieves the list of library tasks, applying filters provided (if any) in the request. Supported filters are:\n- name\n- type.\n"
      }
    },
    "/resource_types/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/resource_type_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of resource_type to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/resource_type_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update resource_type",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Given a spec and resource_type UUID, update resource_type\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/resource_type_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of the resource_type to be deleted"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete resource_type",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Delete a resource_type given its UUID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/resource_type_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of resource_type to get"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get resource_type",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Given a UUID, returns a resource_type definition"
      }
    },
    "/app_variables/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_variable_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_variable_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List variable types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Retrieves a list of all library variable types. Supported filters are:\n- name\n- type.\n"
      }
    },
    "/policies/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/policy_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update Policy",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "policy",
        "description": "Updates the specified policy using data included in the request\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete Policy",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "policy",
        "description": "Deletes the specified policy"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/policy_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Policy",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy",
        "description": "Retrieves the specified policy"
      }
    },
    "/apps/{uuid}/published_services/{published_service_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_published_service_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "published_service_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of published service element to get"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get published service element",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the published substrate element specified, from the application.\n"
      }
    },
    "/app_runlogs/archival_policy/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_runlog_archive_list_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_runlog_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "App Runlogs"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List archived runlogs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Retrieves the information of all runlog archives, applying filters provided (if any) in the request."
      }
    },
    "/quotas/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "UUID of the Quota entry to fetch"
          },
          {
            "schema": {
              "$ref": "#/definitions/quota_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update Quota",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "quota",
        "description": "Update quota for a given list of entities.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Quota UUID to delete"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete Quota",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "quota",
        "description": "Delete quota for a given uuid.\n"
      }
    },
    "/vmware/v6/vm_categories/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List VM categories",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_category",
        "description": "List all categories available in account whose tags are attachable to VM\n- account_uuid\n"
      }
    },
    "/jobs/{uuid}/instances": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/job_instances_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/job_instances_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "JobInstances"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List job instances",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "job",
        "description": "Retrieves the list of job instances, applying filters provided (if any) in the request."
      }
    },
    "/endpoints/{uuid}/export_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Endpoint UUID to get"
          },
          {
            "in": "formData",
            "type": "string",
            "description": "Passphrase to encrypt secrets",
            "name": "passphrase"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download endpoint",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "endpoint",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Downloads the specified endpoint in JSON format with secrets encrypted."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Endpoint UUID to get"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download endpoint",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Downloads the specified endpoint in JSON format."
      }
    },
    "/runbooks/{uuid}/run": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_run_specs"
            },
            "description": "Request body for runbook run.",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Execute/Run runbook",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Execute/Run the specified runbook."
      }
    },
    "/azure_rm/v1/galleries/list": {
      "post": {
        "description": "Retrieves the list of all galleries available. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/galleries"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure Shared Image Galleries",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_gallery",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/app_showback/export_file": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        },
        "parameters": [
          {
            "schema": [
              {
                "$ref": "#/definitions/project_reference"
              }
            ],
            "name": "project_reference",
            "in": "query"
          }
        ],
        "tags": [
          "app_showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "App showback data csv download",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_showback",
        "description": "API for showback data csv download"
      }
    },
    "/apps/consumption_list": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/app_consumption_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_consumption_input"
            },
            "required": true,
            "name": "consumption_filter",
            "in": "body"
          },
          {
            "type": "number",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List consumptions for the given application uuids",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the consumption information for the provided application UUIDs.\n"
      }
    },
    "/blueprints/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_list_input"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List blueprint",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves the list of blueprints, applying filters provided (if any) in the request."
      }
    },
    "/tunnels/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/tunnel_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/tunnel_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List Tunnels",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Retrieves a list of all tunnels. Supported filters are:\n- name\n"
      }
    },
    "/apps/{uuid}/run_script/output/{trlid}/{ergon_task_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/script_output_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID to get"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "name": "ergon_task_id",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Ergont task UUID"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get script output",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrives the output for the script run with data included in the request."
      }
    },
    "/app_showback/prepare_csv": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        },
        "parameters": [
          {
            "schema": [
              {
                "$ref": "#/definitions/project_reference"
              }
            ],
            "name": "project_reference",
            "in": "query"
          }
        ],
        "tags": [
          "App Showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "App showback csv file preparation",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_showback",
        "description": "API to trigger app showback cost data csv preparation"
      }
    },
    "/apps/{uuid}/run_script/abort/{runid}/{trlid}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/abort_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application uuid"
          },
          {
            "name": "runid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "run id of the script"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_abort_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Abort script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Aborts the specified script run request using data provided in the request."
      }
    },
    "/azure_rm/v1/locations/list": {
      "post": {
        "description": "Retrieves the list of all locations available. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/locations"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure locations",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_location",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/app_list_intent_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_list_input"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List applications",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the list of applications, applying filters provided (if any) in the request."
      }
    },
    "/runbooks/{uuid}/export_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runbook UUID to get"
          },
          {
            "in": "formData",
            "type": "string",
            "description": "Passphrase to encrypt secrets",
            "name": "passphrase"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download runbook",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "runbook",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Downloads the specified runbook in JSON format with secrets encrypted."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Action UUID to get"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download runbook",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Downloads the specified runbook in JSON format."
      }
    },
    "/vmware/v6/cluster/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/cluster"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all clusters",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_cluster",
        "description": "List all clusters in a datacenter. Supported filters are:\n- account_uuid\n"
      }
    },
    "/blueprints/{uuid}/run_script": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/blueprint_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Run script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Runs the script with data included in the request."
      }
    },
    "/azure_rm/v1/gallery_images/list": {
      "post": {
        "description": "Retrieves the list of all gallery images available. Supported filters are:\n- account_uuid\n- resource_group\n- gallery_name\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/gallery_images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure Shared Gallery Images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_gallery_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/app_tasks/{uuid}/share": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_task_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_task_share_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Share library task",
        "x-ntnx-operations": [
          "share"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Shares the specified library task between projects."
      }
    },
    "/policy_attributes/list": {
      "post": {
        "description": "Retrieves schema information for attributes supported in policy.",
        "tags": [
          "Policy Attributes"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get policy attributes information",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy_attribute",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/policy_attribute_schema"
            }
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/runbooks/marketplace_execute": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_marketplace_execute_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Execute runbook marketplace item",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Execute the runbook marketplace item using data included in the request.\n"
      }
    },
    "/xi/v1/subnets/list": {
      "post": {
        "description": "List all the subnets according to the filter",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/xi_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "xi/subnets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Xi cloud subnets",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_provider_xi_subnet",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/xi_subnet_list_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          }
        }
      }
    },
    "/aws/v1/regions/list": {
      "post": {
        "description": "List all the AWS regions. No filters to be mentioned.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_region_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/regions"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS regions",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_region",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_region_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/blueprints/{uuid}/export_json": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/blueprint_download_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Export blueprint",
        "x-ntnx-operations": [
          "export"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves the specified blueprint in JSON format."
      }
    },
    "/apps/{uuid}/recovery_groups/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/recovery_groups_list_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List recovery groups",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the list of all the recovery groups under a substrate."
      }
    },
    "/quotas": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/quota_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create Quota",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "quota",
        "description": "Creates quota entries for a given list of entities.\n"
      }
    },
    "/resource_types/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/resource_type_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/resource_type_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List the resource_type",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "List the resource_type with associated metadata"
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}/restore": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of substrate on which the action is run"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "The API for restore action of application on provided target.",
        "x-ntnx-operations": [
          "restore"
        ],
        "x-ntnx-kind": "app",
        "description": "API for restore action on provided target."
      }
    },
    "/aws/v1/subnets/list": {
      "post": {
        "description": "List all AWS subnets. Supported filters are:\n- account_uuid\n- region\n- vpc_id\n- availability_zone\nUse account_uuid filter to list all the subnets on the default\nregion of a particular account.\nUse account_uuid and region filters together to list the subnets on\nall VPCs and AZs of a particular region.\nUse account_uuid, region and vpc_id filter together to list the\nsubnets on a particular VPC.\nUse account_uuid, region and availability_zone filter together to list\nthe subnets on a particular AZ.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_subnet_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/subnets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all AWS subnets.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_subnet",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_subnet_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/blueprints/import_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "description": "blueprint_file",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Upload blueprint",
        "x-ntnx-operations": [
          "upload"
        ],
        "x-ntnx-kind": "blueprint",
        "consumes": [
          "application/octet-stream"
        ],
        "description": "Creates a blueprint from uploaded file."
      }
    },
    "/runbooks/{uuid}/update": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runbook uuid to update"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_upload_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update runbook",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Updates the specified runbook using named based request payload.\n"
      }
    },
    "/gcp/v1/networks/list": {
      "post": {
        "description": "List all network interfaces present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/networks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud networks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_network",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/{uuid}/output/download": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download all action logs of an application",
        "x-ntnx-operations": [
          "runlog_download"
        ],
        "x-ntnx-kind": "app",
        "description": "Downloads the output files of all the action logs for the specified application."
      }
    },
    "/app_variables/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_variable_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_variable_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update variable type",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Updates the specified Variable type using data included in the request."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete variable type",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Deletes the specified library variable type"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_variable_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get variable type",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Retrieves the specified Variable type."
      }
    },
    "/app_variables": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_variable_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_variable_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create variable type",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Creates a library variable type using data included in the request."
      }
    },
    "/app_showback/enable": {
      "post": {
        "description": "Enables showback on the current instance.",
        "tags": [
          "App Showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Enable showback",
        "x-ntnx-operations": [
          "enable"
        ],
        "x-ntnx-kind": "app_showback",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/calm_marketplace_items": {
      "post": {
        "description": "Creates a marketplace item using data included in the request.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create marketplace item",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "marketplace_item",
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        }
      }
    },
    "/runbooks/runlogs/{uuid}/rerun": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "trype": "string",
            "description": "Runlog UUID to rerun"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Rerun runbook runlog",
        "x-ntnx-operations": [
          "rerun"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Reruns the specified failed runbook runlog."
      }
    },
    "/vmware/v6/network_adapter/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/network_adapter"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all network adapters supported",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_netadapter",
        "description": "List all network adapter supported by vmware."
      }
    },
    "/meter/applications/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/meter_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/meter_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/meter_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Meter"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Filter API to get cumulative stats at application level for given project",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "meter",
        "description": "Filter API to get cumulative stats at Project and Cluster level\n"
      }
    },
    "/apps/{uuid}/app_runlogs/{runlog_uuid}/abort": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "runlog_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runlog UUID to abort"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Abort runlog",
        "x-ntnx-operations": [
          "runlog_abort"
        ],
        "x-ntnx-kind": "app",
        "description": "Aborts the specified application runlog."
      }
    },
    "/aws/v1/availability_zones/list": {
      "post": {
        "description": "List all the AWS roles. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the availability zones on\na particular AWS account.\nUse the account_uuid and region filters together to list all the\navailability zones on a particular region of an AWS account .\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_availability_zone_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/availability_zones"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS availability zones",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_availability_zone",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_availability_zone_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/vmware/v6/accounts/{account_uuid}/customization/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "name": "account_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of account"
          },
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/customization"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get vmware guest customization",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_customization",
        "description": "Given a Acccount UUID, returns vmware guest customization"
      }
    },
    "/vmware/v6/network/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/network"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all networks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_network",
        "description": "List all networks types supported by the host. Supported filters are:\n- account_uuid\n- hostname\n"
      }
    },
    "/endpoints/import_json": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/endpoint_upload_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Import endpoint",
        "x-ntnx-operations": [
          "upload"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Creates an endpoint using data included in the request.\n"
      }
    },
    "/policy_action_types/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_action_type_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_action_type_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/policy_action_type_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "PolicyActionTypes"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List action_types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy_action_type",
        "description": "Retrieves the list of policy_action_types, applying filters provided (if any) in the request."
      }
    },
    "/tunnels/{uuid}/validate": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Validate Tunnel",
        "x-ntnx-operations": [
          "validate"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Validates the tunnel endpoint & port"
      }
    },
    "/features/calm_detected_dr": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/feature_calm_detected_dr_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/feature_calm_detected_dr_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Set behaviour for feature - Calm Detected DR",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "calm_feature",
        "description": "Set behaviour for feature - Calm Detected DR"
      },
      "get": {
        "description": "Get current behaviour for feature - Calm Detected DR",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get current behaviour for feature - Calm Detected DR",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_calm_detected_dr_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/endpoints": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/endpoint_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create endpoint",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Creates an endpoint using data included in the request.\n"
      }
    },
    "/icons/constant/marketplace/delete": {
      "delete": {
        "description": "Delete an icon for marketplace item.",
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete marketplace icon",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "marketplace_icon",
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/marketplace_icon_status"
            }
          }
        }
      }
    },
    "/app_protection_policies/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_protection_policy_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List app_protection_policies",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Retrieves the list of app_protection_policies, applying filters provided (if any) in the request."
      }
    },
    "/runbooks/runlogs/{uuid}/children/{children_uuid}/resume": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "children_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of task to resume"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Resume task runlog",
        "x-ntnx-operations": [
          "resume"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Resumes the specified task runlog in CONFIRM/INPUT state."
      }
    },
    "/apps/{uuid}/beamsync": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Sync application",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Synchronises the specified application on beam.\n"
      }
    },
    "/tunnels/{uuid}/entity_references": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/tunnel_referrer_entities"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "tags": [
          "tunnels"
        ],
        "description": "Returns entity references",
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "summary": "Gets the entities in which the tunnel is referenced"
      }
    },
    "/runbooks/runlogs/{uuid}/pause": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "trype": "string",
            "description": "Runlog UUID to pause"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Pause runbook runlog",
        "x-ntnx-operations": [
          "pause"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Pauses the specified running runbook runlog."
      }
    },
    "/accounts/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/account_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update account",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "account",
        "description": "Updates the specified account using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete account",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "account",
        "description": "Deletes the specified account."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get account",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "account",
        "description": "Retrieves the specified account."
      }
    },
    "/calm_projects/{uuid}/pending_tasks/{task_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/project_tasks_resource"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "task_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Ergon task uuid"
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "deprecated": true,
        "summary": "Get Pending tasks details",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "project",
        "description": "Retrieves the current status of the task"
      }
    },
    "/runbooks/import_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "description": "runbook_file",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Upload runbook",
        "x-ntnx-operations": [
          "upload"
        ],
        "x-ntnx-kind": "runbook",
        "consumes": [
          "application/octet-stream"
        ],
        "description": "Creates a runbook from uploaded file."
      }
    },
    "/runbooks/{uuid}/variables/{variable_uuid}/values": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Variable UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_variable_values_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "runbook UUID to get"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of variable whose value needs to be fetched"
          },
          {
            "name": "trlId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "trl ID of the initiated execution"
          },
          {
            "name": "requestId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Request ID"
          },
          {
            "required": false,
            "type": "string",
            "description": "will be used to override several field for http request or eScript value",
            "in": "query",
            "name": "overridden_field"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      }
    },
    "/apps/{uuid}/credential/{cred_uuid}/usage": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_credential_usage_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID"
          },
          {
            "name": "cred_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Credential UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Usage of the credential in all tasks",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Usage of the credential in all tasks"
      }
    },
    "/endpoints/import_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Upload endpoint",
        "x-ntnx-operations": [
          "upload"
        ],
        "x-ntnx-kind": "endpoint",
        "consumes": [
          "application/octet-stream"
        ],
        "description": "Creates an endpoint from uploaded file.\n"
      }
    },
    "/app_variables/{uuid}/share": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_variable_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_variable_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_variable_share_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Variables"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Share variable type",
        "x-ntnx-operations": [
          "share"
        ],
        "x-ntnx-kind": "app_variable",
        "description": "Share the library variable type between projects."
      }
    },
    "/meter/projects/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/meter_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/meter_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/meter_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Meter"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Filter API to get cumulative stats at Project level",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "meter",
        "description": "Filter API to get cumulative stats at Project level\n"
      }
    },
    "/apps/{uuid}/blueprints/new/apply": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Apply changes to blueprint",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Apply changes to the application blueprint for the specified application.\n"
      }
    },
    "/vmware/v6/file_paths/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/file_path"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List file paths from datastore",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_datastore",
        "description": "List all file paths from a datastore. Supported filters are:\n- account_uuid\n- datastore_url\n- file_extension\n"
      }
    },
    "/nutanix/v1/categories/list": {
      "post": {
        "description": "List all categories according to the filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/category_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/categories"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix categories.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/category_key_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/apps/{uuid}/clone": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_clone_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_clone_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Clone application",
        "x-ntnx-operations": [
          "clone"
        ],
        "x-ntnx-kind": "app",
        "description": "Clone the application with given uuid.\n"
      }
    },
    "/gcp/v1/disk_types/list": {
      "post": {
        "description": "List all disk types present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/disk_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud disk types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_disk_type",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/aws/v1/volume_types/list": {
      "post": {
        "description": "List all the AWS volume types. No filters to be mentioned.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_volume_type_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/volume_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS volume types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_volume_type",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_volume_type_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/account_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create account",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "account",
        "description": "Creates an account using data included in the request.\n"
      }
    },
    "/environments/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/environment_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of environment to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/environment_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update Environment",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "environment",
        "description": "Given a spec and Environment UUID, update Environment\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/environment_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of the environment to be deleted"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete Environment",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "environment",
        "description": "Delete a Environment given its UUID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/environment_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of Environment to get"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Environment",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "environment",
        "description": "Given a UUID, returns a Environment definition"
      }
    },
    "/apps/{uuid}/run_script": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "application UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Run script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Runs the script with data included in the request."
      }
    },
    "/policies/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/policy_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Policies",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy",
        "description": "Retrieves the list of policies, applying filters provided (if any) in the request"
      }
    },
    "/nutanix/v1/groups/list": {
      "post": {
        "description": "Get entities from entity db.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/groups_get_entities_request"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/groups"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Entities.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/groups_get_entities_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/blueprints/{uuid}/runtime_editables": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_runtime_editable_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID"
          },
          {
            "name": "app_profile_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Uuid of app profile"
          },
          {
            "required": false,
            "type": "string",
            "description": "Name of app profile",
            "in": "query",
            "name": "app_profile_name"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runtime variables",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves all the runtime editables for the specified blueprint.\n"
      }
    },
    "/aws/v1/machine_types/list": {
      "post": {
        "description": "List all the AWS machine types. No filters to be mentioned.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_machine_type_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/machine_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS machine types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_machine_type",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_machine_type_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/network_groups/{uuid}/tunnels/{tunnel_uuid}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/tunnel_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Network Group UUID"
          },
          {
            "name": "tunnel_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Tunnel UUID to be deleted"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Deletes the Tunnel associated with Network Group",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Deletes the Tunnel associated with Network Group"
      }
    },
    "/azure_rm/v1/image_offers/list": {
      "post": {
        "description": "Retrieves the list of all image_offers available. Supported filters are:\n- account_uuid\n- location\n- publisher\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/image_offers"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure image_offers",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_image_offer",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/blueprints": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create blueprint",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Creates a blueprint using data included in the request.\n"
      }
    },
    "/azure_rm/v1/subscriptions/list": {
      "post": {
        "description": "Retrieves the list of all subscriptions available. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/subnets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure subnets",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_subnet",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/resource_types/{uuid}/test_runbook/{action_uuid}/run": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_run_specs"
            },
            "required": true,
            "description": "Request body for Test Runbook",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Test Runbook of this Resource Type's action",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Test Runbook of this Resource Type's action"
      }
    },
    "/vmware/v6/storage_pod/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/storage_pod"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all storage_pods",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_storage_pod",
        "description": "List all storage_pods in a datacenter. Supported filters are:\n- account_uuid\n"
      }
    },
    "/blueprints/{uuid}/run_script/abort/{runid}/{trlid}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/abort_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          },
          {
            "name": "runid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "run id of the script"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_abort_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Abort script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Aborts the specified script run request using data provided in the request."
      }
    },
    "/environments/{uuid}/usage": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/environment_usage_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/environment_usage_input"
            },
            "required": true,
            "name": "consumption_filter",
            "in": "body"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Return the usage details for an environment",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": null,
        "description": "Return the environment  usage details"
      }
    },
    "/replication_connections/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update replication_connection",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Updates the specified replication_connection using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete replication_connection",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Deletes the specified replication_connection."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/replication_connection_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get replication_connection",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Retrieves the specified replication_connection."
      }
    },
    "/nutanix/v1/vms/list": {
      "post": {
        "description": "List all VMs according to the filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vm_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/vms"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix VMs.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/vm_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/app_protection_policies/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update app_protection_policy",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Updates the specified app_protection_policy using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete app_protection_policy",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Deletes the specified app_protection_policy."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get app_protection_policy",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Retrieves the specified app_protection_policy."
      }
    },
    "/app_showback/status": {
      "get": {
        "description": "Retrieves showback status on the current instance.",
        "tags": [
          "App Showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get showback status",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_showback",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_showback_status_response"
            }
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/aws/v1/security_groups/list": {
      "post": {
        "description": "List all AWS Security Groups. Supported filters are:\n- account_uuid\n- region\n- vpc_id\n- include_classic_sg\nUse account_uuid to list all security groups on the default\nregion of a particular AWS account.\nUse account_uuid and region filters together to list all\nsecurity groups in a particular region.\nUse account_uuid, region and vpc_id filters together to list all\nsecurity groups in a particular vpc.\nSet include_classic_sg filter to 'True' to also show\nEC2 classic security groups in the above three cases.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_security_group_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/security_groups"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all AWS Security Groups",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_security_group",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_security_group_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/policies": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/policy_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create Policy",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "policy",
        "description": "Creates a policy and/or policy-action using data included in the request\n"
      }
    },
    "/runbooks": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create runbook",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Creates a runbook using data included in the request.\n"
      }
    },
    "/apps/{uuid}/app_runlogs/{runlog_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "runlog_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runlog UUID to get"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runlog",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the specified application runlog information."
      }
    },
    "/calm_marketplace_items/{uuid}": {
      "put": {
        "description": "Updates the specified marketplace item using data included in the request.",
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update marketplace item",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "marketplace_item",
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the specified marketplace item.",
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete marketplace item",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "marketplace_item",
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        }
      },
      "get": {
        "description": "Returns the specified marketplace item.",
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get marketplace item",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "marketplace_item",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/marketplace_item_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        }
      }
    },
    "/blueprints/{uuid}/pending_launches/{launched_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_pending_launches_resource"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          },
          {
            "name": "launched_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Launch UUID"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get pending launch details",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves the current status of blueprint launch for the specified launch id."
      }
    },
    "/azure_rm/v1/image_publishers/list": {
      "post": {
        "description": "Retrieves the list of all image_publishers available. Supported filters are:\n- account_uuid\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/image_publishers"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure image_publishers",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_image_publisher",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/runbooks/runlogs/{uuid}/abort": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Abort execution",
        "x-ntnx-operations": [
          "abort"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Aborts the specified runbook runlog."
      }
    },
    "/app_showback/cancel": {
      "post": {
        "description": "Cancels the triggered showback enablement/disablement operation.",
        "tags": [
          "App Showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Cancel showback enable/disable",
        "x-ntnx-operations": [
          "disable"
        ],
        "x-ntnx-kind": "app_showback",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/runbooks/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_list_input"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List runbooks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Retrieves the list of runbooks, applying filters provided (if any) in the request."
      }
    },
    "/calm_marketplace_items/list": {
      "post": {
        "description": "Retrieves a list of marketplace items using filters provided.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/marketplace_item_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List marketplace items",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "marketplace_item",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/marketplace_item_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        }
      }
    },
    "/azure_rm/v1/subnets/list": {
      "post": {
        "description": "Retrieves the list of all subnets available. Supported filters are:\n- account_uuid\n- location\n- resource_group\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/subnets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure subnets",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_subnet",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/app_runlogs/archival_policy/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_runlog_archive_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Runlogs"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get archived runlog",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Retrieves information of the specified runlog archive."
      }
    },
    "/runbooks/{uuid}/run_script/abort/{runid}/{trlid}": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/abort_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runbook UUID to get"
          },
          {
            "name": "runid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "run id of the script"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_abort_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Abort script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Aborts the specified script run request using data provided in the request."
      }
    },
    "/runbooks/runlogs/{uuid}/children/{children_uuid}/output": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_output_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "children_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of child runlog"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runlog output",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Returns last ten lines of output of the specified task runlog."
      }
    },
    "/blueprints/{uuid}/patch_with_environment/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/blueprint_patch_with_environment_validate_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_patch_with_environment_validate_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Validate blueprint patching",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Validate if the specified app-profiles in the blueprint can be patched with the specified environments\n"
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_substrate_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of substrate element to get"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get substrate element",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the specified substrate element from the application."
      }
    },
    "/saas_consumption": {
      "delete": {
        "description": "Delete consumption entries for given time range",
        "tags": [
          "SaaS Consumption"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete consumption entries for given time range",
        "x-ntnx-operations": [
          "disable"
        ],
        "x-ntnx-kind": "app_showback",
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        }
      }
    },
    "/nutanix/v1/images/list": {
      "post": {
        "description": "List all the images according to the filters",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/image_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix images.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/image_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/blueprints/validate": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_custom_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Validate blueprint",
        "x-ntnx-operations": [
          "validate"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Validate the given blueprint spec.\n"
      }
    },
    "/apps/engine_runlogs/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_task_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "app_runlogs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Returns the engine runlog task information",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Returns the engine runlog task information"
      }
    },
    "/aws/v1/mixed_images/list": {
      "post": {
        "description": "Retrieves the list of all mixed images available. Supported filters are:\n- account_uuid\n- region\nUse account_uuid to list images on a particular account.\nUse account_uuid and region filters together to list images\nbelonging to a particular region.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_mixed_image_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/mixed_images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List AWS mixed images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_mixed_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_mixed_image_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/icons/constant/marketplace/upload": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/marketplace_icon_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_icon_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "binary"
            },
            "required": true,
            "description": "icon file",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create app icon for marketplace",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "marketplace_icon",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Creates an marketplace icon object using data included in the request and returns metadata of created image object.\n"
      }
    },
    "/nutanix/v1/vpcs/list": {
      "post": {
        "description": "List nutanix vpcs with filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vpc_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/vpcs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Nutanix vpcs.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/vpc_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/blueprints/{uuid}/launch": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_launch_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be launched"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_launch_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Launch blueprint",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Launches the specified blueprint.\n"
      }
    },
    "/policies/{uuid}/executions/{exec_uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/approval_request_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Policy's execution",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy",
        "description": "Retrieves the specified policy's execution"
      }
    },
    "/apps/{uuid}/recovery_group_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "The API for recovery_group_delete action of application on provided target.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "API for recovery_group_delete action on provided target."
      }
    },
    "/features/policy/download_logs": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "tags": [
          "Features"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "x-doc-hide": false,
        "summary": "Download Policy Engine VM status logs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "x-private": false,
        "description": "Downloads the Policy Engine VM status logs"
      }
    },
    "/vmware/v6/datacenter/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/datacenter"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List datacenters",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_datacenter",
        "description": "List all datatcenters in a vcenter account. Supported filters are:\n- account_uuid\n"
      }
    },
    "/vmware/v6/accounts/{account_uuid}/vms/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "name": "account_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of account"
          },
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/vm"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get vmware vm given account id",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_vm",
        "description": "Given a UUID, returns a vmware list of vm"
      }
    },
    "/runbooks/runlogs/{uuid}/children/{children_uuid}/output/download": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "children_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of child runlog"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download task runlog output file",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Downloads the output file of the specified task runlog."
      }
    },
    "/gcp/v1/machine_types/list": {
      "post": {
        "description": "List all machine types present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/machine_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud machine types",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_machine_type",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/app_icons/{uuid}/is_marketplaceicon": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Check app icon",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_icon",
        "description": "Check if App icon is used by MarketPlaceItem given its UUID"
      }
    },
    "/vmware/v6/timezone/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/timezone"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all timezones",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_timezone",
        "description": "List all timezones supported by the guest os. Supported filters are:\n- account_uuid\n- guest_os\n"
      }
    },
    "/blueprints/marketplace_launch": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_marketplace_launch_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_marketplace_launch_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Launch marketplace item",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Launches the marketplace item using data included in the request.\n"
      }
    },
    "/blueprints/{uuid}/app_profile/{app_profile_uuid}/config_spec/{config_uuid}/app_protection_policies/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_protection_policy_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List app_protection_policies",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Retrieves the list of app_protection_policies corresponding to the config uuid"
      }
    },
    "/app_icons/upload": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_icon_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "binary"
            },
            "required": true,
            "description": "icon file",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create app icon",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "app_icon",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Creates an app icon object using data included in the request and returns metadata of created image object.\n"
      }
    },
    "/blueprints/import_json": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_upload_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Import blueprint",
        "x-ntnx-operations": [
          "import"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Creates a blueprint using data included in the request.\n"
      }
    },
    "/azure_rm/v1/availability_zones/list": {
      "post": {
        "description": "Retrieves the list of all availability_zones available. Supported filters are:\n- account_uuid\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/availability_zones"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure availability_zones",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_availability_zone",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/saas_consumption/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_saas_consumption_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_saas_consumption_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_saas_consumption_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "SaaS Consumption"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List consumption entries for given time range",
        "x-ntnx-operations": [
          "disable"
        ],
        "x-ntnx-kind": "app_showback",
        "description": "List consumption entries for given time range"
      }
    },
    "/nutanix/v1/vm_recovery_points/list": {
      "post": {
        "description": "List nutanix vm recovery points with filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vm_recovery_point_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/vm_recovery_points"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Nutanix vm recovery points.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/vm_recovery_point_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/calm_projects/{uuid}": {
      "put": {
        "description": "This operation submits a request to update a existing Project based on the input parameters.\n",
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/custom_project_internal_intent_input"
            },
            "required": true,
            "description": "The entity used to create or modify a project.",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update a existing Project",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "project",
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "$ref": "#/definitions/custom_project_internal_intent_response"
            }
          },
          "default": {
            "description": "Internal Error"
          }
        }
      },
      "delete": {
        "responses": {
          "202": {
            "description": "Request Accepted",
            "schema": {
              "$ref": "#/definitions/custom_project_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Projects"
        ],
        "summary": "Delete a existing Project",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "project",
        "description": "This operation submits a request to delete a existing Project."
      }
    },
    "/approval_requests/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/approval_request_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/approval_request_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "approval_requests"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List Approval Requests",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "approval_request",
        "description": "Retrieves the list of approval_requests, applying filters provided (if any) in the request"
      }
    },
    "/vmware/v6/template/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/template"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List vm templates",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_template",
        "description": "List all vm templates in a datacenter. Supported filters are:\n- account_uuid\n"
      }
    },
    "/tunnels": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/tunnel_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/tunnel_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create Tunnel",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Creates a tunnel entity using data included in the request"
      }
    },
    "/kubernetes/v1/karbon/clusters/list": {
      "post": {
        "description": "Retrieves the list of all Karbon managed K8s cluster. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/kubernetes_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "kubernetes/karbon_clusters"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Clusters in Karbon managed K8s cluster",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Kubernetes namespaces response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/{uuid}/app_runlogs/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_runlog_list"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_runlog_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List application runlogs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the list of runlogs associated with the application, applying filter provided (if any) in the request.\n"
      }
    },
    "/blueprints/{uuid}/patch_with_environment": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/blueprint_marketplace_launch_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_patch_with_environment_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Patch blueprint",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Patch the specified app profiles in the blueprint with the specified environments\n"
      }
    },
    "/blueprints/{uuid}/export_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          },
          {
            "in": "formData",
            "type": "string",
            "description": "Passphrase to encrypt secrets",
            "name": "passphrase"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download blueprint",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "blueprint",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Downloads the specified blueprint in JSON format"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download blueprint",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Downloads the specified blueprint in JSON format."
      }
    },
    "/jobs": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/jobs_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/jobs_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create job",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "job",
        "description": "Creates an job using data included in the request.\n"
      }
    },
    "/network_groups/{uuid}/tunnels": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_tunnel_vm_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_tunnel_vm_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/network_group_tunnel_vm_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Creates tunnel entity for Network Group",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Creates tunnel entity for Network Group"
      }
    },
    "/jobs/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/jobs_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/jobs_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update job",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "job",
        "description": "Updates the job using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/jobs_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete job",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "job",
        "description": "Delete the job matching the UUID.\n"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/jobs_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/job_failure_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "View job",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "job",
        "description": "View the job matching the UUID.\n"
      }
    },
    "/nutanix/v1/subnets/list": {
      "post": {
        "description": "List all the subnets according to the filter",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/subnet_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/subnets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix subnets.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/subnet_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/runbooks/{uuid}/run_script": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_script_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runbook UUID to get"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_script_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Run script",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Runs the script with data included in the request."
      }
    },
    "/quotas/state/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/quota_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Gets the Quota state of the list of entities",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "quota",
        "description": "Gets the Quota state of the list of entities.\n"
      }
    },
    "/blueprints/{uuid}/app_profile/{app_profile_uuid}/cost": {
      "get": {
        "description": "Retrives the cost of blueprint for the given app profile taking into account all the deployments.",
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID"
          },
          {
            "name": "app_profile_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "UUID of App Profile"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "summary": "Get cost for app profile",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_profile_cost_object"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        }
      }
    },
    "/accounts/{uuid}/vms/list": {
      "post": {
        "description": "Retrieves the list of VM's from the Account. Supported filters are:\n- name\n- uuid\n- cpu\n- memory\n- power_state\n- ip_addresses\n- categories\n- tags\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/accounts_vms_list_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "summary": "List of vms associated with the Account",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "account",
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        }
      }
    },
    "/network_groups/{uuid}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/network_group_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Network Group UUID to be deleted"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete Network Group",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Deletes the specified Network Group"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Fetch Network Group configuration",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Retrieves the specified Network Group configuration"
      }
    },
    "/endpoints/{uuid}/export_json": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoint_download_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Endpoint UUID to get"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Export endpoint",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Retrieves the specified endpoint in JSON format."
      }
    },
    "/policies/{uuid}/clone": {
      "post": {
        "responses": {
          "200": {
            "description": "Policy cloning Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_clone_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Policy UUID to be cloned"
          },
          {
            "schema": {
              "$ref": "#/definitions/policy_clone_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "policies"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Clone Policy",
        "x-ntnx-operations": [
          "clone"
        ],
        "x-ntnx-kind": "policy",
        "description": "Clones the specified Policy.\n"
      }
    },
    "/tunnels/{uuid}/config_file": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "in": "formData",
            "type": "string",
            "description": "Passphrase to encrypt secrets",
            "name": "passphrase"
          }
        ],
        "tags": [
          "tunnels"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get new config file for tunnel creation",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "tunnel",
        "description": "Returns new config file for tunnel"
      }
    },
    "/xi/v1/categories/list": {
      "post": {
        "description": "List all categories according to the filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/xi_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "xi/categories"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Xi cloud categories",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_provider_xi_category",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/groups_get_entities_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          }
        }
      }
    },
    "/quotas/update/state": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/quota_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/quota_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/quota_response"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Quota"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Bulk updates quota state",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "quota",
        "description": "Bulk updates quota state for a list of entities.\n"
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}/snapshot_delete": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of substrate on which the action is run"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "The API for snapshot_delete action of application on provided target.",
        "x-ntnx-operations": [
          "snapshot_delete"
        ],
        "x-ntnx-kind": "app",
        "description": "API for snapshot_delete action on provided target."
      }
    },
    "/apps/{uuid}/actions/{action_name}/variables": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/action_variables_get_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "required": true,
            "type": "string",
            "description": "Action name whose variables are to be fetched",
            "in": "path",
            "name": "action_name"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get app action variables",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves variables defined on the specified application action.\n"
      }
    },
    "/runbooks/{uuid}/execute": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_run_specs"
            },
            "description": "Request body for runbook run.",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Execute/Run runbook",
        "x-ntnx-operations": [
          "run"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Execute/Run the specified runbook."
      }
    },
    "/runbooks/runlogs/{uuid}/children/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_list"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/runbook_runlog_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List all runlogs for given execution",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Retrieves the list of runlogs associated with the runbook execution, applying filter provided (if any) in the request."
      }
    },
    "/app_runlogs/archive_file/{uuid}/download": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Runlogs"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "x-doc-hide": false,
        "summary": "Get runlog archive",
        "x-ntnx-operations": [
          "archive_download"
        ],
        "x-ntnx-kind": "app_runlog",
        "x-private": false,
        "description": "Downloads the specified archive file containing scripts and execution outputs."
      }
    },
    "/apps/{uuid}/app_runlogs/{runlog_uuid}/output/download": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "runlog_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runlog UUID to get"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download runlog output file",
        "x-ntnx-operations": [
          "runlog_download"
        ],
        "x-ntnx-kind": "app",
        "description": "Downloads the output file of the specified application runlog."
      }
    },
    "/apps/{uuid}/actions/{action_uuid}/run": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "action_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Action UUID to execute"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Run action(with UUID)",
        "x-ntnx-operations": [
          "action_run"
        ],
        "x-ntnx-kind": "app",
        "description": "Runs the specified application action on provided target.\n"
      }
    },
    "/blueprints/{uuid}/clone": {
      "post": {
        "responses": {
          "200": {
            "description": "Blueprint cloning Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_clone_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be cloned"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_clone_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Clone blueprint",
        "x-ntnx-operations": [
          "clone"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Clones the specified blueprint.\n"
      }
    },
    "/accounts/{uuid}/verify": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Verify account",
        "x-ntnx-operations": [
          "verify"
        ],
        "x-ntnx-kind": "account",
        "description": "Verifies credentials associated with the specified account."
      }
    },
    "/runbooks/runlogs/{uuid}/output/download": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Download runlog output file",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Downloads the output file of the specified runbook runlog."
      }
    },
    "/app_icons/{uuid}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete app icon",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "app_icon",
        "description": "Delete an App icon given its UUID."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_icon_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get app icon",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_icon",
        "description": "Retrieves the specified app icon metadata and base64 encoded icon."
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}/recovery_points/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/recovery_points_list_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Substrate UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List recovery points",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the list of all the recovery points under a substrate."
      }
    },
    "/features/policy/prechecks": {
      "get": {
        "description": "Get precheck status for enablement of Policy Engine",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get precheck status for enablement of Policy Engine",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_policy_prechecks_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/meter/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/meter_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/meter_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/meter_list_request"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Meter"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Filter API to iterate over metered entries",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "meter",
        "description": "Filter API to iterate over metered entries.\n"
      }
    },
    "/apps/engine_runlogs/tree": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_tree_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_tree_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "app_runlogs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Returns tree of depth=1",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Returns tree of depth=1"
      }
    },
    "/providers/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/provider_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of provider to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/provider_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "providers"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update provider",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "custom_provider",
        "description": "Given a spec and provider UUID, update provider\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/provider_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of the provider to be deleted"
          }
        ],
        "tags": [
          "providers"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete provider",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "custom_provider",
        "description": "Delete a provider given its UUID"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/provider_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of provider to get"
          }
        ],
        "tags": [
          "providers"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get provider",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "custom_provider",
        "description": "Given a UUID, returns a provider definition"
      }
    },
    "/app_icons/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_icon_summary_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_icon_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_icon_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "App Icons"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List app icons",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_icon",
        "description": "Retrieves the list of all app icons' metadata."
      }
    },
    "/resource_types": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/resource_type_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/resource_type_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create resource_type",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Given a spec creates a resource_type with associated metadata\n"
      }
    },
    "/azure_rm/v1/image_skus/list": {
      "post": {
        "description": "Retrieves the list of all image_skus available. Supported filters are:\n- account_uuid\n- location\n- publisher\n- offer\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/image_skus"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure image_skus",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_image_sku",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/tunnels/server": {
      "get": {
        "description": "Get CNAME of the tunnel server for this cluster",
        "tags": [
          "tunnels"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get CNAME of the tunnel server for this cluster",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "tunnel",
        "responses": {
          "200": {
            "type": "string",
            "description": "Success"
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/tunnel_status"
            }
          }
        }
      }
    },
    "/api_keys/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/api_key_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/project_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "users"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all API keys",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "project",
        "description": "Retrieves a list of all API keys. Supported filters are:\n- name\n"
      }
    },
    "/app_protection_policies": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_protection_policy_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_protection_policy_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "AppProtectionPolicies"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create app_protection_policy",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "app_protection_policy",
        "description": "Creates an app_protection_policy using data included in the request.\n"
      }
    },
    "/app_tasks/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_task_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_task_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update library task",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Updates the specified library task using data included in the request."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete library task",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Deletes the specified library task."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_task_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_task_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "App Tasks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get library task",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_task",
        "description": "Retrieves the specified library task."
      }
    },
    "/apps/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update application",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Updates the specified application using data included in the request\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete application",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "app",
        "description": "Deletes the specified application."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get application",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves the specified application."
      }
    },
    "/blueprints/pending_launches/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_pending_launches_list_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List pending launches",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrieves a list of all pending launch requests for the specified blueprint"
      }
    },
    "/endpoints/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/endpoint_custom_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update endpoint",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Updates the specified endpoint using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete endpoint",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Deletes the specified endpoint."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/endpoint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get endpoint",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Returns the specified endpoint."
      }
    },
    "/resource_types/{uuid}/actions/{action_uuid}/parameters": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/resource_type_action_parameters"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/resource_type_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of the resource_type"
          },
          {
            "name": "action_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of resource_type action to fetch"
          }
        ],
        "tags": [
          "resource_types"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get i/o parameters of a resource_type action",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "resource_type",
        "description": "Given an resource_type action UUID, returns the input & output parameters corresponding to the action"
      }
    },
    "/features/calm_orch_dr": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/feature_calm_orch_dr_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/feature_calm_orch_dr_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Set behaviour for feature - Calm Orchestrated DR",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "calm_feature",
        "description": "Set behaviour for feature - Calm Orchestrated DR"
      },
      "get": {
        "description": "Get current behaviour for feature - Calm Orchestrated DR",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get current behaviour for feature - Calm Orchestrated DR",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_calm_orch_dr_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/azure_rm/v1/security_groups/list": {
      "post": {
        "description": "Retrieves the list of all security_groups available. Supported filters are:\n- account_uuid\n- location\n- resource_group\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/security_groups"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure security_groups",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_security_group",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/endpoints/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/endpoint_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/endpoint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/endpoint_list_input"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List endpoints",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "endpoint",
        "description": "Retrieves the list of endpoints, applying filters provided (if any) in the request."
      }
    },
    "/features/project_saml": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/feature_project_saml_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/feature_project_saml_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Set behaviour for feature - SAML Support",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "calm_feature",
        "description": "Set behaviour for feature - SAML Support"
      },
      "get": {
        "description": "Get current behaviour for feature - SAML Support",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get current behaviour for feature - SAML Support",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_project_saml_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/nutanix/v1/hosts/list": {
      "post": {
        "description": "List all hosts according to the filter.",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/host_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "nutanix/hosts"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get a list of Nutanix hosts.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "ntnx_meta_api",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/host_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/nutanix_status"
            }
          }
        }
      }
    },
    "/policy_events/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/policy_event_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_event_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/policy_event_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "PolicyEvents"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List events",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "policy_event",
        "description": "Retrieves the list of events, applying filters provided (if any) in the request."
      }
    },
    "/app_showback/{uuid}/csv_file_readiness_status": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "app_showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "checks csv file readiness status",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_showback",
        "description": "API to check csv file readiness status"
      }
    },
    "/gcp/v1/zones/list": {
      "post": {
        "description": "List all zones available for a GCP account. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/zones"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud zones",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_zone",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/replication_connections/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/replication_connection_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/replication_connection_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List replication_connections",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Retrieves the list of replication_connections, applying filters provided (if any) in the request."
      }
    },
    "/runbooks/{uuid}/run_script/output/{trlid}/{ergon_task_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/script_output_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runbook UUID to get"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "name": "ergon_task_id",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Ergont task UUID"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get script output",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Retrives the output for the script run with data included in the request."
      }
    },
    "/blueprints/{uuid}/run_script/output/{trlid}/{ergon_task_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/script_output_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          },
          {
            "name": "trlid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "trl UUID of the script"
          },
          {
            "name": "ergon_task_id",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Ergont task UUID"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get script output",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Retrives the output for the script run with data included in the request."
      }
    },
    "/blueprints/{uuid}/variables/{variable_uuid}/values": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Variable UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_variable_values_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "blueprint UUID to get"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of variable whose value needs to be fetched"
          },
          {
            "name": "trlId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "trl ID of the initiated execution"
          },
          {
            "name": "requestId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Request ID"
          },
          {
            "required": false,
            "type": "string",
            "description": "will be used to override several field for http request or eScript value",
            "in": "query",
            "name": "overridden_field"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      }
    },
    "/calm_projects/{uuid}/usage": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/project_usage_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/project_usage_input"
            },
            "required": true,
            "name": "consumption_filter",
            "in": "body"
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Return the usage details of project",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "project",
        "description": "Return the project usage details"
      }
    },
    "/blueprints/{uuid}/simple_launch": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_launch2_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be launched"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_launch2_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Launch the blueprint",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Launch the given blueprint.\n"
      }
    },
    "/vmware/v6/datastore/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/datastore"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List datastores",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_datastore",
        "description": "List all datastores in a host. Supported filters are:\n- account_uuid\n- hostname\n"
      }
    },
    "/app_showback/prepare_csv_task_exists": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "default": {
            "description": "Internal Error"
          }
        },
        "parameters": [
          {
            "schema": [
              {
                "$ref": "#/definitions/project_reference"
              }
            ],
            "name": "project_reference",
            "in": "query"
          }
        ],
        "tags": [
          "app_showback"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "checks existing prepare_csv task",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_showback",
        "description": "API to check existing prepare_csv task"
      }
    },
    "/api_keys/{name}": {
      "put": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "Key name to disable accesses to",
            "in": "path",
            "name": "name"
          },
          {
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "x-ntnx-enum": [
                    "ENABLED",
                    "DISABLED"
                  ],
                  "type": "string",
                  "description": "Intended state of the key"
                }
              }
            },
            "required": true,
            "description": "Request body for enabling/disabling API key",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "users"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Enable/Disable API key",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "project",
        "description": "Enable/Disable access to the API key. Used for temporarily disabling accesses"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "Key name to delete",
            "in": "path",
            "name": "name"
          }
        ],
        "tags": [
          "users"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Delete API Key",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "project",
        "description": "Deletes the specified API Key"
      }
    },
    "/azure_rm/v1/storage_accounts/list": {
      "post": {
        "description": "Retrieves the list of all storage_accounts available. Supported filters are:\n- account_uuid\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/storage_accounts"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure storage_accounts",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_storage_account",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/xi/v1/vpcs/list": {
      "post": {
        "description": "List all the virtual networks according to the filter",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/xi_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "xi/vpcs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Xi cloud VPCs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_provider_xi_vpc",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/xi_vpc_list_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/xi_status"
            }
          }
        }
      }
    },
    "/blueprints/{uuid}/validate_launch": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be launched"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_launch_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Validate launch params",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Validates given launch params\n"
      }
    },
    "/azure_rm/v1/vm_sizes/list": {
      "post": {
        "description": "Retrieves the list of all vm_sizes available. Supported filters are:\n- account_uuid\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/vm_sizes"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure vm_sizes",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_vm_size",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/runbooks/{uuid}/export_json": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_download_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Action UUID to get"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Export runbook",
        "x-ntnx-operations": [
          "download"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Retrieves the specified runbook in JSON format."
      }
    },
    "/apps/{uuid}/blueprints/new": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Update application blueprint",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "app",
        "description": "Updates the blueprint for the specified application using data included in the request.\n"
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/mutable_blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get modified application blueprint",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Returns the modified blueprint if the blueprint has been modified. It will throw an error if there is no modification in the blueprint after launch."
      }
    },
    "/approvals/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/approval_request_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "approval_requests"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get Approval",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "approval_request",
        "description": "Retrieves the specified approval_request"
      }
    },
    "/license/consumption": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/license_consumption_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/license_status"
            }
          }
        },
        "parameters": [
          {
            "type": "number",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query"
          }
        ],
        "tags": [
          "license"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get the CALM consumption for all the clusters",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "license",
        "description": "Gets the consumption for all the clusters"
      }
    },
    "/accounts/{uuid}/sync": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Trigger platform sync",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "account",
        "description": "Trigger platform sync on an account\n"
      }
    },
    "/apps/{uuid}/variables/{variable_uuid}/values": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Variable UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_variable_values_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "action_run"
        ],
        "x-ntnx-kind": "app",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "app UUID to get"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of variable whose value needs to be fetched"
          },
          {
            "name": "trlId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "trl ID of the initiated execution"
          },
          {
            "name": "requestId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Request ID"
          },
          {
            "required": false,
            "type": "string",
            "description": "will be used to override several field for http request or eScript value",
            "in": "query",
            "name": "overridden_field"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "action_run"
        ],
        "x-ntnx-kind": "app",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      }
    },
    "/apps/{uuid}/actions/run": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_status"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_actionrun_by_name_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Run action(with name)",
        "x-ntnx-operations": [
          "action_run"
        ],
        "x-ntnx-kind": "app",
        "description": "Runs the specified application action on provided target.\n"
      }
    },
    "/gcp/v1/persistent_disks/list": {
      "post": {
        "description": "List all persistent disks present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/persistent_disks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud persistent disks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_persistent_disk",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/vmware/v6/tags/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List tags",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_tag",
        "description": "List all tags requested in the filter. Supported filters are:\n- account_uuid\n- tag_ids\n"
      }
    },
    "/calm_users/search": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/users_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/user_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/users_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Users"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "User search by pattern",
        "x-ntnx-operations": [
          "search"
        ],
        "x-ntnx-kind": "directory_service",
        "description": "Search for usernames that match the pattern in the Database or Active Directory.\n"
      }
    },
    "/vmware/v6/library/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/vmware_library_metadata"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/library"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all content libraries",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_customization",
        "description": "List all content libraries\n"
      }
    },
    "/blueprints/{uuid}": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be updated"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_custom_intent_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Update blueprint",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Updates the specified blueprint using data included in the request.\n"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to be deleted"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Delete blueprint",
        "x-ntnx-operations": [
          "delete"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Deletes the specified blueprint."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/blueprint_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Blueprint UUID to get"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get blueprint",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Returns the specified blueprint."
      }
    },
    "/apps/{uuid}/patch/{patch_uuid}/run": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "patch_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Patch UUID to execute"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_patch_run_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Run Patch(with UUID)",
        "x-ntnx-operations": [
          "action_run"
        ],
        "x-ntnx-kind": "app",
        "description": "Run the specified patch on the application.\n"
      }
    },
    "/accounts/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/account_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List accounts",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "account",
        "description": "Retrieves the list of accounts, applying filters provided (if any) in the request."
      }
    },
    "/azure_rm/v1/gallery_image_versions/list": {
      "post": {
        "description": "Retrieves the list of all gallery image version available. Supported filters are:\n- account_uuid\n- resource_group\n- gallery_name\n- image_name\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/gallery_image_versions"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure Shared Gallery Image Versions",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_gallery_image_version",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/azure_rm/v1/images/list": {
      "post": {
        "description": "Retrieves the list of all images available. Supported filters are:\n- account_uuid\n- location\n- publisher\n- offer\n- sku\n- version\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/api_keys": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/generate_api_key_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "users"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create API Key",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "project",
        "description": "Creates an API key using data included in the request"
      }
    },
    "/blueprints/marketplace_express_launch": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/blueprint_marketplace_launch_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/blueprint_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/blueprint_marketplace_express_launch_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Blueprints"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Express launch marketplace item",
        "x-ntnx-operations": [
          "launch"
        ],
        "x-ntnx-kind": "blueprint",
        "description": "Launches the marketplace item without environment patching using data included in the request.\n"
      }
    },
    "/network_groups/tunnels": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/network_group_tunnel_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create Network Group and its tunnel",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Creates a Network Group entity and its tunnel using data included in the request"
      }
    },
    "/vmware/v6/library_items/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/vmware_library_item_metadata"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/library_items"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all items from content libraries",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_customization",
        "description": "List all items in content libraries. Supported filters are:\n- library_id\n"
      }
    },
    "/calm_marketplace_items/{uuid}/variables/{variable_uuid}/values": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Variable UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/blueprint_variable_values_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "marketplace_item",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/fetch_variable_value_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/marketplace_item_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "marketplace_item UUID to get"
          },
          {
            "name": "variable_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of variable whose value needs to be fetched"
          },
          {
            "name": "trlId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "trl ID of the initiated execution"
          },
          {
            "name": "requestId",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": false,
            "in": "query",
            "type": "string",
            "description": "Request ID"
          },
          {
            "required": false,
            "type": "string",
            "description": "will be used to override several field for http request or eScript value",
            "in": "query",
            "name": "overridden_field"
          }
        ],
        "tags": [
          "Marketplace Items"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get dynamic variable values",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "marketplace_item",
        "description": "Initiates execution of escript/http request configured for the specific variable and returns the final value."
      }
    },
    "/projects/consumption_list": {
      "post": {
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/app_consumption_response"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_consumption_input"
            },
            "required": true,
            "name": "consumption_filter",
            "in": "body"
          },
          {
            "type": "number",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query"
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List the consumption for the given project uuids",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "project",
        "description": "List the consumption for the given project uuids."
      }
    },
    "/aws/v1/key_pairs/list": {
      "post": {
        "description": "List all the AWS key pairs. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the key pairs on the default region of\na particular AWS account.\nUse account_uuid and region filters together to list the key pairs on\na particular region of an AWS account.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_key_pair_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/key_pairs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all the AWS key pairs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_key_pair",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_key_pair_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/api_keys/{name}/reset": {
      "put": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary"
            }
          },
          "404": {
            "description": "Invalid UUID provided",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/project_status"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "type": "string",
            "description": "Key name to delete",
            "in": "path",
            "name": "name"
          }
        ],
        "tags": [
          "users"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Reset API token",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "project",
        "description": "Reset API token for the specified key"
      }
    },
    "/azure_rm/v1/image_versions/list": {
      "post": {
        "description": "Retrieves the list of all image_versions available. Supported filters are:\n- account_uuid\n- location\n- publisher\n- offer\n- sku\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/image_versions"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure image_versions",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_image_version",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/vmware/v6/accounts/{account_uuid}/templates/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        },
        "parameters": [
          {
            "name": "account_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "uuid of account"
          },
          {
            "schema": {
              "$ref": "#/definitions/vmware_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "vmware/template"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get vmware template list",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "vmware_template",
        "description": "Given a Acccount UUID, returns vmware template list"
      }
    },
    "/gcp/v1/snapshots/list": {
      "post": {
        "description": "List all snapshots available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/snapshots"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud snapshots",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_snapshot",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/accounts/clusters/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_cluster_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/account_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List cluster information of accounts",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "account",
        "description": "Retrieves the list of clusters for accounts, applying filters provided (if any) in the request."
      }
    },
    "/gcp/v1/instances/list": {
      "post": {
        "description": "List all VM's present in a zone. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/instances"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud vm instances",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_instance",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/replication_connections/{uuid}/verify": {
      "get": {
        "responses": {
          "200": {
            "description": "Request Succeeded"
          },
          "404": {
            "description": "Invalid UUID Provided",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/replication_connection_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "ReplicationConnections"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Verify replication_connection",
        "x-ntnx-operations": [
          "verify"
        ],
        "x-ntnx-kind": "replication_connection",
        "description": "Verifies link between 2 accounts of replication_connection."
      }
    },
    "/approvals/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/approval_request_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/approval_request_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/approval_request_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "approval_requests"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List Approvals",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "approval_request",
        "description": "Retrieves the list of approvals, applying filters provided (if any) in the request"
      }
    },
    "/apps/{uuid}/substrates/{substrate_uuid}/image_create": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "substrate_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Uuid of substrate on which the action is run"
          },
          {
            "schema": {
              "$ref": "#/definitions/image_create_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "The API for image_create action of application on provided target.",
        "x-ntnx-operations": [
          "image_create"
        ],
        "x-ntnx-kind": "app",
        "description": "API for image_create action on provided target."
      }
    },
    "/azure_rm/v1/subscription_images/list": {
      "post": {
        "description": "Retrieves the list of all subscription_images available. Supported filters are:\n- account_uuid\n- location\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/subscription_images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure subscription_images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_subscription_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/gcp/v1/subnetworks/list": {
      "post": {
        "description": "List all subnetworks available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/subnetworks"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud subnetworks",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_subnetwork",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/{uuid}/engine_runlogs/list": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_list_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "app_runlogs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Returns status information of the runlogs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Returns status information of  the runlogs"
      }
    },
    "/apps/{uuid}/app_runlogs/{runlog_uuid}/output": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_runlog_output_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          },
          {
            "name": "runlog_uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Runlog UUID to get"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runlog output",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app",
        "description": "Retrieves last ten lines of output of the specified application runlog."
      }
    },
    "/features/policy": {
      "put": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/feature_policy_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/feature_policy_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Set behaviour for feature - Policy Engine",
        "x-ntnx-operations": [
          "update"
        ],
        "x-ntnx-kind": "calm_feature",
        "description": "Set behaviour for feature - Policy Engine"
      },
      "get": {
        "description": "Get current behaviour for feature - Policy Engine",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get current behaviour for feature - Policy Engine",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/feature_policy_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/calm_feature_status"
            }
          }
        }
      }
    },
    "/network_groups": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/network_group_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/network_group_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/network_group_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "network_groups"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create Network Group",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "network_group",
        "description": "Creates a Network Group entity using data included in the request"
      }
    },
    "/features/policy/output": {
      "get": {
        "description": "Get logs for Policy Engine enablement",
        "tags": [
          "Features"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get logs for Policy Engine enablement",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "calm_feature",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/policy_output_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/policy_output_response"
            }
          }
        }
      }
    },
    "/providers/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/provider_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/provider_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "providers"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List the provider",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "custom_provider",
        "description": "List the provider with associated metadata"
      }
    },
    "/runbooks/runlogs/{uuid}": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/uuid"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get runbook runlog",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Retrieves the specified runbook runlog information."
      }
    },
    "/gcp/v1/images/list": {
      "post": {
        "description": "List all images available for a GCP account. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud images",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/apps/{uuid}/credential/update": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_actionrun_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "format": "UUID",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "required": true,
            "in": "path",
            "type": "string",
            "description": "Application UUID"
          },
          {
            "schema": {
              "$ref": "#/definitions/app_credential_update_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Credential update api",
        "x-ntnx-operations": [
          "credential_update"
        ],
        "x-ntnx-kind": "app",
        "description": "This will update the secret and passphrase of the credentials\n"
      }
    },
    "/aws/v1/images/list": {
      "post": {
        "description": "List AWS AMIs . Supported filters are:\n- account_uuid\n- region\n- is-public\n- name\n- image-id\nUse account_uuid to list images on a particular account.\nUse account_uuid and region filters together to list images\nbelonging to a particular region.\nProvide name to limit the results to\nthose AMI names containing the provided name\nProvide image-ids to limit the results to\ncorresponding AMIs\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_image_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/images"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all AWS AMIs.",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_image",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_image_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/gcp/v1/regions/list": {
      "post": {
        "description": "List all regions present available for a GCP account. Supported filters are:\n- account_uuid\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/gcp_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "gcp/regions"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Get Google cloud regions",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "gcp_region",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "GCP resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/proxy_login": {
      "post": {
        "description": "Only Super Admin can use this API to proxy login for the provided username",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/proxy_login_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Proxy Login"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Proxy Login for given username",
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/proxy_login_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/proxy_login_status"
            }
          }
        }
      }
    },
    "/runbooks/runlogs/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_list"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_runlog_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "List all runbook runlogs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "runbook_runlog",
        "description": "Retrieves the list of all runbook runlogs, applying filter provided (if any) in the request."
      }
    },
    "/accounts/{uuid}/resource_types/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/account_intent_response"
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/account_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/account_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "Accounts"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Get all resource types of this account's provider",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "account",
        "description": "Get all resource types of this account's provider\n"
      }
    },
    "/apps": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/app_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Apps"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Create application",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "app",
        "description": "Creates an application using data included in the request.\n"
      }
    },
    "/apps/engine_runlogs/status": {
      "post": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_status_response"
            }
          },
          "400": {
            "description": "Entity not found",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/app_runlog_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/app_engine_runlog_status_input"
            },
            "required": true,
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "app_runlogs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "Returns status of trls",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "app_runlog",
        "description": "Returns status of trls"
      }
    },
    "/environments/list": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/environment_list_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/environment_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/environment_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "environments"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List the Environment",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "environment",
        "description": "List the Environment with associated metadata"
      }
    },
    "/aws/v1/vpcs/list": {
      "post": {
        "description": "List all AWS VPCs. Supported filters are:\n- account_uuid\n- region\nUse account_uuid to list all VPCs on the default region of a\nparticular AWS account.\nUse account_uuid and region filters together to list the\nVPCs in a particular region.\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/aws_vpc_list_metadata"
            },
            "required": true,
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "aws/vpcs"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List all AWS VPCs",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "aws_vpc",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/aws_vpc_list_response"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/azure_rm/v1/availability_sets/list": {
      "post": {
        "description": "Retrieves the list of all availability_sets available. Supported filters are:\n- account_uuid\n- resource_group\n",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/arm_list_metadata"
            },
            "required": true,
            "description": "Request body",
            "name": "get_entities_request",
            "in": "body"
          }
        ],
        "tags": [
          "azure_rm/availability_sets"
        ],
        "x-private": true,
        "x-doc-hide": true,
        "summary": "List Azure availability_sets",
        "x-ntnx-operations": [
          "view"
        ],
        "x-ntnx-kind": "azure_rm_availability_set",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Entity not found",
            "schema": {
              "additionalProperties": true
            }
          },
          "default": {
            "description": "ARM resources response body",
            "schema": {
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/runbooks/import_json": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/runbook_upload_output"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/runbook_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/runbook_upload_custom_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "Runbooks"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Import runbook",
        "x-ntnx-operations": [
          "upload"
        ],
        "x-ntnx-kind": "runbook",
        "description": "Creates a runbook using data included in the request.\n"
      }
    },
    "/providers": {
      "post": {
        "responses": {
          "200": {
            "description": "Request Succeeded",
            "schema": {
              "$ref": "#/definitions/provider_intent_response"
            }
          },
          "default": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/provider_status"
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/provider_intent_input"
            },
            "required": true,
            "description": "Request body",
            "name": "body",
            "in": "body"
          }
        ],
        "tags": [
          "providers"
        ],
        "x-private": false,
        "x-doc-hide": false,
        "summary": "Create provider",
        "x-ntnx-operations": [
          "create"
        ],
        "x-ntnx-kind": "custom_provider",
        "description": "Given a spec creates a provider with associated metadata\n"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "parameters": {
    "cloud_type": {
      "description": "The Cloud Type.",
      "pattern": "(\\bAWS\\b|\\bAZURE\\b|\\bNUTANIX_HOSTED_CLOUD\\b|\\bONPREM_CLOUD\\b)",
      "required": true,
      "in": "path",
      "type": "string",
      "name": "cloud_type"
    },
    "uuid": {
      "description": "The UUID of the entity.",
      "format": "UUID",
      "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
      "required": true,
      "x-example": "0e09cf83-ac68-4f28-af70-6df9a43df4f0",
      "in": "path",
      "type": "string",
      "name": "uuid"
    }
  },
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Projects"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "App Tasks"
    },
    {
      "name": "App Variables"
    },
    {
      "name": "App Runlogs"
    },
    {
      "name": "App Showback"
    },
    {
      "name": "Apps"
    },
    {
      "name": "Blueprints"
    },
    {
      "name": "Marketplace Items"
    },
    {
      "name": "Proxy Login"
    },
    {
      "name": "App Icons"
    },
    {
      "name": "Users"
    },
    {
      "name": "Features"
    }
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "definitions": {
    "blueprint_editables": {
      "description": "Response containing the runtime variables on the blueprint",
      "type": "object",
      "properties": {
        "action_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "service_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "credential_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "substrate_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "package_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "app_profile": {
          "$ref": "#/definitions/blueprint_runtime_editable"
        },
        "task_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        },
        "deployment_list": {
          "items": {
            "$ref": "#/definitions/blueprint_runtime_editable"
          },
          "type": "array"
        }
      },
      "title": "Runtime editables on the blueprint"
    },
    "feature_policy_prechecks_response": {
      "description": "Prechecks response for feature - Policy Engine",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "additionalProperties": true,
          "type": "object"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Prechecks response for feature - Policy Engine"
    },
    "blueprint_marketplace_launch_input": {
      "description": "Launch Blueprint request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_marketplace_launch_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Launch Marketplace Blueprint request."
    },
    "policy_clone_response": {
      "description": "Response containing the uuid of the cloned policy.",
      "required": [
        "policy_uuid"
      ],
      "type": "object",
      "properties": {
        "policy_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Response containing the uuid of the cloned policy."
    },
    "runbook_marketplace_clone_spec": {
      "description": "Spec for Runbook clone from Marketplace.",
      "required": [
        "resources",
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the new runbook"
        },
        "resources": {
          "description": "Resources for cloning of the marketplace runbook.",
          "$ref": "#/definitions/runbook_marketplace_clone_resources"
        }
      },
      "title": "Spec for Runbook clone from Marketplace."
    },
    "directory_service_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "directory_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "directory_service"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "packet_trace_stage": {
      "description": "Details of the pipeline stage that dropped/forwarded the packet",
      "type": "object",
      "properties": {
        "action": {
          "x-ntnx-enum": [
            "DROPPED",
            "FORWARDED",
            "REROUTED"
          ],
          "type": "string"
        },
        "routing_policy_reference": {
          "description": "The routing policy that dropped/forwarded the packet",
          "$ref": "#/definitions/routing_policy_reference"
        },
        "destination_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string"
        },
        "destination_type": {
          "x-ntnx-enum": [
            "XI_VM",
            "INTERNET",
            "OTHER_DC"
          ],
          "type": "string",
          "description": "Indicates if the packet was forwarded to a Xi VM, Internet or\nother data center\n"
        },
        "stage": {
          "x-ntnx-enum": [
            "ROUTING_POLICY",
            "MICROSEG_RULE",
            "IMPLICIT_DROP"
          ],
          "type": "string"
        }
      },
      "title": "Parsed Trace Output"
    },
    "app_custom_intent_input": {
      "description": "An intentful representation of an app",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app Intent Entity"
    },
    "app_icon_summary_intent_resource": {
      "description": "Response object for intentful operations on a app_icon_summary",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_icon_summary_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_icon_summary"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_summary_metadata"
        }
      },
      "title": "app_icon_summary Intent Response"
    },
    "provider_resources": {
      "description": "Resources for provider.",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "$ref": "#/definitions/account_reference"
          },
          "type": "array",
          "description": "List of account uuids that use this provider"
        },
        "name": {
          "type": "string",
          "description": "Name of the provider. Ex: Oracle cloud"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "description": {
          "type": "string",
          "description": "Description of provider"
        },
        "resource_type_reference_list": {
          "items": {
            "$ref": "#/definitions/resource_type_reference"
          },
          "type": "array",
          "description": "List of resource type uuids which are attached to this provider"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "auth_schema_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of auth schemas"
        }
      },
      "title": "Resources for provider."
    },
    "vm_recovery_point_metadata": {
      "description": "The vm_recovery_point kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vm_recovery_point was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "vm_recovery_point",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "vm_recovery_point uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the vm_recovery_point is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vm_recovery_point was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the vm_recovery_point. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the vm_recovery_point. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "vm_recovery_point name",
          "maxLength": 80
        }
      },
      "title": "vm_recovery_point metadata"
    },
    "smtp_server": {
      "description": "SMTP Server.",
      "required": [
        "email_address",
        "server"
      ],
      "type": "object",
      "properties": {
        "type": {
          "default": "PLAIN",
          "x-ntnx-enum": [
            "PLAIN",
            "STARTTLS",
            "SSL"
          ],
          "type": "string"
        },
        "email_address": {
          "type": "string"
        },
        "server": {
          "$ref": "#/definitions/cluster_network_entity"
        }
      },
      "title": "SMTP server"
    },
    "app_task_list_intent_response": {
      "description": "Response object for intentful operation of app_tasks",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_task_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_task_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "replication_connection_reference": {
      "description": "The reference to a replication_connection",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "replication_connection",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "replication_connection"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a replication_connection"
    },
    "user_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user",
          "x-ntnx-enum": [
            "user"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for user list output"
    },
    "policy_event": {
      "description": "An intentful representation of a policy_event spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy_event Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for policy_event.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/policy_event_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "policy_event Intent Spec with placement specified"
    },
    "feature_calm_orch_dr_response": {
      "description": "Response for feature - Calm Orchestrated DR",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_orch_dr"
            }
          }
        },
        "spec": {
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_orch_dr"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for feature - Calm Orchestrated DR"
    },
    "app_icon_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon",
          "x-ntnx-enum": [
            "app_icon"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_icon list output"
    },
    "app_blueprint_deployment_reference": {
      "description": "The reference to a app_blueprint_deployment",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_blueprint_deployment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_blueprint_deployment"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_blueprint_deployment"
    },
    "vm_recovery_point_realize_restore_input": {
      "description": "Input object for the restore API of the recovery points. User can provide optional UUID of the vm that will be created as a result of this operation.\n",
      "required": [
        "vm_uuid",
        "restore_target_time"
      ],
      "type": "object",
      "properties": {
        "restore_target_time": {
          "type": "string",
          "description": "The target time to which the user wishes to restore to. This is in\ninternet date/time format (RFC 3339). This field is explicitly used\nfor time based restore in high frequency snapshotting and will be\nignored for a regular restore.\n",
          "format": "date-time"
        },
        "vm_override_spec": {
          "description": "Properties of the vm that can be overridden on restore.\n",
          "$ref": "#/definitions/vm_restore_override_spec"
        },
        "vm_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the vm entity for which the recovery point is to be\nrestored.\n",
          "format": "UUID"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "categories_mapping": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "object",
              "description": "Categories for the vm. This allows setting up multiple\nvalues from a single key.\n"
            },
            "uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "format": "UUID"
            }
          },
          "title": "Metadata of the restored vm."
        }
      },
      "title": "Restore API input"
    },
    "email_template": {
      "required": [
        "subject"
      ],
      "type": "object",
      "properties": {
        "body": {
          "description": "Body for email notification",
          "type": "object",
          "properties": {
            "content": {
              "type": "string",
              "description": "Content of the body"
            },
            "content_type": {
              "x-ntnx-enum": [
                "text/plain",
                "text/html"
              ],
              "type": "string",
              "description": "Content Type of the body"
            }
          },
          "title": "Email Body"
        },
        "subject": {
          "type": "string",
          "description": "Subject of notification email"
        }
      },
      "title": "Email template"
    },
    "runbook_filters": {
      "description": "Supported filters in runbook list call",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Supported filters in runbook list call"
    },
    "network_group_intent_input": {
      "description": "An intentful representation of a network_group",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/network_group"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_metadata"
        }
      },
      "title": "network_group Intent Entity"
    },
    "feature_calm_orch_dr_input": {
      "description": "Input for feature - Calm Orchestrated DR",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_orch_dr"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Input for feature - Calm Orchestrated DR"
    },
    "vm_power_state_mechanism": {
      "description": "Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state.\n",
      "type": "object",
      "properties": {
        "guest_transition_config": {
          "$ref": "#/definitions/vm_guest_power_state_transition_config"
        },
        "mechanism": {
          "x-ntnx-enum": [
            "ACPI",
            "GUEST",
            "HARD"
          ],
          "type": "string",
          "description": "Power state mechanism (ACPI/GUEST/HARD)."
        }
      },
      "title": "VM Power State Mechanism"
    },
    "app_published_service_input": {
      "description": "Published service definition",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to service action\n"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_published_service_reference"
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "type": {
          "default": "K8S_SERVICE",
          "x-ntnx-enum": [
            "K8S_SERVICE"
          ],
          "type": "string",
          "description": "Type of published service"
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional published service options"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Published service definition"
    },
    "subnet_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "subnet",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "subnet"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "patch_environment_profile_pair": {
      "description": "The app-profile to be patched and the environment to be used for patching.",
      "required": [
        "environment",
        "app_profile"
      ],
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/entity_reference"
        },
        "app_profile": {
          "$ref": "#/definitions/entity_reference"
        }
      },
      "title": "A pair of app-profile and environment for patching"
    },
    "calm_feature_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "calm_feature",
          "x-ntnx-enum": [
            "calm_feature"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for calm_feature list"
    },
    "runbook_run_args": {
      "items": {
        "type": "object",
        "description": "Items inside the args array",
        "properties": {
          "val_type": {
            "x-ntnx-enum": [
              "STRING",
              "INT",
              "DICT",
              "DATE",
              "TIME",
              "DATE_TIME",
              "MULTILINE_STRING"
            ],
            "type": "string",
            "description": ""
          },
          "regex": {
            "type": "object",
            "description": "Regex to which variable value should adhere to",
            "properties": {
              "should_validate": {
                "type": "boolean",
                "description": "Whether the variable should be validated against the regex or not"
              },
              "value": {
                "type": "string",
                "description": "Regular expression"
              }
            }
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Whether the variable MUST have a value or not"
          },
          "description": {
            "type": "string",
            "description": "",
            "maxLength": 1000
          },
          "data_type": {
            "x-ntnx-enum": [
              "BASE",
              "LIST",
              "SINGLE_SELECT_LIST"
            ],
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": "",
            "maxLength": 64
          },
          "library_reference": {
            "type": "string",
            "description": "Reference to the library variable (if any) using which this variable is configured"
          },
          "value": {
            "type": "string",
            "description": ""
          },
          "label": {
            "type": "string",
            "description": ""
          },
          "attrs": {
            "additionalProperties": true,
            "type": "object",
            "description": ""
          },
          "editables": {
            "additionalProperties": true,
            "type": "object",
            "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
          },
          "is_hidden": {
            "type": "boolean",
            "description": "Whether the variable should be hidden from launch screen or not"
          },
          "type": {
            "x-ntnx-enum": [
              "LOCAL",
              "SECRET",
              "EXTERNAL",
              "EXEC_LOCAL",
              "HTTP_LOCAL",
              "EXEC_SECRET",
              "HTTP_SECRET",
              "EXEC_EXTERNAL",
              "HTTP_EXTERNAL"
            ],
            "type": "string",
            "description": ""
          },
          "options": {
            "type": "object",
            "description": "Choices for the variable value",
            "properties": {
              "type": {
                "x-ntnx-enum": [
                  "PREDEFINED",
                  "EXEC",
                  "HTTP"
                ],
                "type": "string",
                "description": "Whether the options are predefined or script based or HTTP request based"
              },
              "attrs": {
                "additionalProperties": true,
                "type": "object",
                "description": "EScript/HTTP request info needed for dynamically fetching options"
              },
              "choices": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Predefined choices for variable value"
              }
            }
          },
          "uuid": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "description": "",
            "format": "UUID"
          }
        }
      },
      "type": "array",
      "description": "Arguments defined to match Runbook run payload"
    },
    "app_task_input_upload": {
      "description": "Task definition for Application.",
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference_upload"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Task for Application"
    },
    "cluster_config_spec": {
      "description": "Cluster Configuration.",
      "type": "object",
      "properties": {
        "gpu_driver_version": {
          "type": "string",
          "description": "GPU driver version."
        },
        "client_auth": {
          "$ref": "#/definitions/client_auth"
        },
        "authorized_public_key_list": {
          "items": {
            "$ref": "#/definitions/public_key"
          },
          "type": "array",
          "description": "List of valid ssh keys for the cluster."
        },
        "software_map": {
          "additionalProperties": {
            "$ref": "#/definitions/cluster_software"
          },
          "type": "object",
          "description": "Map of software on the cluster with software type as the\nkey.\n"
        },
        "encryption_status": {
          "$ref": "#/definitions/encryption_status"
        },
        "redundancy_factor": {
          "type": "integer",
          "description": "Cluster supported redundancy factor. Default is 2.",
          "format": "int32"
        },
        "certification_signing_info": {
          "$ref": "#/definitions/certification_signing_info"
        },
        "supported_information_verbosity": {
          "default": "BASIC_PLUS_CORE_DUMP",
          "x-ntnx-enum": [
            "NOTHING",
            "BASIC",
            "BASIC_PLUS_CORE_DUMP",
            "ALL"
          ],
          "type": "string",
          "description": "Verbosity level settings for populating support information.\n- 'Nothing': Send nothing\n- 'Basic': Send basic information - skip core dump and hypervisor\n           stats information\n- 'BasicPlusCoreDump': Send basic and core dump information\n- 'All': Send all information\n"
        },
        "external_configurations": {
          "description": "External Connector Configurations.",
          "$ref": "#/definitions/external_configurations_spec"
        },
        "domain_awareness_level": {
          "default": "NODE",
          "x-ntnx-enum": [
            "DISK",
            "NODE",
            "BLOCK",
            "RACK"
          ],
          "type": "string",
          "description": "Domain awareness supported on cluster."
        },
        "enabled_feature_list": {
          "items": {
            "x-ntnx-enum": [
              "LOCK_DOWN_ENABLED",
              "PASSWORD_REMOTE_LOGIN_ENABLED",
              "SHADOW_CLONES_ENABLED",
              "COMMON_CRITERIA_MODE_ENABLED",
              "SSP_CONFIGURED",
              "ACS_ENABLED",
              "NETWORK_FLOW_STATS_COLLECTOR_ENABLED"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Array of enabled features."
        },
        "timezone": {
          "type": "string",
          "description": "Zone name used in value of TZ environment variable."
        },
        "enable_efficient_metric_sync": {
          "type": "boolean",
          "description": "Indicates if downsampling of metrics syncing between PE\nand PC is enabled or not.\n"
        },
        "operation_mode": {
          "$ref": "#/definitions/cluster_operation_mode"
        }
      },
      "title": "Cluster Configuration"
    },
    "jobs_list_intent_response": {
      "description": "Response object for intentful operation of jobs",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/jobs_response"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/jobs_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "app_variable_resources": {
      "description": "Libraty variable resources definition.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "created_by": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        }
      },
      "title": "Library variable resources"
    },
    "directory_service_user_group_input": {
      "description": "A Directory Service user group.",
      "type": "object",
      "properties": {
        "distinguished_name": {
          "type": "string",
          "description": "The Distinguished name for the user group.",
          "maxLength": 255
        }
      },
      "title": "A Directory Service user group."
    },
    "user_metadata": {
      "description": "The user kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when user was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "user",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "user uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the user is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when user was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the user. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the user. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "user name",
          "maxLength": 80
        }
      },
      "title": "user metadata"
    },
    "app_icon_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "network_group_tunnel_intent_input": {
      "description": "An intentful representation of a network_group_tunnel",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/network_group_tunnel"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_tunnel_metadata"
        }
      },
      "title": "network_group_tunnel Intent Entity"
    },
    "blueprint_resources_def_status": {
      "description": "Status of the Blueprint.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_service_response"
          },
          "type": "array",
          "description": "Service definitions for Blueprint."
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_response"
          },
          "type": "array",
          "description": "Substrate definitions for Blueprint."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response"
          },
          "type": "array",
          "description": "Credential definitions for Blueprint."
        },
        "package_definition_list": {
          "items": {
            "$ref": "#/definitions/app_package_response"
          },
          "type": "array",
          "description": "Package definitions for Blueprint."
        },
        "app_profile_list": {
          "items": {
            "$ref": "#/definitions/app_profile_response"
          },
          "type": "array",
          "description": "App profile definitions for Blueprint."
        },
        "published_service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_response"
          },
          "type": "array",
          "description": "Published service definitions for Blueprint."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": "Type of blueprint",
          "maxLength": 64
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for app blueprint"
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Cloned or original blueprint"
        }
      },
      "title": "Status of the Blueprint."
    },
    "network_group_tunnel_def_status": {
      "description": "Tunnel resources definition.",
      "type": "object",
      "properties": {
        "cluster_uuid": {
          "type": "string",
          "description": "UUID of the cluster where the tunnel vm has to be placed"
        },
        "subnet_uuid": {
          "type": "string",
          "description": "UUID of the subnet which will be used by the tunnel vm"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "vm_name": {
          "type": "string",
          "description": "VM name for Tunnel VM"
        }
      },
      "title": "Tunnel resources"
    },
    "app_protection_policy_intent_input": {
      "description": "An intentful representation of a app_protection_policy",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_protection_policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_protection_policy_metadata"
        }
      },
      "title": "app_protection_policy Intent Entity"
    },
    "runbook_run_specs": {
      "description": "Runbook run request payload to execute specific runbook.",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "args": {
              "$ref": "#/definitions/runbook_run_args"
            },
            "default_target_reference": {
              "$ref": "#/definitions/entity_reference"
            }
          }
        }
      },
      "title": "Runbook run request payload."
    },
    "aws_vpc_resource": {
      "description": "aws_vpc entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_vpc_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_vpc_metadata"
        }
      },
      "title": "aws_vpc"
    },
    "app_package_reference": {
      "description": "The reference to a app_package",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_package",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_package"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_package"
    },
    "failover_cluster": {
      "description": "Hyper-V failover cluster.",
      "required": [
        "domain_credential"
      ],
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IP address of the failover cluster."
        },
        "name": {
          "type": "string",
          "description": "Name of the failover cluster."
        },
        "domain_credential": {
          "$ref": "#/definitions/credentials"
        }
      },
      "title": "Hyper-v failover cluster"
    },
    "filter_expression": {
      "description": "Filter Expression details.",
      "required": [
        "property_name",
        "operator",
        "value"
      ],
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "description": "Operator to be used for the value on the entity.\nExample, =, cs, >=, etc.\n"
        },
        "display_for_value": {
          "type": "string",
          "description": "String corresponding to the value to be displayed on UI."
        },
        "value": {
          "type": "string",
          "description": "Value of property."
        },
        "property_name": {
          "type": "string",
          "description": "Name of the entity property."
        },
        "display_for_operator": {
          "type": "string",
          "description": "String corresponding to the operator to be displayed on UI."
        }
      },
      "title": "Filter Expression definition."
    },
    "policy_event_intent_resource": {
      "description": "Response object for intentful operations on a policy_event",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_event_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy_event"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_event_metadata"
        }
      },
      "title": "policy_event Intent Response"
    },
    "blueprint_upload_resources": {
      "description": "Resources for Blueprint.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_service_input_upload"
          },
          "type": "array",
          "description": "Service definitions for Blueprint."
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_input_upload"
          },
          "type": "array",
          "description": "Substrate definitions for Blueprint."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/endpoint_upload"
          },
          "type": "array",
          "description": "Endpoint definitions for Blueprint."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input_upload"
          },
          "type": "array",
          "description": "Credential definitions for Blueprint."
        },
        "package_definition_list": {
          "items": {
            "$ref": "#/definitions/app_package_input_upload"
          },
          "type": "array",
          "description": "Package definitions for Blueprint."
        },
        "app_profile_list": {
          "items": {
            "$ref": "#/definitions/app_profile_input_upload"
          },
          "type": "array",
          "description": "App profile definitions for Blueprint."
        },
        "published_service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_input_upload"
          },
          "type": "array",
          "description": "Published service definitions for Blueprint."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference_upload"
        },
        "endpoints_mapping": {
          "additionalProperties": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            }
          },
          "type": "object",
          "description": "Mapping for endpoint name and endpoint uuid in new project"
        },
        "type": {
          "type": "string",
          "description": "Type of blueprint",
          "maxLength": 64
        }
      },
      "title": "Resources for Blueprint."
    },
    "vm_recovery_point_intent_input": {
      "description": "An intentful representation of a vm_recovery_point",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/vm_recovery_point"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_recovery_point_metadata"
        }
      },
      "title": "vm_recovery_point Intent Entity"
    },
    "provider": {
      "description": "An intentful representation of a provider spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "provider Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for provider.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/provider_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "provider Intent Spec with placement specified"
    },
    "blueprint_script_input": {
      "description": "script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "script input"
    },
    "aws_role_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_role_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_role_list_metadata_output"
        }
      },
      "title": "aws_role entity list"
    },
    "custom_project_def_status": {
      "description": "A Project resource.",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the project entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Project name."
        },
        "resources": {
          "type": "object",
          "properties": {
            "resource_domain": {
              "$ref": "#/definitions/resource_domain_resources_status"
            },
            "account_reference_list": {
              "items": {
                "$ref": "#/definitions/account_reference"
              },
              "type": "array",
              "description": "List of accounts associated with the project."
            },
            "environment_reference_list": {
              "items": {
                "$ref": "#/definitions/environment_reference"
              },
              "type": "array",
              "description": "List of environments associated with the project."
            },
            "default_subnet_reference": {
              "description": "Optional default subnet if one is specified",
              "$ref": "#/definitions/subnet_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "List of users added directly to the project.\n"
            },
            "is_default": {
              "type": "boolean",
              "description": "Indicates if it is the default project.\n"
            },
            "tunnel_reference_list": {
              "items": {
                "$ref": "#/definitions/tunnel_reference"
              },
              "type": "array",
              "description": "List of tunnels associated with the project."
            },
            "external_user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "List of directory service groups reference. These\ngroups are not managed by Nutanix.\n"
            },
            "cluster_reference_list": {
              "items": {
                "$ref": "#/definitions/cluster_reference"
              },
              "type": "array",
              "description": "List of clusters associated with the project."
            },
            "subnet_reference_list": {
              "items": {
                "$ref": "#/definitions/subnet_reference"
              },
              "type": "array",
              "description": "List of subnets for the project."
            },
            "vpc_reference_list": {
              "items": {
                "$ref": "#/definitions/vpc_reference"
              },
              "type": "array",
              "description": "List of VPCs associated with the project."
            },
            "external_network_list": {
              "items": {
                "$ref": "#/definitions/external_network"
              },
              "type": "array",
              "description": "List of external network associated with the project."
            },
            "default_environment_reference": {
              "description": "Optional default environment if one is specified",
              "$ref": "#/definitions/environment_reference"
            }
          },
          "title": "Project Resources"
        },
        "description": {
          "type": "string",
          "description": "Project description."
        }
      },
      "title": "Project Resource Status"
    },
    "project_task_status": {
      "description": "Response containing state, milestone reached for the project task",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "Status of the task"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for issues encoutered during the task"
        },
        "details": {
          "type": "string",
          "description": "additional details about the status of task"
        },
        "milestone": {
          "type": "string",
          "description": "Milestone reached"
        }
      },
      "title": "Project task status"
    },
    "xi_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "xi",
          "x-ntnx-enum": [
            "xi"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for xi list output"
    },
    "subnet_intent_response": {
      "description": "Response object for intentful operations on a subnet",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/subnet_def_status"
        },
        "spec": {
          "$ref": "#/definitions/subnet"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/subnet_metadata"
        }
      },
      "title": "subnet Intent Response"
    },
    "resource_type_metadata": {
      "description": "The resource_type kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when resource_type was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "resource_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "resource_type"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "resource_type uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the resource_type is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when resource_type was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the resource_type. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the resource_type. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "resource_type name",
          "maxLength": 80
        }
      },
      "title": "resource_type metadata"
    },
    "ip_address": {
      "description": "An IP address.",
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Address string."
        },
        "type": {
          "x-ntnx-enum": [
            "ASSIGNED",
            "LEARNED"
          ],
          "type": "string",
          "description": "Address type. It can only be \"ASSIGNED\" in the spec. If no type is\nspecified in the spec, the default type is set to \"ASSIGNED\".\n"
        },
        "gateway_address_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "Gateway IP addresses matching the subnet."
        },
        "prefix_length": {
          "minimum": 0,
          "type": "integer",
          "description": "Prefix length for the IP address.",
          "maximum": 32,
          "format": "int32"
        },
        "ip_type": {
          "x-ntnx-enum": [
            "DHCP",
            "STATIC"
          ],
          "type": "string",
          "description": "Indicates whether IP address is DHCP or Static."
        }
      },
      "title": "IP Address"
    },
    "nutanix_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "nutanix",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "nutanix"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "aws_machine_type_resource": {
      "description": "aws_machine_type entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_machine_type_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_machine_type_metadata"
        }
      },
      "title": "aws_machine_type"
    },
    "aws_security_group_def_status": {
      "description": "aws_security_group resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_security_group name."
        },
        "resources": {
          "$ref": "#/definitions/aws_security_group_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for aws_security_group."
        }
      },
      "title": "aws_security_group resources status"
    },
    "blueprint_patch_with_environment_validate_response_status": {
      "description": "Status for blueprint patch validate",
      "required": [
        "environment_profile_pairs"
      ],
      "type": "object",
      "properties": {
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/blueprint_patch_environment_validate_profile_pair_response"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment"
        }
      },
      "title": "Status for blueprint patch validate"
    },
    "app_actionrun_by_name_input": {
      "description": "Request object for app action runs",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "args": {
          "items": {
            "$ref": "#/definitions/app_actionrun_args"
          },
          "type": "array",
          "description": "Argument that need to be passed in action run. It is a dictionary of name-values."
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Request body format for running app actions by name"
    },
    "recovery_plan_policy_reference_upload": {
      "description": "The reference to a recovery_plan_policy",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "recovery_plan_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "recovery_plan_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a recovery_plan_policy"
    },
    "app_icon_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon",
          "x-ntnx-enum": [
            "app_icon"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_icon list"
    },
    "replication_connection_intent_response": {
      "description": "Response object for intentful operations on a replication_connection",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/replication_connection_def_status"
        },
        "spec": {
          "$ref": "#/definitions/replication_connection"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/replication_connection_metadata"
        }
      },
      "title": "replication_connection Intent Response"
    },
    "aws_subnet_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_subnet",
          "x-ntnx-enum": [
            "aws_subnet"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_subnet list output"
    },
    "app_deployment_reference_upload": {
      "description": "The reference to a app_deployment",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_deployment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_deployment"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_deployment"
    },
    "aws_region_resources_def_status": {
      "description": "aws_region resources",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "The region end point"
        },
        "name": {
          "type": "string",
          "description": "The name of the AWS region"
        }
      },
      "title": "aws_region resources"
    },
    "app_protection_policy_intent_resource": {
      "description": "Response object for intentful operations on a app_protection_policy",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_protection_policy_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_protection_policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_protection_policy_metadata"
        }
      },
      "title": "app_protection_policy Intent Response"
    },
    "external_subnet": {
      "description": "External subnet definition",
      "required": [
        "external_subnet_reference"
      ],
      "type": "object",
      "properties": {
        "external_subnet_reference": {
          "description": "External subnet reference.",
          "$ref": "#/definitions/subnet_reference"
        },
        "gateway_node_uuid_list": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "List of gateway nodes for the external connectivity."
        }
      },
      "title": "External subnet associated with this VPC."
    },
    "sort_order": {
      "x-ntnx-enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string",
      "description": "The sort order in which results are returned",
      "title": "Sort order"
    },
    "rackable_unit_reference_upload": {
      "description": "The reference to a rackable_unit",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "rackable_unit",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "rackable_unit"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a rackable_unit"
    },
    "proxy_login_input": {
      "description": "Proxy Login Request Input.",
      "required": [
        "proxy_for_username"
      ],
      "type": "object",
      "properties": {
        "proxy_for_username": {
          "type": "string"
        }
      },
      "title": "Proxy Login Request Input."
    },
    "app_pricing_embedded_response": {
      "description": "Pricing definition for account.",
      "required": [
        "uuid",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "state_cost_list": {
          "items": {
            "$ref": "#/definitions/app_pricing_state_cost"
          },
          "type": "array",
          "description": "List of state based cost"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": "State of the pricing sync"
        },
        "details": {
          "description": "Details of the pricing",
          "$ref": "#/definitions/app_pricing_details"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for action"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Pricing for account"
    },
    "app_icon_intent_input": {
      "description": "An intentful representation of a app_icon",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_icon"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_metadata"
        }
      },
      "title": "app_icon Intent Entity"
    },
    "recovery_points_list_response": {
      "description": "Response object for list of recovery_points",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/recovery_point_resource"
          },
          "type": "array"
        }
      },
      "title": "Recovery point List Response"
    },
    "blueprint_script_response": {
      "required": [
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "trl_id",
            "run_id",
            "request_id"
          ],
          "description": "Provides the required IDs for the run",
          "properties": {
            "trl_id": {
              "type": "string",
              "description": "task runlog id for the script run"
            },
            "request_id": {
              "type": "string",
              "description": "ergon task id for the script run"
            },
            "run_id": {
              "type": "string",
              "description": "run id for the script run"
            }
          }
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      }
    },
    "aws_tag_list": {
      "items": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "description": "Generic key value pair.",
        "properties": {
          "value": {
            "type": "string",
            "description": "Tag value"
          },
          "key": {
            "type": "string",
            "description": "Tag Key"
          }
        }
      },
      "type": "array",
      "description": "The AWS Tags associated with any AWS resource",
      "title": "AWS Tags"
    },
    "app_variable_share": {
      "description": "App variable share kind",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_variable_share_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "App variable share kind"
    },
    "groups_timevalue_pair": {
      "description": "Time-Value Pair Data.",
      "type": "object",
      "properties": {
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "time": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Time-Value Pair"
    },
    "vm_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm",
          "x-ntnx-enum": [
            "vm"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for vm list"
    },
    "host_metadata": {
      "description": "The host kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when host was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "host",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "host"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "host uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the host is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when host was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the host. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the host. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "host name",
          "maxLength": 80
        }
      },
      "title": "host metadata"
    },
    "endpoint_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "endpoint",
          "x-ntnx-enum": [
            "endpoint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for endpoint list"
    },
    "job_instances_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "job_instance",
          "x-ntnx-enum": [
            "job_instance"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for job instance list output"
    },
    "citrix_resource_location_spec": {
      "description": "Resource Location on Citrix Cloud.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The resource location id.",
          "maxLength": 200
        },
        "name": {
          "type": "string",
          "description": "The resource location name.",
          "maxLength": 200
        }
      },
      "title": "Citrix Resource Location."
    },
    "tunnel_intent_resource": {
      "description": "Response object for intentful operations on a tunnel",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/tunnel_def_status"
        },
        "spec": {
          "$ref": "#/definitions/tunnel"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/tunnel_metadata"
        }
      },
      "title": "tunnel Intent Response"
    },
    "vm_intent_response": {
      "description": "Response object for intentful operations on a vm",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/vm_def_status"
        },
        "spec": {
          "$ref": "#/definitions/vm"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_metadata"
        }
      },
      "title": "vm Intent Response"
    },
    "aws_region_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_region_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_region_list_metadata_output"
        }
      },
      "title": "aws_region entity list"
    },
    "app_published_service_reference": {
      "description": "The reference to a app_published_service",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_published_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_published_service"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_published_service"
    },
    "provider_metadata": {
      "description": "The provider kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when provider was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "provider"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "provider uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the provider is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when provider was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the provider. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the provider. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "provider name",
          "maxLength": 80
        }
      },
      "title": "provider metadata"
    },
    "network_group_tunnel_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel",
          "x-ntnx-enum": [
            "network_group_tunnel"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for network_group_tunnel list output"
    },
    "cluster_list_intent_response": {
      "description": "Response object for intentful operation of clusters",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/cluster_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/cluster_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "hypervisor_server": {
      "description": "Hypervisor server information.",
      "required": [
        "ip"
      ],
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "type": {
          "x-ntnx-enum": [
            "VMWARE",
            "XEN",
            "AHV",
            "HYPERV"
          ],
          "type": "string"
        }
      },
      "title": "Hypervisor Server"
    },
    "user_group_input_resource": {
      "properties": {
        "directory_service_user_group": {
          "$ref": "#/definitions/directory_service_user_group_input"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "directory_service_user_group"
          ]
        }
      ],
      "type": "object",
      "description": "User Group Resource Definition",
      "title": "user group resource definition."
    },
    "software_type": {
      "x-ntnx-enum": [
        "NOS",
        "NCC",
        "PRISM_CENTRAL"
      ],
      "type": "string",
      "description": "Software type",
      "title": "Software type"
    },
    "network_function_chain_reference_upload": {
      "description": "The reference to a network_function_chain",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_function_chain",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_function_chain"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a network_function_chain"
    },
    "runbook_reference": {
      "description": "The reference to a runbook",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a runbook"
    },
    "runbook_runbook_response": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "uuid",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "output_variables": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output Variables for runbook"
        },
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "aws_security_group_metadata": {
      "description": "The aws_security_group kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_security_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_security_group"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_security_group name"
        }
      },
      "title": "aws_security_group metadata"
    },
    "aws_image_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_image"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_substrate_input": {
      "description": "Substrate definition",
      "required": [
        "uuid",
        "name",
        "type",
        "variable_list",
        "action_list"
      ],
      "type": "object",
      "properties": {
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "os_type": {
          "type": "string",
          "description": ""
        },
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Substrate definition"
    },
    "recovery_plan": {
      "description": "Recovery Plan creation/modification spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Recovery Plan name",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/recovery_plan_resources"
        },
        "description": {
          "type": "string",
          "description": "A description or user annotation for the Recovery Plan.",
          "maxLength": 1000
        }
      },
      "title": "Recovery Plan creation/modification spec"
    },
    "app_credential_response_download": {
      "description": "Credential definition for Application",
      "required": [
        "name",
        "type",
        "username",
        "secret"
      ],
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "resource_type_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "exec_runbook_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "secret": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential secret object"
        },
        "passphrase": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential passphrase object associated with the provided key"
        },
        "account_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "cred_class": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "PASSWORD",
            "KEY"
          ],
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": "Variable list of the credential"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Credential for Application"
    },
    "app_task_resources_def_status": {
      "description": "Libraty task resources definition.",
      "required": [
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this task has been assigned to"
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference"
          },
          "type": "array",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        }
      },
      "title": "Library task resources"
    },
    "blueprint_pending_launches_response": {
      "description": "Response containing status, milestone reached and application uuid",
      "required": [
        "state",
        "milestone",
        "bp_name",
        "app_name"
      ],
      "type": "object",
      "properties": {
        "application_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "application uuid present after the status moves to success",
          "format": "UUID"
        },
        "app_name": {
          "type": "string",
          "description": "name of the application"
        },
        "state": {
          "type": "string",
          "description": "state of launch which can be pending, running, success, failure"
        },
        "blueprint_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "blueprint uuid",
          "format": "UUID"
        },
        "details": {
          "type": "string",
          "description": "additional details about the status of launch"
        },
        "milestone": {
          "type": "string",
          "description": "gives more granularity in status"
        },
        "bp_name": {
          "type": "string",
          "description": "name of the blueprint"
        }
      },
      "title": "Response containing the state of the launch"
    },
    "endpoint_reference": {
      "description": "The reference to a endpoint",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "endpoint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "endpoint"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a endpoint"
    },
    "aws_availability_zone_def_status": {
      "description": "aws_availability_zone resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_availability_zone name."
        },
        "resources": {
          "$ref": "#/definitions/aws_availability_zone_resources_def_status"
        }
      },
      "title": "aws_availability_zone resources status"
    },
    "app_protection_policy_def_status": {
      "description": "An intentful representation of a app_protection_policy status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_protection_policy Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_protection_policy."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_protection_policy, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_protection_policy_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_protection_policy."
        }
      },
      "title": "app_protection_policy Intent Status with placement specified"
    },
    "policy_action_type_intent_input": {
      "description": "An intentful representation of a policy_action_type",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/policy_action_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_action_type_metadata"
        }
      },
      "title": "policy_action_type Intent Entity"
    },
    "account_metadata": {
      "description": "The account kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when account was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "account",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "account"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "account uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the account is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when account was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the account. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the account. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "account name",
          "maxLength": 80
        }
      },
      "title": "account metadata"
    },
    "rule_availability_site": {
      "description": "AppProtectionPolicy availability_sites",
      "required": [
        "environment_reference"
      ],
      "type": "object",
      "properties": {
        "environment_reference": {
          "description": "environment referece, one of the column to form unique key for availability_site",
          "$ref": "#/definitions/environment_reference"
        },
        "infra_inclusion_list": {
          "description": "infra inclusion list, another property of availability_site",
          "$ref": "#/definitions/environment_infra_whitelist"
        }
      },
      "title": "AppProtectionPolicy availability_sites"
    },
    "ca_chain_spec": {
      "description": "CA chain spec",
      "required": [
        "name",
        "ca_chain"
      ],
      "type": "object",
      "properties": {
        "ca_chain": {
          "type": "string",
          "description": "Content of CA chain",
          "format": "byte"
        },
        "name": {
          "type": "string",
          "description": "The name of the CA Chain file",
          "maxLength": 64
        }
      },
      "title": "CA chain spec"
    },
    "aws_role_metadata": {
      "description": "The aws_role kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_role",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_role"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_role name"
        }
      },
      "title": "aws_role metadata"
    },
    "app_clone_status": {
      "description": "Status of application clone action",
      "type": "object",
      "properties": {
        "runlog_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App clone runlog uuid.",
          "format": "UUID"
        }
      },
      "title": "Status of application clone action"
    },
    "aws_mixed_image_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_mixed_image list"
    },
    "app_saas_consumption_resources_def_status": {
      "$ref": "#/definitions/app_saas_consumption_resources"
    },
    "jobs_metadata": {
      "description": "Restful represtation of the job",
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when job was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "x-ntnx-enum": [
            "job"
          ],
          "type": "string",
          "readOnly": true,
          "description": "The kind name"
        },
        "uuid": {
          "type": "string",
          "description": "job uuid",
          "format": "UUID"
        },
        "project_reference": {
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when job was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the job. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the job. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "job name",
          "maxLength": 80
        }
      },
      "title": "job intent Enitity"
    },
    "file_item_reference": {
      "description": "The reference to a file_item",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "file_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "file_item"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a file_item"
    },
    "app_task_intent_response": {
      "description": "Response object for intentful operations on a app_task",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_task_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_task"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_task_metadata"
        }
      },
      "title": "app_task Intent Response"
    },
    "runbook_marketplace_execute_resources": {
      "description": "Resources for Runbook execute.",
      "required": [
        "marketplace_reference"
      ],
      "type": "object",
      "properties": {
        "args": {
          "items": {
            "$ref": "#/definitions/app_actionrun_args"
          },
          "type": "array",
          "description": "Argument that need to be passed in runbook execute. It is a dictionary of name-values."
        },
        "endpoints_mapping": {
          "additionalProperties": true,
          "type": "object",
          "description": "Mapping for endpoint name and endpoint uuid in new project"
        },
        "modified_credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input"
          },
          "type": "array",
          "description": "Modified creds to be overided in runbook for execution."
        },
        "marketplace_reference": {
          "description": "Runbook resources of the marketplace runbook.",
          "$ref": "#/definitions/marketplace_item_reference"
        },
        "default_target_reference": {
          "description": "Default target/Endpoint to be used for runbook execution..",
          "$ref": "#/definitions/entity_reference"
        }
      },
      "title": "Resources for Runbook execute."
    },
    "blueprint_launch_response": {
      "description": "Response containing the application uuid and create action and runlog uuid",
      "required": [
        "api_version",
        "metadata",
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_launch_response_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint_launch_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Response containing the application uuid and create action runlog uuid"
    },
    "mutable_fields_object": {
      "description": "Fields allowed for Application edit",
      "type": "object",
      "properties": {
        "operations": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Operations allowed on the field"
        },
        "is_member_mutable": {
          "type": "boolean",
          "description": "Define if children are allowed for edit."
        }
      },
      "title": "Mutable field for Application edit"
    },
    "app_runlog_output_status": {
      "description": "Runlog output",
      "required": [
        "output_list"
      ],
      "type": "object",
      "properties": {
        "output_list": {
          "items": {
            "$ref": "#/definitions/app_runlog_output"
          },
          "type": "array",
          "description": "application runlog resources"
        }
      },
      "title": "Runlog output"
    },
    "app_icon": {
      "description": "An intentful representation of a app_icon spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_icon Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_icon.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_icon_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_icon Intent Spec with placement specified"
    },
    "aws_security_group_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_security_group list"
    },
    "app_icon_resources_def_status": {
      "description": "App icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "App Icon type"
        },
        "link": {
          "type": "string",
          "description": "App Icon link"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App Icon uuid",
          "format": "UUID"
        }
      },
      "title": "App icon resources"
    },
    "policy_event_def_status": {
      "description": "An intentful representation of a policy_event status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy_event Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the policy_event."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the policy_event, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/policy_event_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for policy_event."
        }
      },
      "title": "policy_event Intent Status with placement specified"
    },
    "feature_calm_detected_dr_response": {
      "description": "Response for feature - Calm Detected DR",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_detected_dr"
            }
          }
        },
        "spec": {
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_detected_dr"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for feature - Calm Detected DR"
    },
    "license_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "license",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "license"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "aws_vpc_resources_def_status": {
      "description": "AWS VPC resources",
      "type": "object",
      "properties": {
        "instance_tenancy": {
          "$ref": "#/definitions/instance_tenancy"
        },
        "state": {
          "$ref": "#/definitions/aws_resource_state"
        },
        "tag_list": {
          "$ref": "#/definitions/aws_tag_list"
        },
        "cidr_block": {
          "type": "string",
          "description": "The CIDR block for the VPC.",
          "maxLength": 64
        },
        "id": {
          "pattern": "^vpc-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the VPC."
        }
      },
      "title": "AWS VPC resources"
    },
    "category_value_status": {
      "description": "Category value definition.",
      "type": "object",
      "properties": {
        "assignment_rule": {
          "$ref": "#/definitions/assignment_rule"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the category.",
          "maxLength": 64
        },
        "value": {
          "type": "string",
          "description": "The value of the category.",
          "maxLength": 64
        },
        "system_defined": {
          "readOnly": true,
          "type": "boolean",
          "description": "Specifying whether its a system defined category."
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "description": {
          "type": "string",
          "description": "Description of the category value.",
          "maxLength": 1000
        }
      },
      "title": "Category Value Definition."
    },
    "address": {
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IPV4 address."
        },
        "fqdn": {
          "type": "string",
          "description": "Fully qualified domain name."
        },
        "is_backup": {
          "type": "boolean",
          "description": "Whether this address is a backup or not."
        },
        "port": {
          "type": "integer",
          "description": "Port Number",
          "format": "int32"
        },
        "ipv6": {
          "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))",
          "type": "string",
          "description": "IPV6 address."
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "ip"
          ]
        },
        {
          "required": [
            "ipv6"
          ]
        },
        {
          "required": [
            "fqdn"
          ]
        }
      ],
      "type": "object",
      "description": "Host address.",
      "title": "Host address."
    },
    "groups_group_summary_map": {
      "additionalProperties": {
        "$ref": "#/definitions/groups_field_data"
      },
      "type": "object",
      "description": "Group Summary Info Map.",
      "title": "Group Summary Map"
    },
    "image_placement_policy_metadata": {
      "description": "The image_placement_policy kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when image_placement_policy was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "image_placement_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image_placement_policy"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "image_placement_policy uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the image_placement_policy is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when image_placement_policy was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the image_placement_policy. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the image_placement_policy. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "image_placement_policy name",
          "maxLength": 80
        }
      },
      "title": "image_placement_policy metadata"
    },
    "app_saas_consumption_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_saas_consumption",
          "x-ntnx-enum": [
            "app_saas_consumption"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_saas_consumption list output"
    },
    "app_action_input_upload": {
      "description": "Action definition for Application",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "critical": {
          "default": false,
          "type": "boolean",
          "description": "action critical flag"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "action attrs"
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/app_runbook_input_upload"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Action for Application"
    },
    "recovery_plan_entities": {
      "description": "Entities associated with Recovery Plan. It includes the live entities and the entites for which Recovery Points are available.\n",
      "required": [
        "entities_per_availability_zone_list"
      ],
      "type": "object",
      "properties": {
        "entities_per_availability_zone_list": {
          "items": {
            "required": [
              "availability_zone_url"
            ],
            "type": "object",
            "properties": {
              "availability_zone_url": {
                "type": "string",
                "description": "URL of the Availability Zone.\n"
              },
              "availability_zone_order_list": {
                "items": {
                  "properties": {
                    "availability_zone_list": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "availability_zone_url": {
                            "type": "string",
                            "description": "URL of the Availability Zone.\n"
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of Availability Zones."
                    }
                  }
                },
                "type": "array",
                "description": "List of recovery Availability Zone orders for entities in the Recovery Plan. More than one entry in this list indicates entities in Recovery Plan are protected by the Protection Rules with different recovery Availability Zone order and makes Recovery Plan invalid.\n"
              },
              "entity_list": {
                "items": {
                  "required": [
                    "any_entity_reference",
                    "is_recovery_point"
                  ],
                  "properties": {
                    "protection_status": {
                      "x-ntnx-enum": [
                        "PROTECTED",
                        "UNPROTECTED"
                      ],
                      "type": "string",
                      "description": "Protection status of the entity."
                    },
                    "recoverability": {
                      "type": "object",
                      "description": "Recoverability of the entity. Applicable only for the entities for which synchronous replication is enabled.\n",
                      "properties": {
                        "status": {
                          "x-ntnx-enum": [
                            "RECOVERABLE",
                            "UNRECOVERABLE"
                          ],
                          "type": "string",
                          "description": "Recoverability status of the entity. Below is allowed list of recoverability statuses. RECOVERABLE - Entity is recoverable. UNRECOVERABLE - Entity is not recoverable.\n"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Reason behind entity being unrecoverable or partially recoverable.\n",
                          "maxLength": 256
                        }
                      }
                    },
                    "recovery_availability_zone_order_index": {
                      "type": "integer",
                      "description": "Index of recovery Availability Zone order for this entity in availability_zone_order_list. Index starts at 0.\n",
                      "format": "int32"
                    },
                    "is_recovery_point": {
                      "type": "boolean",
                      "description": "On the Availability Zone, whether the live entity is present or the Recovery Points for the entity are present. This will be set to true, only if the Recovery Points for the entity are present on the Availability Zone and not the live entity.\n"
                    },
                    "replication_status": {
                      "x-ntnx-enum": [
                        "SYNCED",
                        "SYNCING",
                        "OUT_OF_SYNC"
                      ],
                      "type": "string",
                      "description": "Replication status of the entity for which synchronous replication is enabled.\n"
                    },
                    "any_entity_reference": {
                      "description": "Reference to the entity.",
                      "$ref": "#/definitions/reference"
                    }
                  }
                },
                "type": "array",
                "description": "List of protected entities associated with Recovery Plan. This list includes the entities which are live and the entities for which Recovery Points are present on the Availability Zone.\n"
              }
            }
          },
          "type": "array",
          "description": "List of entities and recovery Availability Zones order list per local Availability Zone. In case of public cloud, entity list and recovery Availability Zones order for each of the Availability Zones will be reported. For example, Let AZ1 and AZ2 be the two Availability Zones for a public cloud and OnPrem be the on-premise Availability Zone. If VMs VM1 and VM2 on OnPrem is protected by a Protection Rule with Availabilty Zone order [OnPrem, AZ1, AZ2], then entities_per_availability_zone_list will be [{AZ1, [[OnPrem, AZ1, AZ2]], [{VM1}, {VM2}]},\n {AZ2, [[OnPrem, AZ1, AZ2]], [{VM1}, {VM2}]}].\nAll the Availability Zones should have same Availability Zone order for a valid Recovery Plan.\n"
        }
      },
      "title": "Entities associated with Recovery Plan"
    },
    "app_published_service_response_download": {
      "description": "Published service definition",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_element"
          },
          "type": "array",
          "description": ""
        },
        "type": {
          "default": "K8S_SERVICE",
          "x-ntnx-enum": [
            "K8S_SERVICE"
          ],
          "type": "string",
          "description": "Type of published service"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_published_service_reference_upload"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional published service options"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Published service definition"
    },
    "api_key_output": {
      "description": "List of all API keys added to the system",
      "required": [
        "name",
        "created_by",
        "created_on",
        "last_updated_by",
        "state"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the key"
        },
        "roles": {
          "items": {
            "description": "Project & role within the project",
            "required": [
              "project_reference",
              "calm_role_reference"
            ],
            "type": "object",
            "properties": {
              "project_reference": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "description": "Project Reference in API format",
                "$ref": "#/definitions/project_reference"
              },
              "calm_role_reference": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "description": "Role Reference in API format",
                "$ref": "#/definitions/role_reference"
              },
              "operation": {
                "default": "ADD",
                "x-ntnx-enum": [
                  "ADD",
                  "UPDATE",
                  "DELETE"
                ],
                "type": "string",
                "description": "Operation to perform"
              }
            },
            "title": "project_role_mapping"
          },
          "type": "array",
          "description": "Roles associated with given key"
        },
        "created_on": {
          "type": "string",
          "description": "Creation timestamp in epoch format",
          "format": "date-time"
        },
        "created_by": {
          "type": "string"
        },
        "state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "Current key status i.e..,. Enabled/Disabled"
        },
        "last_updated_by": {
          "type": "string"
        },
        "has_admin_access": {
          "default": false,
          "type": "boolean",
          "description": "Flag to determine whether the key has admin access or not"
        }
      },
      "title": "API key list"
    },
    "quota_list_request": {
      "type": "object",
      "description": "Quota list request object",
      "properties": {
        "filter": {
          "type": "string"
        },
        "length": {
          "type": "number"
        },
        "offset": {
          "type": "number"
        }
      }
    },
    "aws_key_pair_resource": {
      "description": "aws_key_pair entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_key_pair_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_key_pair_metadata"
        }
      },
      "title": "aws_key_pair"
    },
    "checksum": {
      "description": "Image checksum",
      "required": [
        "checksum_algorithm",
        "checksum_value"
      ],
      "properties": {
        "checksum_algorithm": {
          "$ref": "#/definitions/checksum_algorithm"
        },
        "checksum_value": {
          "type": "string",
          "format": "bytes"
        }
      },
      "title": "Image checksum"
    },
    "pemkey_spec": {
      "description": "SSL key",
      "required": [
        "type",
        "key",
        "cert"
      ],
      "type": "object",
      "properties": {
        "ca_chain": {
          "type": "string",
          "format": "byte"
        },
        "type": {
          "$ref": "#/definitions/ssl_key_type"
        },
        "cert": {
          "type": "string",
          "format": "byte"
        },
        "key": {
          "type": "string",
          "format": "byte"
        },
        "name": {
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "SSL key"
    },
    "host": {
      "description": "Host Definition.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Host Name.",
          "maxLength": 64
        },
        "resources": {
          "type": "object",
          "description": "Host resources.",
          "properties": {
            "windows_domain": {
              "$ref": "#/definitions/windows_domain"
            },
            "controller_vm": {
              "$ref": "#/definitions/controller_vm"
            },
            "failover_cluster": {
              "$ref": "#/definitions/failover_cluster"
            }
          }
        }
      },
      "title": "Host Input definition"
    },
    "runbook_metadata": {
      "description": "The runbook kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when runbook was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "runbook",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "runbook uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the runbook is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when runbook was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the runbook. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the runbook. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "runbook name",
          "maxLength": 80
        }
      },
      "title": "runbook metadata"
    },
    "app_blueprint_deployment_reference_upload": {
      "description": "The reference to a app_blueprint_deployment",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_blueprint_deployment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_blueprint_deployment"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_blueprint_deployment"
    },
    "image_type": {
      "x-ntnx-enum": [
        "DISK_IMAGE",
        "ISO_IMAGE"
      ],
      "type": "string",
      "description": "The type of image.",
      "title": "Image type"
    },
    "policy_event_intent_response": {
      "description": "Response object for intentful operations on a policy_event",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_event_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy_event"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_event_metadata"
        }
      },
      "title": "policy_event Intent Response"
    },
    "action": {
      "description": "Actions of the Policy are executed only if this criteria is satisfied",
      "required": [
        "action_type_reference",
        "attrs"
      ],
      "type": "object",
      "properties": {
        "action_type_reference": {
          "$ref": "#/definitions/policy_action_type_reference"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Attrs for the action.\n"
        }
      },
      "title": "Action to be executed for the policy"
    },
    "app_service_port": {
      "description": "Port for Application Service.",
      "required": [
        "target_port",
        "protocol"
      ],
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string",
          "description": ""
        },
        "exposed_port": {
          "type": "string",
          "description": ""
        },
        "exposed_address": {
          "type": "string",
          "description": ""
        },
        "target_port": {
          "type": "string",
          "description": ""
        },
        "endpoint_name": {
          "type": "string",
          "description": ""
        },
        "container_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s continaer spec"
        }
      },
      "title": "Port for Application Service."
    },
    "app_patch_run_input": {
      "description": "Request object for patch_run",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_patchrun_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "patch run request format"
    },
    "resource_type": {
      "description": "An intentful representation of a resource_type spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "resource_type Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for resource_type.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/resource_type_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "resource_type Intent Spec with placement specified"
    },
    "executable_action_spec": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "job uuid",
          "format": "UUID"
        },
        "payload": {
          "type": "string"
        }
      }
    },
    "tunnel": {
      "description": "An intentful representation of a tunnel spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "tunnel Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for tunnel.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/tunnel_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "tunnel Intent Spec with placement specified"
    },
    "metering_entry": {
      "type": "object",
      "description": "Response is an array of entities, utilized and total resources",
      "properties": {
        "entities": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "utilized": {
          "type": "object",
          "$ref": "#/definitions/meter_resources"
        },
        "capacity": {
          "type": "object",
          "$ref": "#/definitions/cluster_capacity"
        },
        "reserved": {
          "type": "object",
          "$ref": "#/definitions/meter_resources"
        },
        "cluster_capacity": {
          "type": "object",
          "$ref": "#/definitions/cluster_capacity"
        }
      }
    },
    "config_response_download": {
      "description": "config definition for target object.",
      "required": [
        "name",
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for config spec"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "is_system_generated": {
          "default": false,
          "type": "boolean"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": "List of variables"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "attrs_list": {
          "items": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": "array"
        },
        "runbook": {
          "$ref": "#/definitions/app_runbook_response_download"
        },
        "type": {
          "x-ntnx-enum": [
            "AHV_SNAPSHOT",
            "AHV_RESTORE",
            "PATCH"
          ],
          "type": "string",
          "description": ""
        },
        "config_reference_list": {
          "items": {
            "$ref": "#/definitions/app_config_spec_reference_upload"
          },
          "type": "array"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "config definition for target object."
    },
    "app_runbook_input": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_input"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Runbook for Application"
    },
    "availability_zone_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "availability_zone",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "availability_zone"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "file_item_metadata": {
      "description": "The file_item kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when file_item was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "file_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "file_item"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "file_item uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the file_item is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when file_item was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the file_item. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the file_item. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "file_item name",
          "maxLength": 80
        }
      },
      "title": "file_item metadata"
    },
    "aws_key_pair_metadata": {
      "description": "The aws_key_pair kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_key_pair",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_key_pair"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_key_pair name"
        }
      },
      "title": "aws_key_pair metadata"
    },
    "provider_intent_input": {
      "description": "An intentful representation of a provider",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/provider"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/provider_metadata"
        }
      },
      "title": "provider Intent Entity"
    },
    "access_control_policy_metadata": {
      "description": "The access_control_policy kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when access_control_policy was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "access_control_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "access_control_policy"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "access_control_policy uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the access_control_policy is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when access_control_policy was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the access_control_policy. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the access_control_policy. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "access_control_policy name",
          "maxLength": 80
        }
      },
      "title": "access_control_policy metadata"
    },
    "app": {
      "description": "An intentful representation of a app spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app Intent Spec with placement specified"
    },
    "app_actionrun_response": {
      "description": "Response object for action_run, contains action_run_log",
      "required": [
        "api_version",
        "metadata",
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_actionrun_status"
        },
        "spec": {
          "$ref": "#/definitions/app_actionrun_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app actionrun response format"
    },
    "app_substrate_reference": {
      "description": "The reference to a app_substrate",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_substrate",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_substrate"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_substrate"
    },
    "endpoint_custom_intent_input": {
      "description": "An intentful representation of an endpoint",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/endpoint"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "Endpoint Intent Entity"
    },
    "aws_subnet_resource": {
      "description": "aws_subnet entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_subnet_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_subnet_metadata"
        }
      },
      "title": "aws_subnet"
    },
    "image_def_status": {
      "description": "An intentful representation of a image status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "image Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the image."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the image, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/image_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for image."
        }
      },
      "title": "image Intent Status with placement specified"
    },
    "xi_reference": {
      "description": "The reference to a xi",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "xi",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "xi"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a xi"
    },
    "mh_vm_storage_config_status": {
      "description": "Current state of storage parameters",
      "type": "object",
      "properties": {
        "qos_policy": {
          "description": "Storage QoS policy parameters applied on the VM.",
          "$ref": "#/definitions/storage_qos_policy_config_output"
        }
      },
      "title": "VM Storage Config output"
    },
    "app_protection_policy_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_protection_policy",
          "x-ntnx-enum": [
            "app_protection_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_protection_policy list"
    },
    "host_intent_input": {
      "description": "An intentful representation of a host",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/host"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/host_metadata"
        }
      },
      "title": "host Intent Entity"
    },
    "provider_intent_response": {
      "description": "Response object for intentful operations on a provider",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/provider_def_status"
        },
        "spec": {
          "$ref": "#/definitions/provider"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/provider_metadata"
        }
      },
      "title": "provider Intent Response"
    },
    "app_runlog_output_response": {
      "description": "Response containing the last 10 lines of output",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_runlog_output_status"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_runlog_metadata"
        }
      },
      "title": "Response containing the last 10 lines of output"
    },
    "network_group_tunnel": {
      "description": "An intentful representation of a network_group_tunnel spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "network_group_tunnel Name.",
          "maxLength": 256
        },
        "resources": {
          "$ref": "#/definitions/network_group_tunnel_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for network_group_tunnel.",
          "maxLength": 1000
        }
      },
      "title": "network_group_tunnel Intent Spec with placement specified"
    },
    "endpoint_intent_input": {
      "description": "An intentful representation of a endpoint",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/endpoint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "endpoint Intent Entity"
    },
    "external_network": {
      "description": "External network resource.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "External network"
    },
    "jobs_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "job",
          "x-ntnx-enum": [
            "job"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "default": 20,
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for job list"
    },
    "blueprint_intent_input": {
      "description": "An intentful representation of a blueprint",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Entity"
    },
    "app_published_service_input_upload": {
      "description": "Published service definition",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to service action\n"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_published_service_reference_upload"
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "type": {
          "default": "K8S_SERVICE",
          "x-ntnx-enum": [
            "K8S_SERVICE"
          ],
          "type": "string",
          "description": "Type of published service"
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional published service options"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Published service definition"
    },
    "environment": {
      "description": "An intentful representation of a environment spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "environment Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for environment.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/environment_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "environment Intent Spec with placement specified"
    },
    "guest_tools_spec": {
      "description": "Information regarding guest tools.",
      "type": "object",
      "properties": {
        "nutanix_guest_tools": {
          "description": "Nutanix Guest Tools information",
          "$ref": "#/definitions/nutanix_guest_tools_spec"
        }
      },
      "title": "Guest Tools information"
    },
    "certificate": {
      "description": "Certificate content",
      "required": [
        "content"
      ],
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Certificate content",
          "format": "byte"
        }
      },
      "title": "Certificate content"
    },
    "kubernetes_list_metadata": {
      "description": "All kubernetes list calls will have this metadata block as input",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for kubernetes list calls"
    },
    "aws_machine_type_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        }
      },
      "title": "Metadata for aws_machine_type list"
    },
    "account_def_status": {
      "description": "An intentful representation of a account status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "account Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the account."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the account, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/account_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for account."
        }
      },
      "title": "account Intent Status with placement specified"
    },
    "app_clone_response": {
      "description": "Response object for application clone operation",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_clone_status"
        },
        "spec": {
          "$ref": "#/definitions/app_clone_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app clone response format"
    },
    "project_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "project",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "project"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "host_gpu": {
      "description": "Host GPU.",
      "type": "object",
      "properties": {
        "status": {
          "x-ntnx-enum": [
            "UNUSED",
            "USED_FOR_PASSTHROUGH",
            "USED_FOR_VIRTUAL"
          ],
          "type": "string",
          "description": "Current status of the physical GPU."
        },
        "assignable": {
          "type": "boolean",
          "description": "Whether this vGPU instance can be allocated to a VM."
        },
        "vendor": {
          "x-ntnx-enum": [
            "NVIDIA",
            "INTEL",
            "AMD"
          ],
          "type": "string",
          "description": "The vendor of the GPU."
        },
        "name": {
          "type": "string",
          "description": "Name of the host GPU."
        },
        "index": {
          "type": "integer",
          "description": "The index of the vGPU within physical GPU resource.",
          "format": "int32"
        },
        "license_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of license types associated with this GPU."
        },
        "numa_node": {
          "type": "integer",
          "description": "NUMA node this GPU belongs to.",
          "format": "int32"
        },
        "max_resolution": {
          "type": "string",
          "description": "Maximum resolution per display head."
        },
        "num_vgpus_allocated": {
          "type": "integer",
          "description": "The number of vGPU instances allocated for this physical GPU resource.\n",
          "format": "int32"
        },
        "consumer_reference": {
          "$ref": "#/definitions/reference"
        },
        "pci_address": {
          "type": "string",
          "description": "GPU {segment:bus:device:function} (sbdf) address."
        },
        "fraction": {
          "type": "integer",
          "description": "Fraction of the physical GPU.",
          "format": "int32"
        },
        "mode": {
          "x-ntnx-enum": [
            "PASSTHROUGH_GRAPHICS",
            "PASSTHROUGH_COMPUTE",
            "VIRTUAL"
          ],
          "type": "string",
          "description": "The type of this GPU."
        },
        "num_virtual_display_heads": {
          "type": "integer",
          "description": "Number of supported virtual display heads.",
          "format": "int32"
        },
        "guest_driver_version": {
          "type": "string",
          "description": "Last determined guest driver version."
        },
        "frame_buffer_size_mib": {
          "type": "integer",
          "description": "GPU frame buffer size in MiB.",
          "format": "int64"
        },
        "device_id": {
          "type": "integer",
          "description": "The device ID of the GPU.",
          "format": "int32"
        },
        "max_instances_per_vm": {
          "type": "integer",
          "description": "Maximum number of vGPUs of a GPU type assignable to a VM.",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the GPU.",
          "format": "UUID"
        }
      },
      "title": "Host GPU"
    },
    "app_credential_input": {
      "description": "Credential for application",
      "required": [
        "name",
        "uuid",
        "type",
        "username",
        "secret"
      ],
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "resource_type_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "exec_runbook_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "secret": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential secret object"
        },
        "passphrase": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential passphrase object associated with the provided key"
        },
        "account_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "cred_class": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "PASSWORD",
            "KEY"
          ],
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "Variable list of the credential"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Credential for application"
    },
    "app_runlog_resources": {
      "description": "Runlog resources",
      "required": [
        "type",
        "is_critical",
        "reason_list"
      ],
      "type": "object",
      "properties": {
        "action_reference": {
          "description": "action reference",
          "$ref": "#/definitions/entity_reference"
        },
        "task_reference": {
          "description": "task reference",
          "$ref": "#/definitions/app_task_reference"
        },
        "userdata_reference": {
          "description": "user data reference",
          "$ref": "#/definitions/entity_reference"
        },
        "is_critical": {
          "default": false,
          "type": "boolean",
          "description": "critical or non-critical runlog"
        },
        "root_reference": {
          "description": "root reference",
          "$ref": "#/definitions/app_runlog_reference"
        },
        "call_runbook_reference": {
          "description": "call runbook task reference",
          "$ref": "#/definitions/app_task_reference"
        },
        "element_type": {
          "x-ntnx-enum": [
            "Substrate",
            "Package",
            "Service",
            "Deployment",
            "Application",
            "LoadBalancer",
            "SubstrateElement",
            "PackageElement",
            "ServiceElement",
            "DeploymentElement"
          ],
          "type": "string",
          "description": "type of element this runlog refers to."
        },
        "reason_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "reasons of failure if any"
        },
        "parent_reference": {
          "description": "parent reference",
          "$ref": "#/definitions/app_runlog_reference"
        },
        "is_runlog_archived": {
          "default": false,
          "type": "boolean",
          "description": "Describe if action runlog is archived"
        },
        "type": {
          "x-ntnx-enum": [
            "TaskRunlog",
            "RunbookRunlog",
            "ActionRunlog",
            "PolicyRunlog"
          ],
          "type": "string",
          "description": "type of runlog"
        },
        "application_reference": {
          "description": "application reference",
          "$ref": "#/definitions/app_reference"
        },
        "element_reference": {
          "$ref": "#/definitions/entity_reference"
        }
      },
      "title": "Runlog resources"
    },
    "xi_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "xi",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "xi"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "blueprint_launch_spec": {
      "description": "Spec for Blueprint launch.",
      "type": "object",
      "properties": {
        "application_name": {
          "type": "string",
          "description": "Application name by which the application need to be created."
        },
        "app_profile_reference": {
          "$ref": "#/definitions/app_profile_reference"
        },
        "description": {
          "type": "string",
          "description": "description for blueprint launch",
          "maxLength": 5000
        },
        "resources": {
          "description": "Runtime updated blueprint spec.",
          "$ref": "#/definitions/blueprint_resources"
        }
      },
      "title": "Spec for Blueprint launch."
    },
    "vm_guest_power_state_transition_config": {
      "description": "Extra configs related to power state transition.",
      "type": "object",
      "properties": {
        "should_fail_on_script_failure": {
          "type": "boolean",
          "description": "Indicates whether to abort ngt shutdown/reboot if script fails."
        },
        "enable_script_exec": {
          "type": "boolean",
          "description": "Indicates whether to execute set script before ngt shutdown/reboot."
        }
      },
      "title": "Power State Transition Config"
    },
    "app_credential_task_status": {
      "description": "status for the task list",
      "required": [
        "task_reference_list",
        "substrate_reference_list",
        "default_credential_local_reference"
      ],
      "type": "object",
      "properties": {
        "default_credential_local_reference": {
          "type": "object",
          "description": "default credential reference",
          "$ref": "#/definitions/app_credential_reference"
        },
        "substrate_reference_list": {
          "type": "object",
          "description": "list of substrates dependent on the credential",
          "$ref": "#/definitions/app_substrate_reference"
        },
        "task_reference_list": {
          "type": "object",
          "description": "list of tasks depenedent on the credential",
          "$ref": "#/definitions/task_reference"
        }
      },
      "title": "status for the task list"
    },
    "app_action_input": {
      "description": "Action definition for Application",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "critical": {
          "default": false,
          "type": "boolean",
          "description": "action critical flag"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "action attrs"
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/app_runbook_input"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Action for Application"
    },
    "resource_type_reference": {
      "description": "The reference to a resource_type",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "resource_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "resource_type"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a resource_type"
    },
    "dhcp_options": {
      "description": "Spec for defining DHCP options.",
      "type": "object",
      "properties": {
        "domain_name_server_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array"
        },
        "boot_file_name": {
          "type": "string"
        },
        "domain_search_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "domain_name": {
          "type": "string"
        },
        "tftp_server_name": {
          "type": "string"
        }
      },
      "title": "DHCP options"
    },
    "project_intent_input": {
      "description": "An intentful representation of a project",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/project"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "project Intent Entity"
    },
    "policy_action_type_def_status": {
      "description": "An intentful representation of a policy_action_type status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy_action_type Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the policy_action_type."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the policy_action_type, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/policy_action_type_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for policy_action_type."
        }
      },
      "title": "policy_action_type Intent Status with placement specified"
    },
    "blueprint_variable_values_input": {
      "description": "Request object for blueprint's variable's values input",
      "type": "object",
      "properties": {
        "trlId": {
          "type": "string",
          "description": "trl ID of the initiated execution"
        },
        "overridden_field": {
          "type": "string",
          "description": "will be used to override several field for http request or eScript value"
        },
        "requestId": {
          "type": "string",
          "description": "Request ID"
        }
      },
      "title": "blueprint's variable's values input"
    },
    "affected_entity_list": {
      "description": "Contains the list of entities. The entity information contains\nentity_kind, entity_name and entity_uuid.\n",
      "required": [
        "entity_list"
      ],
      "type": "object",
      "properties": {
        "entity_list": {
          "items": {
            "$ref": "#/definitions/affected_entity"
          },
          "type": "array"
        }
      },
      "title": "Entity information list"
    },
    "xi_category_item": {
      "description": "Categories resource in Xi",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "system_defined": {
          "readOnly": true,
          "type": "boolean",
          "description": "Specifying whether its a system defined category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category.",
          "maxLength": 1000
        },
        "capabilities": {
          "$ref": "#/definitions/capabilities"
        },
        "name": {
          "type": "string",
          "description": "Name of the category.",
          "maxLength": 64
        }
      },
      "title": "Category resource in Xi"
    },
    "app_endpoint_reference": {
      "description": "The reference to a app_endpoint",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_endpoint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_endpoint"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_endpoint"
    },
    "app_service_element": {
      "description": "Service definition for Application",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Service element for Application"
    },
    "resource_type_resources": {
      "description": "Resources for resource_type.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the resource_type. Ex: Oracle cloud"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "target_type": {
          "default": "substrate",
          "type": "string",
          "description": "Target class kind which uses the resource type"
        },
        "provider_reference": {
          "$ref": "#/definitions/provider_reference"
        },
        "schema_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of schemas"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "description": {
          "type": "string",
          "description": "Notes of resource_type"
        }
      },
      "title": "Resources for resource_type."
    },
    "config_response": {
      "description": "config definition for target object.",
      "required": [
        "uuid",
        "name",
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for config spec"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "is_system_generated": {
          "default": false,
          "type": "boolean"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "attrs_list": {
          "items": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": "array"
        },
        "runbook": {
          "$ref": "#/definitions/app_runbook_response"
        },
        "type": {
          "x-ntnx-enum": [
            "AHV_SNAPSHOT",
            "AHV_RESTORE",
            "PATCH"
          ],
          "type": "string",
          "description": ""
        },
        "config_reference_list": {
          "items": {
            "$ref": "#/definitions/app_config_spec_reference"
          },
          "type": "array"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "config definition for target object."
    },
    "app_icon_reference": {
      "description": "The reference to a app_icon",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_icon"
    },
    "blueprint_deployment_input_upload": {
      "description": "Deployment definition for Application.",
      "required": [
        "name",
        "substrate_local_reference",
        "min_replicas",
        "max_replicas"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "package_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_package_reference_upload"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "published_service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_reference_upload"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "type": {
          "default": "GREENFIELD",
          "x-ntnx-enum": [
            "BROWNFIELD",
            "GREENFIELD",
            "K8S_DEPLOYMENT"
          ],
          "type": "string",
          "description": ""
        },
        "substrate_local_reference": {
          "$ref": "#/definitions/app_substrate_reference_upload"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "brownfield_instance_list": {
          "items": {
            "$ref": "#/definitions/brownfield_instance_input"
          },
          "type": "array",
          "description": "brownfield map"
        }
      },
      "title": "Deployment definition for Application."
    },
    "vpc": {
      "description": "VPC input spec",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/vpc_resources"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        }
      },
      "title": "VPC spec"
    },
    "host_intent_response": {
      "description": "Response object for intentful operations on a host",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/host_def_status"
        },
        "spec": {
          "$ref": "#/definitions/host"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/host_metadata"
        }
      },
      "title": "host Intent Response"
    },
    "vm_list_intent_response": {
      "description": "Response object for intentful operation of vms",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/vm_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "marketplace_item_def_status": {
      "description": "Detailed information about marketplace item",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the entity"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Marketplace item name"
        },
        "resources": {
          "$ref": "#/definitions/marketplace_item_output_resources"
        },
        "description": {
          "type": "string",
          "description": "Marketplace item description"
        }
      },
      "title": "Marketplace item information"
    },
    "aws_machine_type_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_machine_type",
          "x-ntnx-enum": [
            "aws_machine_type"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_machine_type list output"
    },
    "license_metadata": {
      "description": "The license kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when license was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "license",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "license"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "license uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the license is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when license was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the license. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the license. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "license name",
          "maxLength": 80
        }
      },
      "title": "license metadata"
    },
    "mpi_patch_with_environment_validate_input": {
      "description": "Validate marketplace item patching request",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/mpi_patch_with_environment_validate_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_metadata"
        }
      },
      "title": "Validate marketplace item patching request"
    },
    "runbook_custom_intent_input": {
      "description": "An intentful representation of a runbook",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/runbook"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Entity"
    },
    "cluster_metadata": {
      "description": "The cluster kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when cluster was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "cluster",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "cluster"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "cluster uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the cluster is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when cluster was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the cluster. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the cluster. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "cluster name",
          "maxLength": 80
        }
      },
      "title": "cluster metadata"
    },
    "citrix_connector_config_details_spec": {
      "description": "Citrix Connector details.",
      "type": "object",
      "properties": {
        "citrix_vm_reference_list": {
          "items": {
            "$ref": "#/definitions/vm_reference"
          },
          "type": "array",
          "description": "Reference to the list of vm ids registered with citrix cloud."
        },
        "client_secret": {
          "type": "string",
          "description": "The client secret for the Citrix Cloud."
        },
        "customer_id": {
          "type": "string",
          "description": "The customer id registered with Citrix Cloud.",
          "maxLength": 200
        },
        "client_id": {
          "type": "string",
          "description": "The client id for the Citrix Cloud.",
          "maxLength": 200
        },
        "resource_location": {
          "$ref": "#/definitions/citrix_resource_location_spec"
        }
      },
      "title": "Citrix Connector details."
    },
    "account": {
      "description": "An intentful representation of a account spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "account Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for account.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/account_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "account Intent Spec with placement specified"
    },
    "endpoint": {
      "description": "An intentful representation of a endpoint spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "endpoint Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for endpoint.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/endpoint_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "endpoint Intent Spec with placement specified"
    },
    "mh_vm": {
      "description": "An intentful representation of a mh_vm spec",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/mh_vm_resources"
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        }
      },
      "title": "mh_vm Intent Spec with placement specified"
    },
    "quota_list_response": {
      "type": "object",
      "description": "Quota list response object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/quota_response"
          },
          "type": "array"
        },
        "message_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "length": {
              "type": "number"
            },
            "total": {
              "type": "number"
            },
            "offset": {
              "type": "number"
            }
          }
        }
      }
    },
    "policy_event_reference_upload": {
      "description": "The reference to a policy_event",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_event",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_event"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a policy_event"
    },
    "account_resources_def_status": {
      "description": "Account resources",
      "required": [
        "type",
        "data"
      ],
      "type": "object",
      "properties": {
        "data": {
          "additionalProperties": true,
          "type": "object",
          "description": "Account data"
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "price_items": {
          "items": {
            "$ref": "#/definitions/app_pricing_embedded_response"
          },
          "type": "array",
          "description": "Pricing for this account"
        },
        "sync_interval_secs": {
          "type": "integer",
          "description": "Sync interval for the account"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Account resources"
    },
    "vmware_library_item_metadata": {
      "description": "Restful representation of the library response",
      "required": [
        "api_version",
        "entities"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/vmware_library_item_entities"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        }
      },
      "title": "job intent Enitity"
    },
    "aws_key_pair_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_key_pair list"
    },
    "app_profile_input_upload": {
      "description": "App profile resources",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "deployment_create_list": {
          "items": {
            "$ref": "#/definitions/blueprint_deployment_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environment uuids which are attached the app profile"
        },
        "patch_list": {
          "items": {
            "$ref": "#/definitions/config_input_upload"
          },
          "type": "array",
          "description": "List of references to app edit patches\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_input_upload"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_input_upload"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "App profile resource"
    },
    "runbook_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook",
          "x-ntnx-enum": [
            "runbook"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for runbook list output"
    },
    "image_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "entity_filter_expression": {
      "description": "Entity Filter Expression is a combination of LHS-Operator-RHS. This filter expression helps express the Filter on actual entities. Example1 - To express All VMs\n  left_hand_side = VM\n  operator = IN\n  right_hand_side = ALL\nExample2 - To express Not VM1 or VM2\n  left_hand_side =  VM\n  operator = NOT_IN\n  right_hand_side = [\"VM1\", \"VM2\"]\n",
      "required": [
        "left_hand_side",
        "operator",
        "right_hand_side"
      ],
      "type": "object",
      "properties": {
        "operator": {
          "x-ntnx-enum": [
            "IN",
            "NOT_IN"
          ],
          "type": "string",
          "description": "The operator in the filter expression."
        },
        "right_hand_side": {
          "description": "The Right hand side(RHS) of a filter expression.",
          "$ref": "#/definitions/right_hand_side"
        },
        "left_hand_side": {
          "description": "The LHS of the filter expression - the entity type.",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "entity_type"
              ]
            }
          ],
          "properties": {
            "entity_type": {
              "type": "string",
              "description": "The representation of the possible value of an LHS, in this case it is an entity type.A certain entity type e.g. VM Note. To express all entity types, use ALL\n",
              "maxLength": 64
            }
          }
        }
      },
      "title": "Entity Filter Expression."
    },
    "app_profile_cost_object": {
      "description": "Contains the total cost for a given App Profile with individual costs for each deployment",
      "type": "object",
      "properties": {
        "cost": {
          "type": "string",
          "description": "The total cost for the app profile"
        },
        "deployments": {
          "items": {
            "type": "object",
            "$ref": "#/definitions/deployment_cost_object"
          },
          "type": "array",
          "description": "Array of objects containing costs associated with each deployment"
        }
      },
      "title": "App Profile Cost Object"
    },
    "rackable_unit_reference": {
      "description": "The reference to a rackable_unit",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "rackable_unit",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "rackable_unit"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a rackable_unit"
    },
    "ssl_key_type": {
      "x-ntnx-enum": [
        "RSA_2048",
        "ECDSA_256",
        "ECDSA_384",
        "ECDSA_521",
        "JKS",
        "PKCS12",
        "RSA_PUBLIC",
        "KRB_KEYTAB",
        "NONE"
      ],
      "type": "string",
      "description": "SSL key type. Key types with RSA_2048, ECDSA_256, ECDSA_384 and ECDSA_521\nare supported for key generation and importing.\n",
      "title": "SSL key type"
    },
    "vm_boot_config": {
      "description": "Indicates which device a VM should boot from.\n",
      "type": "object",
      "properties": {
        "boot_device_order_list": {
          "items": {
            "x-ntnx-enum": [
              "CDROM",
              "DISK",
              "NETWORK"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
        },
        "boot_device": {
          "description": "Indicates which device a VM should boot from. Boot device takes precdence over boot device order. If both are given then specified boot device will be primary boot device and remaining devices will be assigned boot order according to boot device order field.\n",
          "$ref": "#/definitions/vm_boot_device"
        },
        "data_source_reference": {
          "$ref": "#/definitions/reference"
        },
        "boot_type": {
          "x-ntnx-enum": [
            "UEFI",
            "LEGACY",
            "SECURE_BOOT"
          ],
          "type": "string",
          "description": "Indicates whether the VM should use Secure boot, UEFI boot or Legacy boot.If UEFI or Secure boot is enabled then other legacy boot options (like boot_device and boot_device_order_list) are ignored. Secure boot depends on UEFI boot, i.e. enabling Secure boot means that UEFI boot is also enabled.\n"
        }
      },
      "title": "VM Boot configuration"
    },
    "runbook_script_input": {
      "description": "script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "script input"
    },
    "environment_def_status": {
      "description": "An intentful representation of a environment status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "environment Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the environment."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the environment, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/environment_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for environment."
        }
      },
      "title": "environment Intent Status with placement specified"
    },
    "tunnel_intent_input": {
      "description": "An intentful representation of a tunnel",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/tunnel"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/tunnel_metadata"
        }
      },
      "title": "tunnel Intent Entity"
    },
    "vm_resources_def_status": {
      "description": "VM Resources Status Definition.",
      "type": "object",
      "properties": {
        "num_threads_per_core": {
          "minimum": 1,
          "type": "integer",
          "description": "Number of logical threads per core.",
          "format": "int32"
        },
        "gpu_list": {
          "items": {
            "$ref": "#/definitions/vm_gpu_output_status"
          },
          "type": "array",
          "description": "GPUs attached to the VM."
        },
        "protection_policy_state": {
          "description": "Status of protection policy applied to this VM.\n",
          "$ref": "#/definitions/protection_policy_state"
        },
        "memory_size_mib": {
          "type": "integer",
          "description": "Memory size in MiB.",
          "format": "int32"
        },
        "boot_config": {
          "description": "Indicates which device the VM should boot from.",
          "$ref": "#/definitions/vm_boot_config"
        },
        "disk_list": {
          "items": {
            "$ref": "#/definitions/vm_disk"
          },
          "type": "array",
          "description": "Disks attached to the VM."
        },
        "serial_port_list": {
          "items": {
            "$ref": "#/definitions/serial_port"
          },
          "type": "array",
          "description": "Serial ports configured on the VM."
        },
        "is_vcpu_hard_pinned": {
          "type": "boolean",
          "description": "Indicates whether the vCPUs should be hard pinned to specific pCPUs."
        },
        "power_state": {
          "x-ntnx-enum": [
            "ON",
            "OFF",
            "PAUSED",
            "UNKNOWN"
          ],
          "type": "string",
          "description": "Current power state of the VM."
        },
        "recovery_plan_state_list": {
          "items": {
            "$ref": "#/definitions/recovery_plan_policy_state"
          },
          "type": "array",
          "description": "Status of the Recovery Plans associated with the VM."
        },
        "num_vcpus_per_socket": {
          "type": "integer",
          "description": "Number of vCPUs per socket.",
          "format": "int32"
        },
        "num_sockets": {
          "type": "integer",
          "description": "Number of vCPU sockets.",
          "format": "int32"
        },
        "storage_config": {
          "description": "Current status of storage configuration for AHV VMs.",
          "$ref": "#/definitions/vm_storage_config_status"
        },
        "protection_type": {
          "x-ntnx-enum": [
            "UNPROTECTED",
            "PD_PROTECTED",
            "RULE_PROTECTED"
          ],
          "type": "string",
          "description": "The type of protection applied on a VM. PD_PROTECTED indicates a VM protected using Prism Element. RULE_PROTECTED indicates a VM protected using Prism Central.\n"
        },
        "machine_type": {
          "x-ntnx-enum": [
            "PC",
            "PSERIES",
            "Q35"
          ],
          "type": "string",
          "description": "Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
        },
        "hardware_clock_timezone": {
          "type": "string",
          "description": "VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
        },
        "guest_customization": {
          "$ref": "#/definitions/guest_customization_status"
        },
        "power_state_mechanism": {
          "$ref": "#/definitions/vm_power_state_mechanism"
        },
        "vga_console_enabled": {
          "type": "boolean",
          "description": "Indicates whether VGA console has been enabled or not."
        },
        "vnuma_config": {
          "description": "Information regarding vNUMA configuration.",
          "$ref": "#/definitions/vm_vnuma_config"
        },
        "nic_list": {
          "items": {
            "$ref": "#/definitions/vm_nic_output_status"
          },
          "type": "array",
          "description": "NICs attached to the VM."
        },
        "host_reference": {
          "$ref": "#/definitions/reference"
        },
        "guest_os_id": {
          "type": "string",
          "description": "String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify."
        },
        "is_agent_vm": {
          "type": "boolean",
          "description": "Indicates whether the VM is an agent VM."
        },
        "hypervisor_type": {
          "x-ntnx-enum": [
            "ESX",
            "HyperV",
            "AHV"
          ],
          "type": "string",
          "description": "The hypervisor type for the hypervisor the VM is hosted on.\n"
        },
        "guest_tools": {
          "description": "Information regarding guest tools.",
          "$ref": "#/definitions/guest_tools_status"
        },
        "enable_cpu_passthrough": {
          "type": "boolean",
          "description": "Indicates whether to passthrough the host's CPU features to the guest. Enabling this will disable live migration of the VM.\n"
        },
        "parent_reference": {
          "description": "Reference to an entity that the VM was cloned or created from.\n",
          "$ref": "#/definitions/reference"
        },
        "disable_branding": {
          "type": "boolean",
          "description": "Indicates whether to remove AHV branding from VM firmware tables.\n"
        }
      },
      "title": "VM Resources Status Definition"
    },
    "approval_request_resources_def_status": {
      "description": "Approval Request resources",
      "required": [
        "approval_set_list",
        "state"
      ],
      "type": "object",
      "properties": {
        "condition_list": {
          "items": {
            "$ref": "#/definitions/condition_object"
          },
          "type": "array",
          "description": "List of criteria"
        },
        "policy_reference": {
          "$ref": "#/definitions/policy_reference"
        },
        "approval_set_list": {
          "items": {
            "$ref": "#/definitions/approval_set_object"
          },
          "type": "array",
          "description": "Approval sets for this approval_request"
        },
        "entity_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "state": {
          "enum": [
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "State of approval request.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "expiry_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when approval request was created\n",
          "format": "date-time"
        }
      },
      "title": "Approval Request resources"
    },
    "app_patchrun_spec": {
      "description": "Spec for patch run.",
      "type": "object",
      "properties": {
        "args": {
          "description": "Argument that needs to be passed in patch run",
          "$ref": "#/definitions/app_patchrun_args"
        },
        "target_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The target entity on which patch will be running.",
          "format": "UUID"
        },
        "target_kind": {
          "type": "string",
          "description": "type of target entity."
        }
      },
      "title": "Spec for patch run."
    },
    "marketplace_icon_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_icon",
          "x-ntnx-enum": [
            "marketplace_icon"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for marketplace_icon list"
    },
    "policy_clone_input": {
      "description": "Clone Policy.",
      "required": [
        "metadata",
        "policy_name"
      ],
      "type": "object",
      "properties": {
        "policy_name": {
          "type": "string",
          "maxLength": 64
        },
        "metadata": {
          "$ref": "#/definitions/policy_clone_metadata"
        }
      },
      "title": "Clone Policy request."
    },
    "blueprint_reference": {
      "description": "The reference to a blueprint",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "blueprint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "blueprint"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a blueprint"
    },
    "aws_image_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_image",
          "x-ntnx-enum": [
            "aws_image"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_image list"
    },
    "app_task_intent_input": {
      "description": "An intentful representation of a app_task",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_task"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_task_metadata"
        }
      },
      "title": "app_task Intent Entity"
    },
    "serial_port": {
      "description": "Indicates the configuration of serial ports of the VM.\n",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "description": "Index of the serial port."
        },
        "is_connected": {
          "type": "boolean",
          "description": "Indicates whether the serial port connection is connected or not.\n"
        }
      },
      "title": "VM serial port connection."
    },
    "attribute_value_list": {
      "description": "Value of attribute",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "title": "Value of attribute"
    },
    "cluster_analysis": {
      "description": "Cluster analysis related values.",
      "type": "object",
      "properties": {
        "vm_efficiency_map": {
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true,
          "type": "object",
          "description": "Map of cluster efficiency which includes numbers of inefficient\nvms. The value is populated by analytics on PC.\n"
        }
      },
      "title": "Cluster Analysis Statistics"
    },
    "app_actionrun_status": {
      "description": "Status of action_run",
      "type": "object",
      "properties": {
        "runlog_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App creation runlog uuid.",
          "format": "UUID"
        }
      },
      "title": "Status of action_run"
    },
    "runbook_def_status": {
      "description": "An intentful representation of a runbook status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "runbook Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the runbook."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the runbook, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/runbook_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for runbook."
        }
      },
      "title": "runbook Intent Status with placement specified"
    },
    "resource_type_def_status": {
      "description": "An intentful representation of a resource_type status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "resource_type Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the resource_type."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the resource_type, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/resource_type_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for resource_type."
        }
      },
      "title": "resource_type Intent Status with placement specified"
    },
    "app_intent_resource": {
      "description": "Response object for intentful operations on a app",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app Intent Response"
    },
    "app_saas_consumption_def_status": {
      "description": "An intentful representation of a app_saas_consumption status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_saas_consumption Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_saas_consumption."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_saas_consumption, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_saas_consumption_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_saas_consumption."
        }
      },
      "title": "app_saas_consumption Intent Status with placement specified"
    },
    "deployment_cost_object": {
      "description": "Contains the associated cost parameters for a deployment",
      "type": "object",
      "properties": {
        "storage_cost": {
          "type": "number",
          "description": "$/hr cost for storage"
        },
        "replicas": {
          "default": 1,
          "type": "integer",
          "description": "Minimum replicas for the given deployment"
        },
        "memory_cost": {
          "type": "number",
          "description": "$/hr cost for memory"
        },
        "cost": {
          "type": "string",
          "description": "Total cost for the deployment"
        },
        "vcpu_cost": {
          "type": "number",
          "description": "$/hr cost for VCPUs"
        },
        "uuid": {
          "type": "string",
          "description": "UUID for the given deployment"
        }
      },
      "title": "Deployment Cost Object"
    },
    "project_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "project",
          "x-ntnx-enum": [
            "project"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for project list"
    },
    "postal_address": {
      "description": "Postal address",
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "description": "Country name",
          "maxLength": 100
        },
        "state": {
          "type": "string",
          "description": "State name",
          "maxLength": 100
        },
        "street": {
          "type": "string",
          "description": "Street name and number",
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "description": "City name",
          "maxLength": 100
        },
        "zip_code": {
          "type": "string",
          "description": "Zip code",
          "maxLength": 20
        }
      },
      "title": "Postal address"
    },
    "external_configurations": {
      "description": "External configurations for the connectors.",
      "type": "object",
      "properties": {
        "citrix_connector_config": {
          "$ref": "#/definitions/citrix_connector_config_details"
        }
      },
      "title": "External Connector Configurations."
    },
    "cluster_capacity": {
      "type": "object",
      "description": "Total and utilized resources of the cluster",
      "properties": {
        "vcpu_capacity": {
          "type": "integer",
          "format": "int64"
        },
        "memory_usage": {
          "type": "integer",
          "format": "int64"
        },
        "storage_usage": {
          "type": "integer",
          "format": "int64"
        },
        "storage_capacity": {
          "type": "integer",
          "format": "int64"
        },
        "memory_capacity": {
          "type": "integer",
          "format": "int64"
        },
        "vcpu_usage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "runbook_abort_script_input": {
      "description": "abort script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/abort_script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "abort script input"
    },
    "citrix_resource_location": {
      "description": "Resource Location on Citrix Cloud.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The resource location id."
        },
        "name": {
          "type": "string",
          "description": "The resource location name."
        }
      },
      "title": "Citrix Resource Location."
    },
    "calm_feature_metadata": {
      "description": "The calm_feature kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when calm_feature was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "calm_feature",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "calm_feature"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "calm_feature uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the calm_feature is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when calm_feature was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the calm_feature. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the calm_feature. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "calm_feature name",
          "maxLength": 80
        }
      },
      "title": "calm_feature metadata"
    },
    "procedural_error_response": {
      "description": "Response for invoking a procedural call.\n",
      "type": "object",
      "properties": {
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "title": "Procedural API error response"
    },
    "network_group_tunnel_vm_resources": {
      "description": "Tunnel resources definition.",
      "type": "object",
      "properties": {
        "cluster_uuid": {
          "type": "string",
          "description": "UUID of the cluster where the tunnel vm has to be placed"
        },
        "subnet_uuid": {
          "type": "string",
          "description": "UUID of the subnet which will be used by the tunnel vm"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "vm_name": {
          "type": "string",
          "description": "VM name for Tunnel VM"
        }
      },
      "title": "Tunnel resources"
    },
    "contact_information": {
      "description": "Contact information object.",
      "type": "object",
      "properties": {
        "phone_number": {
          "type": "string",
          "description": "Phone Number of the contact."
        },
        "email_address": {
          "pattern": "(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)",
          "type": "string",
          "description": "Email address of the contact."
        },
        "name": {
          "type": "string",
          "description": "Name of the contact."
        }
      },
      "title": "Contact Information object."
    },
    "user_status_resource": {
      "description": "User Resource Definition.",
      "type": "object",
      "properties": {
        "access_control_policy_reference_list": {
          "items": {
            "$ref": "#/definitions/access_control_policy_reference"
          },
          "type": "array",
          "description": "List of ACP references."
        },
        "display_name": {
          "type": "string",
          "description": "The display name of the user (common name) provided by the directory service.\n"
        },
        "user_type": {
          "x-ntnx-enum": [
            "LOCAL",
            "IDP",
            "DIRECTORY_SERVICE"
          ],
          "type": "string"
        },
        "resource_usage_summary": {
          "type": "object",
          "properties": {
            "resource_domain": {
              "$ref": "#/definitions/resource_domain_resources_status"
            }
          }
        },
        "projects_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "A list of projects the user is part of."
        },
        "identity_provider_user": {
          "$ref": "#/definitions/identity_provider_user"
        },
        "directory_service_user": {
          "$ref": "#/definitions/directory_service_user_status"
        }
      },
      "title": "User Resource Definition."
    },
    "user_group_def_status": {
      "description": "User group status definition.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "resources": {
          "$ref": "#/definitions/user_group_output_resource"
        }
      },
      "title": "user group status definition."
    },
    "tunnel_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "tunnel"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "subnet_metadata": {
      "description": "The subnet kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when subnet was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "subnet",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "subnet"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "subnet uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the subnet is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when subnet was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the subnet. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the subnet. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "subnet name",
          "maxLength": 80
        }
      },
      "title": "subnet metadata"
    },
    "replication_connection_resources_def_status": {
      "description": "Replication data to link 2 accounts.",
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "state of the link between 2 accounts."
        }
      },
      "title": "Replication data to link 2 accounts"
    },
    "routing_policy_reference_upload": {
      "description": "The reference to a routing_policy",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "routing_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "routing_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a routing_policy"
    },
    "aws_image_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_image_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_image_list_metadata_output"
        }
      },
      "title": "aws_image entity list"
    },
    "marketplace_item_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_item",
          "x-ntnx-enum": [
            "marketplace_item"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for marketplace_item list"
    },
    "approval_request_intent_resource": {
      "description": "Response object for intentful operations on a approval_request",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/approval_request_def_status"
        },
        "spec": {
          "$ref": "#/definitions/approval_request"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/approval_request_metadata"
        }
      },
      "title": "approval_request Intent Response"
    },
    "storage_qos_policy_config_input": {
      "description": "The policy rule to be enforced depending on the type of policy. For ex -\nprovisioned/throttled iops would be set for a storage qos policy.\n",
      "required": [
        "throttled_iops"
      ],
      "type": "object",
      "properties": {
        "throttled_iops": {
          "default": -1,
          "type": "integer",
          "description": "Throttled iops for the entities being governed by the policy. The\nblock size for the IO is 32kB.\n",
          "format": "int64"
        }
      },
      "title": "Storage Qos Policy Parameters Input."
    },
    "resource_domain_resources_status": {
      "description": "The status for a resource domain (limits and values)",
      "required": [
        "resources"
      ],
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/resource_utilization_status"
          },
          "type": "array",
          "description": "The utilization/limit for resource types"
        }
      },
      "title": "Resource Domain Status"
    },
    "app_profile_response_download": {
      "description": "App profile resources",
      "required": [
        "name",
        "state",
        "message_list",
        "dependency_list"
      ],
      "type": "object",
      "properties": {
        "deployment_create_list": {
          "items": {
            "$ref": "#/definitions/blueprint_deployment_response_download"
          },
          "type": "array",
          "description": ""
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environment uuids which are attached the app profile"
        },
        "patch_list": {
          "items": {
            "$ref": "#/definitions/config_response_download"
          },
          "type": "array",
          "description": "List of references to app edit patches\n"
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response_download"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_response_download"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_response_download"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for blueprint deployment"
        },
        "dependency_list": {
          "items": {
            "$ref": "#/definitions/blueprint_dependency_list"
          },
          "type": "array"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "App profile resources"
    },
    "app_saas_consumption_resources": {
      "description": "Information about saas_consumption status",
      "type": "object",
      "properties": {
        "unique_active_vms": {
          "type": "number"
        },
        "timestamp": {
          "type": "number"
        },
        "active_vms": {
          "type": "number"
        },
        "required_packs": {
          "type": "number"
        },
        "active_containers": {
          "type": "number"
        },
        "unique_active_containers": {
          "type": "number"
        }
      },
      "title": "Saas_Consumption status"
    },
    "vm_recovery_point_restore_input": {
      "description": "Input object for the restore API of the recovery points. User can provide optional UUID of the vm that will be created as a result of this operation.\n",
      "type": "object",
      "properties": {
        "vm_override_spec": {
          "description": "Properties of the vm that can be overridden on restore.\n",
          "$ref": "#/definitions/vm_restore_override_spec"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "categories_mapping": {
              "additionalProperties": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "object",
              "description": "Categories for the vm. This allows setting up multiple\nvalues from a single key.\n"
            },
            "uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "format": "UUID"
            }
          },
          "title": "Metadata of the restored vm."
        }
      },
      "title": "Restore API input"
    },
    "tunnel_referrer_entities": {
      "description": "Entity that holds a reference to the tunnel.",
      "type": "object",
      "properties": {
        "blueprint": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "List of blueprint uids which are using tunnel"
        },
        "project": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "List of project uuids which are using tunnel"
        },
        "app": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "List of application uuids which are using tunnel"
        },
        "account": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "List of account uids which are using tunnel"
        }
      },
      "title": "Response object that holds entity kind and list of uuids."
    },
    "network_group_tunnel_vm_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel_vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel_vm"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_runlog_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_runlog"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_variable_metadata": {
      "description": "The app_variable kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_variable was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_variable",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_variable"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_variable uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_variable is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_variable was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_variable. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_variable. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_variable name",
          "maxLength": 80
        }
      },
      "title": "app_variable metadata"
    },
    "certification_signing_info": {
      "description": "Customer information used in Certificate Signing Request for\ncreating digital certificates.\n",
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "The Town or City where customer's business is located."
        },
        "common_name_suffix": {
          "type": "string",
          "description": "Common name is by default <node_uuid>.nutanix.com, but if a customer\nwants something instead of nutanix.com they can specify it here.\n"
        },
        "state": {
          "type": "string",
          "description": "The Province, Region, County or State where customer business is\nis located.\n"
        },
        "country_code": {
          "type": "string",
          "description": "Two-letter ISO code for Country where customer's organization is\nlocated.\n"
        },
        "common_name": {
          "type": "string",
          "description": "Common name of the organization or host server"
        },
        "organization": {
          "type": "string",
          "description": "Name of the customer business."
        },
        "email_address": {
          "type": "string",
          "description": "Email address of the certificate administrator."
        }
      },
      "title": "Customer information in Certificate Signing Request"
    },
    "network_group_intent_response": {
      "description": "Response object for intentful operations on a network_group",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/network_group_def_status"
        },
        "spec": {
          "$ref": "#/definitions/network_group"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_metadata"
        }
      },
      "title": "network_group Intent Response"
    },
    "app_protection_policy_resources": {
      "description": "AppProtectionPolicy resources",
      "required": [
        "app_protection_rule_list",
        "ordered_availability_site_list"
      ],
      "type": "object",
      "properties": {
        "is_default": {
          "default": false,
          "type": "boolean",
          "description": "whether the protection policy is default or not"
        },
        "app_protection_rule_list": {
          "items": {
            "$ref": "#/definitions/rule_app_protection_rule"
          },
          "type": "array",
          "description": "app_protection_rules b/w availability_sites, defining protections b/w (env, account, cluster) tuples."
        },
        "type": {
          "enum": [
            "MANUAL"
          ],
          "type": "string"
        },
        "rpo": {
          "type": "float",
          "description": "recovery point objective in mins."
        },
        "ordered_availability_site_list": {
          "items": {
            "$ref": "#/definitions/rule_availability_site"
          },
          "type": "array",
          "description": "availability_site defined by (env, account, cluster) tuple."
        }
      },
      "title": "AppProtectionPolicy resources"
    },
    "blueprint_launch2_response": {
      "description": "Response containing the application uuid and create action and runlog uuid",
      "required": [
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_launch2_response_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint_launch2_spec"
        }
      },
      "title": "Response containing the application uuid and create action runlog uuid"
    },
    "marketplace_icon_summary_resources": {
      "description": "Marketplace icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "Marketplace Icon type"
        },
        "link": {
          "type": "string",
          "description": "Marketplace Icon link"
        },
        "uuid": {
          "type": "string",
          "description": "Marketplace Icon uuid",
          "format": "UUID"
        }
      },
      "title": "Marketplace icon resources"
    },
    "brownfield_instance_input": {
      "description": "Brownfield instance list",
      "required": [
        "instance_id"
      ],
      "type": "object",
      "properties": {
        "platform_data": {
          "additionalProperties": {
            "type": "string"
          }
        },
        "instance_id": {
          "type": "string",
          "description": "Id of the vm",
          "maxLength": 64
        },
        "instance_name": {
          "type": "string",
          "description": "Name of the vm",
          "maxLength": 64
        },
        "power_state": {
          "type": "string",
          "description": "Power state of the vm"
        },
        "address": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Address of the vm"
        },
        "nic_index": {
          "type": "integer",
          "description": "Nic index to pick IP from when vm powered off while import",
          "format": "int64"
        }
      },
      "title": "brownfield instance list"
    },
    "aws_image_reference": {
      "description": "The reference to a aws_image",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_image"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a aws_image"
    },
    "role_reference": {
      "description": "The reference to a role",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "role",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "role"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a role"
    },
    "aws_security_group_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_security_group_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_security_group_list_metadata_output"
        }
      },
      "title": "aws_security_group entity list"
    },
    "provider_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "provider",
          "x-ntnx-enum": [
            "provider"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for provider list output"
    },
    "protection_info": {
      "description": "Information about state of the policy.",
      "type": "object",
      "properties": {
        "replication_status": {
          "x-ntnx-enum": [
            "SYNCED",
            "SYNCING",
            "OUT_OF_SYNC"
          ],
          "type": "string",
          "description": "Replication status of the entity.\n"
        }
      },
      "title": "Protection policy information."
    },
    "role_metadata": {
      "description": "The role kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when role was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "role",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "role"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "role uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the role is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when role was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the role. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the role. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "role name",
          "maxLength": 80
        }
      },
      "title": "role metadata"
    },
    "provider_list_intent_response": {
      "description": "Response object for intentful operation of providers",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/provider_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/provider_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "app_list_input": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app",
          "x-ntnx-enum": [
            "app"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "advanced_filter": {
          "$ref": "#/definitions/app_filters"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app list"
    },
    "job_failure_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "job",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "job"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "messages": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "default": "3.0.0",
          "readOnly": true,
          "type": "string",
          "description": "API Version of the Nutanix v3 API framework."
        }
      },
      "title": "Response Kind"
    },
    "app_endpoint_response": {
      "description": "Endpoint definition",
      "required": [
        "uuid",
        "name",
        "type",
        "attrs"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Endpoint definition"
    },
    "app_intent_response": {
      "description": "Response object for intentful operations on a app",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app Intent Response"
    },
    "recovery_plan_script_config": {
      "description": "Configuration of the script to be executed inside the guest VM after recovery. The script is expected to be present at following file path as per Operating System: - Production:\n  - Windows : scripts/production/vm_recovery.bat relative to the Nutanix\n    directory in the Program Files\n  - Linux : /usr/local/sbin/production_vm_recovery\n- Test:\n  - Windows : scripts/test/vm_recovery.bat relative to the Nutanix\n    directory in the Program Files\n  - Linux : /usr/local/sbin/test_vm_recovery\n",
      "required": [
        "enable_script_exec"
      ],
      "type": "object",
      "properties": {
        "enable_script_exec": {
          "type": "boolean",
          "description": "Indicates whether to execute script.\n"
        },
        "timeout": {
          "minimum": 0,
          "type": "integer",
          "description": "The timeout for the script (seconds).\n",
          "format": "int32"
        }
      },
      "title": "Script configuration"
    },
    "scope_filter_expression": {
      "description": "The Scope filter expression is a combination of LHS-Operator-RHS. This type of filter expression helps express the \"Context\" part of a Filter. Example1 - To express a context = Belonging to Project P1 or Project P2\n  left_hand_side = PROJECT\n  operator = IN\n  right_hand_side = [\"P1\", \"P2\"]\nExample2 - To express Belonging to 2 categories\n  left_hand_side = CATEGORY\n  operator = IN_ALL\n  right_hand_side = [\"location:nyc\", \"env:prod\"]\n",
      "required": [
        "left_hand_side",
        "operator",
        "right_hand_side"
      ],
      "type": "object",
      "properties": {
        "operator": {
          "x-ntnx-enum": [
            "IN",
            "IN_ALL",
            "NOT_IN"
          ],
          "type": "string",
          "description": "The operator of the filter expression."
        },
        "right_hand_side": {
          "description": "The Right hand side(RHS) of the scope filter expression.",
          "$ref": "#/definitions/scope_right_hand_side"
        },
        "left_hand_side": {
          "x-ntnx-enum": [
            "CATEGORY",
            "PROJECT",
            "CLUSTER"
          ],
          "type": "string",
          "description": "The LHS of the filter expression - the scope type."
        }
      },
      "title": "Scope Filter Expression."
    },
    "availability_zone_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "availability_zone",
          "x-ntnx-enum": [
            "availability_zone"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for availability_zone list output"
    },
    "cluster_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "cluster",
          "x-ntnx-enum": [
            "cluster"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for cluster list"
    },
    "vmware_library_metadata": {
      "description": "Restful representation of the library response",
      "required": [
        "api_version",
        "entities"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/vmware_library_entities"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        }
      },
      "title": "library enitity"
    },
    "user_group_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user_group",
          "x-ntnx-enum": [
            "user_group"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for user_group list"
    },
    "mutable_blueprint_intent_input": {
      "description": "An intentful representation of a blueprint",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/mutable_blueprint"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/mutable_blueprint_metadata"
        }
      },
      "title": "blueprint Intent Entity"
    },
    "feature_approval_policy": {
      "required": [
        "is_enabled"
      ],
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Is approval policy enabled"
        },
        "ui_visibility": {
          "x-ntnx-enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "description": ""
        },
        "settings": {
          "required": [
            "expiry"
          ],
          "type": "object",
          "description": "Approval settings",
          "properties": {
            "email_settings": {
              "$ref": "#/definitions/feature_approval_policy_email_settings"
            },
            "expiry": {
              "description": "Expiry for Approvals - time period after which the approval request will expire\n",
              "type": "object",
              "properties": {
                "interval_type": {
                  "x-ntnx-enum": [
                    "HOURS",
                    "DAYS",
                    "WEEKS",
                    "MONTHS",
                    "YEARS"
                  ],
                  "type": "string",
                  "description": "Interval period.\n"
                },
                "multiple": {
                  "type": "integer",
                  "description": "Multiplier to 'interval_type'. For example if 'interval_type' is\n\"DAYS\" and 'multiple' is 2, then after 2 days the approval request will expire.\n",
                  "format": "int32"
                }
              },
              "title": "Expiry for Approvals"
            }
          }
        }
      }
    },
    "image_placement_policy_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image_placement_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image_placement_policy"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "identity_provider_user": {
      "description": "An Identity Provider user.",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username from the identity provider. Name Id for SAML Identity Provider.\n",
          "maxLength": 104
        },
        "identity_provider_reference": {
          "description": "Identity provider reference.\n",
          "$ref": "#/definitions/identity_provider_reference"
        }
      },
      "title": "Identity Provider user Definition."
    },
    "approval_request_metadata": {
      "description": "The approval_request kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when approval_request was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "approval_request",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "approval_request"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "approval_request uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the approval_request is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when approval_request was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the approval_request. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the approval_request. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "approval_request name",
          "maxLength": 80
        }
      },
      "title": "approval_request metadata"
    },
    "subnet_reference": {
      "description": "The reference to a subnet",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "subnet",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "subnet"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a subnet"
    },
    "app_resources_def_status": {
      "description": "Status for Application.",
      "required": [
        "variable_list",
        "deployment_list",
        "action_list",
        "credential_list",
        "app_blueprint_reference",
        "app_state"
      ],
      "type": "object",
      "properties": {
        "app_blueprint_reference": {
          "$ref": "#/definitions/blueprint_reference"
        },
        "app_state": {
          "type": "string"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of Action for Application."
        },
        "source_marketplace_name": {
          "type": "string",
          "description": "Name of the marketplace item used to create this app"
        },
        "credential_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response"
          },
          "type": "array",
          "description": "Credential list for appspec"
        },
        "app_profile_config_reference": {
          "$ref": "#/definitions/app_profile_reference"
        },
        "cloned_from_reference": {
          "$ref": "#/definitions/app_reference"
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "default_credential_local_reference": {
          "description": "Default credential for app",
          "$ref": "#/definitions/app_credential_reference"
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "app_state_meta": {
          "type": "object",
          "description": "Meta state information for application",
          "properties": {
            "state": {
              "type": "string",
              "description": "Meta state"
            },
            "message": {
              "type": "string",
              "description": "Message for meta state"
            }
          }
        },
        "app_blueprint_config_reference": {
          "$ref": "#/definitions/blueprint_reference"
        },
        "source_marketplace_version": {
          "type": "string",
          "description": "Version of the marketplace item used to create this app"
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Indicator for cloned app"
        },
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "dependency_list": {
          "items": {
            "$ref": "#/definitions/blueprint_dependency_list"
          },
          "type": "array",
          "description": "Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "deployment_list": {
          "items": {
            "$ref": "#/definitions/app_deployment_response"
          },
          "type": "array",
          "description": "List of Deployment Spec for Application."
        }
      },
      "title": "Status for Application."
    },
    "meter_list_request": {
      "type": "object",
      "description": "Request object for getting meter data",
      "properties": {
        "filter": {
          "type": "string"
        },
        "length": {
          "type": "number"
        },
        "offset": {
          "type": "number"
        }
      }
    },
    "image_architecture": {
      "x-ntnx-enum": [
        "X86_64",
        "PPC64",
        "PPC64LE"
      ],
      "type": "string",
      "description": "The supported CPU architecture for a disk image.",
      "title": "Image architecture"
    },
    "tunnel_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "tunnel",
          "x-ntnx-enum": [
            "tunnel"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for tunnel list"
    },
    "blueprint_patch_environment_validate_profile_pair_response": {
      "description": "The result of patching validation for each app-profile and environment pair",
      "required": [
        "environment",
        "app_profile",
        "state"
      ],
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/entity_reference"
        },
        "app_profile": {
          "$ref": "#/definitions/entity_reference"
        },
        "state": {
          "type": "string",
          "description": "Whether the app-profile can be patched with the environment!"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "The result of patching validation for each app-profile and environment pair"
    },
    "environment_infra_inclusion_list": {
      "additionalProperties": true,
      "required": [
        "account_reference",
        "type"
      ],
      "type": "object",
      "properties": {
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        }
      }
    },
    "access_control_policy_input": {
      "description": "An Access Control Policy resource.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Access Control Policy.",
          "maxLength": 64
        },
        "resources": {
          "description": "Access Control Policy resources.",
          "required": [
            "role_reference"
          ],
          "type": "object",
          "properties": {
            "role_reference": {
              "description": "The Role being assigned to a given user(s).",
              "$ref": "#/definitions/role_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "The User(s) being assigned a given role."
            },
            "filter_list": {
              "description": "The list of filters, which define the entities.\n",
              "type": "object",
              "x-ntnx-one-of": [
                {
                  "required": [
                    "context_list"
                  ]
                }
              ],
              "properties": {
                "context_list": {
                  "items": {
                    "$ref": "#/definitions/filter"
                  },
                  "type": "array",
                  "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                }
              }
            },
            "user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "The User group(s) being assigned a given role."
            }
          },
          "title": "Access Control Policy Resources."
        },
        "description": {
          "type": "string",
          "description": "The description of the association of a role to a user\nin a given context.\n",
          "maxLength": 1000
        }
      },
      "title": "Access control policy details"
    },
    "vpc_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vpc",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vpc"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "image_intent_response": {
      "description": "Response object for intentful operations on a image",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/image_def_status"
        },
        "spec": {
          "$ref": "#/definitions/image"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/image_metadata"
        }
      },
      "title": "image Intent Response"
    },
    "user_attribute": {
      "description": "Attributes of User",
      "required": [
        "name",
        "attribute_list"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "attribute_list": {
          "items": {
            "$ref": "#/definitions/attribute_value_list"
          },
          "type": "array"
        }
      },
      "title": "User attributes"
    },
    "blueprint_patch_environment_profile_pair_request": {
      "description": "The app-profile to be patched and the environment to be used for patching",
      "required": [
        "environment",
        "app_profile"
      ],
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/entity_reference"
        },
        "app_profile": {
          "$ref": "#/definitions/entity_reference"
        },
        "keep_secrets": {
          "default": false,
          "type": "boolean",
          "description": "When true, secrets, if present in the blueprint, are retained and not patched from environment."
        }
      },
      "title": "The app-profile and environment for patching"
    },
    "meter_status": {
      "type": "object",
      "description": "Empty status object",
      "title": "Empty status object"
    },
    "category_key_list_response": {
      "description": "Category key list response.",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/category_key_status"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/category_list_metadata"
        }
      },
      "title": "Category key list response."
    },
    "aws_volume_type_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_volume_type",
          "x-ntnx-enum": [
            "aws_volume_type"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_volume_type list output"
    },
    "app_runbook_input_upload": {
      "description": "Runbook definition for Application",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference_upload"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Runbook for Application"
    },
    "runbook_upload_output": {
      "description": "The UUID of the newly created Runbook",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "uuid of the newly created Runbook",
          "format": "UUID"
        }
      },
      "title": "Upload Runbook output"
    },
    "policy_event_resources": {
      "description": "Policy Event resources",
      "required": [
        "entity_type"
      ],
      "type": "object",
      "properties": {
        "entity_type": {
          "type": "string",
          "description": "Entity on which policy event is triggered"
        }
      },
      "title": "Policy Event resources"
    },
    "groups_get_entities_request": {
      "description": "Get Entities Request.",
      "required": [
        "entity_type"
      ],
      "type": "object",
      "properties": {
        "number_of_intervals_for_latest_data": {
          "type": "integer",
          "description": "When retrieving latest values, how far back to look as a multiple of the downsampling interval for the metric.\n",
          "format": "int32"
        },
        "group_sort_attribute": {
          "type": "string",
          "description": "The name of the attribute that will be used to sort groups.\n"
        },
        "number_of_buckets": {
          "type": "integer",
          "description": "For grouping, how many groups to return.",
          "format": "int32"
        },
        "entity_ids": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A set of entities that the request will be scoped to."
        },
        "group_member_attributes": {
          "items": {
            "$ref": "#/definitions/groups_requested_attribute"
          },
          "type": "array"
        },
        "group_member_sort_attribute": {
          "type": "string",
          "description": "The name of the attribute that will be used to sort group members.\n"
        },
        "bucket_boundary": {
          "type": "integer",
          "description": "For grouping, the boundary to snap to when grouping.",
          "format": "int32"
        },
        "group_offset": {
          "type": "integer",
          "description": "The offset into the total set of groups to return.",
          "format": "int64"
        },
        "downsampling_interval": {
          "type": "integer",
          "description": "Downsampling interval to apply to query if override is desired.\n",
          "format": "int32"
        },
        "interval_start_ms": {
          "default": 0,
          "type": "integer",
          "description": "For a time-series query, the start of the interval since the epoch in ms. Default is latest value only.\n",
          "format": "int64"
        },
        "entity_type": {
          "type": "string",
          "description": "The entity type that will be requested."
        },
        "group_member_offset": {
          "type": "integer",
          "description": "The offset into the total member set to return per group.",
          "format": "int64"
        },
        "grouping_attribute": {
          "type": "string",
          "description": "Attribute that will be used to perform a group-by if needed.\n"
        },
        "group_member_sort_downsampling_function": {
          "$ref": "#/definitions/groups_sort_downsampling_function"
        },
        "group_sort_order": {
          "$ref": "#/definitions/groups_sort_order"
        },
        "group_sort_downsample_function": {
          "$ref": "#/definitions/groups_sort_downsampling_function"
        },
        "filter_criteria": {
          "type": "string",
          "description": "FIQL filter criteria that will be used to filter the returned data.\n"
        },
        "availability_zone_scope": {
          "default": "LOCAL",
          "x-ntnx-enum": [
            "LOCAL",
            "GLOBAL"
          ],
          "type": "string",
          "description": "The scope of availability zones from which to fetch the  data.\n"
        },
        "group_count": {
          "type": "integer",
          "description": "The maximum number of groups to return in the result.",
          "format": "int64"
        },
        "group_attributes": {
          "items": {
            "$ref": "#/definitions/groups_requested_attribute"
          },
          "type": "array"
        },
        "interval_end_ms": {
          "default": 0,
          "type": "integer",
          "description": "For a time-series query, the end of the interval since the epoch in ms. Default is latest value only.\n",
          "format": "int64"
        },
        "grouping_attribute_type": {
          "$ref": "#/definitions/groups_attribute_type"
        },
        "group_member_count": {
          "type": "integer",
          "description": "The maximum number of members to return per group.",
          "format": "int64"
        },
        "group_member_sort_order": {
          "$ref": "#/definitions/groups_sort_order"
        },
        "query_name": {
          "type": "string",
          "description": "A custom name to use for tagging the query when debugging."
        }
      },
      "title": "Get Entities Request"
    },
    "runbook_runlog_reference": {
      "description": "The reference to a runbook_runlog",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook_runlog"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a runbook_runlog"
    },
    "network_group_tunnel_metadata": {
      "description": "The network_group_tunnel kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group_tunnel was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "network_group_tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "network_group_tunnel uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the network_group_tunnel is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group_tunnel was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the network_group_tunnel. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the network_group_tunnel. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "network_group_tunnel name",
          "maxLength": 80
        }
      },
      "title": "network_group_tunnel metadata"
    },
    "marketplace_item_input_resources": {
      "properties": {
        "app_blueprint_template": {
          "type": "object",
          "description": "Represents the information of the runbook, it will be used in executing the runbook.\n",
          "properties": {
            "status": {
              "$ref": "#/definitions/blueprint_download_def_status"
            },
            "spec": {
              "$ref": "#/definitions/blueprint_upload"
            }
          }
        },
        "app_state": {
          "default": "PENDING",
          "x-ntnx-enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED",
            "PUBLISHED"
          ],
          "type": "string",
          "description": "State indicating if marketplace item is approved, pending or rejected\n"
        },
        "author": {
          "type": "string",
          "description": "Person or company which developed the app",
          "maxLength": 64
        },
        "app_attribute_list": {
          "items": {
            "x-ntnx-enum": [
              "FEATURED",
              "EXPRESS_LAUNCH"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Attributes of this app."
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this marketplace item has been assigned to"
        },
        "icon_reference_list": {
          "items": {
            "$ref": "#/definitions/calm_marketplace_icon"
          },
          "type": "array"
        },
        "app_group_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID for the group of MPIs which are versions of the same App\n",
          "format": "UUID"
        },
        "support_status": {
          "default": "SUPPORTED",
          "x-ntnx-enum": [
            "SUPPORTED",
            "DEPRECATED",
            "DECOMMISSIONED"
          ],
          "type": "string",
          "description": "Status indicating if marketplace item is supported, deprecated or decommissioned. Only meaningful for global marketplace items.\n"
        },
        "change_log": {
          "type": "string",
          "description": "Change log for this version of the app\n",
          "maxLength": 5000
        },
        "version": {
          "type": "string",
          "description": "Indicates version of the App that this marketplace item represents\n",
          "maxLength": 64
        },
        "runbook_template_info": {
          "required": [
            "source_runbook_reference"
          ],
          "type": "object",
          "description": "Represents the information of the runbook, it will be used in executing the runbook.\n",
          "properties": {
            "is_published_with_secrets": {
              "default": false,
              "type": "boolean",
              "description": "Is runbook published with secrets"
            },
            "source_runbook_reference": {
              "$ref": "#/definitions/runbook_reference"
            },
            "is_published_with_endpoints": {
              "default": false,
              "type": "boolean",
              "description": "Is runbook published with endpoints"
            }
          }
        },
        "app_source": {
          "default": "LOCAL",
          "x-ntnx-enum": [
            "LOCAL",
            "GLOBAL_STORE"
          ],
          "type": "string",
          "description": "Indicates whether the app is Global(Marketplace item) or Local(User created)\n"
        },
        "type": {
          "default": "blueprint",
          "x-ntnx-enum": [
            "blueprint",
            "runbook"
          ],
          "type": "string",
          "description": "Type of this app"
        },
        "deprecation_reason": {
          "type": "string",
          "description": "Reason for deprecating or decommissioning this version of the app\n",
          "maxLength": 5000
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "app_blueprint_template",
            "author"
          ]
        },
        {
          "required": [
            "runbook_template_info",
            "author"
          ]
        }
      ],
      "type": "object",
      "description": "Description of the marketplace item",
      "title": "Description of the marketplace item"
    },
    "app_task_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_task",
          "x-ntnx-enum": [
            "app_task"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_task list output"
    },
    "feature_policy": {
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Is policy enabled"
        },
        "config": {
          "additionalProperties": true,
          "type": "object",
          "description": "Policy config"
        },
        "is_ignored": {
          "type": "boolean",
          "description": "Is policy ignored"
        }
      }
    },
    "disk_reference": {
      "description": "The reference to a disk",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "disk",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "disk"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a disk"
    },
    "feature_approval_policy_input": {
      "description": "Input for feature - Approval Policy",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_approval_policy"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Input for feature - Approval Policy"
    },
    "app_saas_consumption": {
      "description": "An intentful representation of a app_saas_consumption spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_saas_consumption Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_saas_consumption.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_saas_consumption_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_saas_consumption Intent Spec with placement specified"
    },
    "logout_response": {
      "description": "Response from logout object",
      "type": "object",
      "properties": {
        "external_logout_url_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of addition logout urls which should be called by UI"
        }
      },
      "title": "Logout response"
    },
    "policy": {
      "description": "An intentful representation of a policy spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for policy.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/policy_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "policy Intent Spec with placement specified"
    },
    "aws_volume_type_metadata": {
      "description": "The aws_volume_type kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_volume_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_volume_type"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_volume_type name"
        }
      },
      "title": "aws_volume_type metadata"
    },
    "app_published_service_reference_upload": {
      "description": "The reference to a app_published_service",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_published_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_published_service"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_published_service"
    },
    "app_substrate_reference_upload": {
      "description": "The reference to a app_substrate",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_substrate",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_substrate"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_substrate"
    },
    "app_credential_input_upload": {
      "description": "Credential for application",
      "required": [
        "name",
        "type",
        "username",
        "secret"
      ],
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "resource_type_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "exec_runbook_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "secret": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential secret object"
        },
        "passphrase": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential passphrase object associated with the provided key"
        },
        "account_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "cred_class": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "PASSWORD",
            "KEY"
          ],
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": "Variable list of the credential"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Credential for application"
    },
    "account_intent_response": {
      "description": "Response object for intentful operations on a account",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/account_def_status"
        },
        "spec": {
          "$ref": "#/definitions/account"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/account_metadata"
        }
      },
      "title": "account Intent Response"
    },
    "category_metadata": {
      "description": "The category kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when category was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "category",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "category"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "category uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the category is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when category was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the category. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the category. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "category name",
          "maxLength": 80
        }
      },
      "title": "category metadata"
    },
    "replication_connection_def_status": {
      "description": "An intentful representation of a replication_connection status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "replication_connection Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the replication_connection."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the replication_connection, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/replication_connection_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for replication_connection."
        }
      },
      "title": "replication_connection Intent Status with placement specified"
    },
    "placement_entity_filter": {
      "description": "Image placement policy filter. Specify the filter match type and categories\n",
      "required": [
        "params",
        "type"
      ],
      "type": "object",
      "properties": {
        "params": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "A list of category key and list of values."
        },
        "type": {
          "default": "CATEGORIES_MATCH_ANY",
          "x-ntnx-enum": [
            "CATEGORIES_MATCH_ALL",
            "CATEGORIES_MATCH_ANY"
          ],
          "type": "string",
          "description": "The type of the filter being used."
        }
      },
      "title": "Image placement policy entity filter"
    },
    "tunnel_resources": {
      "description": "Tunnel resources definition.",
      "type": "object",
      "properties": {
        "credential": {
          "$ref": "#/definitions/app_credential_input"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "created_by": {
          "type": "string"
        }
      },
      "title": "Tunnel resources"
    },
    "custom_project_internal": {
      "description": "A Project resource, combined with Users and ACPs",
      "required": [
        "project_detail"
      ],
      "type": "object",
      "properties": {
        "access_control_policy_list": {
          "items": {
            "required": [
              "operation",
              "acp",
              "metadata"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD",
                  "DELETE",
                  "UPDATE"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "acp": {
                "$ref": "#/definitions/access_control_policy_input"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "The list of ACPs to be attached to the users belonging to a project.\n"
        },
        "project_detail": {
          "description": "A Project resource.",
          "required": [
            "name",
            "resources"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project name.",
              "maxLength": 64
            },
            "resources": {
              "type": "object",
              "properties": {
                "resource_domain": {
                  "$ref": "#/definitions/resource_domain_spec"
                },
                "account_reference_list": {
                  "items": {
                    "$ref": "#/definitions/account_reference"
                  },
                  "type": "array",
                  "description": "List of accounts associated with the project."
                },
                "environment_reference_list": {
                  "items": {
                    "$ref": "#/definitions/environment_reference"
                  },
                  "type": "array",
                  "description": "List of environments associated with the project."
                },
                "default_subnet_reference": {
                  "description": "Optional default subnet if one is specified",
                  "$ref": "#/definitions/subnet_reference"
                },
                "user_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_reference"
                  },
                  "type": "array",
                  "description": "List of users in the project."
                },
                "tunnel_reference_list": {
                  "items": {
                    "$ref": "#/definitions/tunnel_reference"
                  },
                  "type": "array",
                  "description": "List of tunnels associated with the project."
                },
                "external_user_group_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_group_reference"
                  },
                  "type": "array",
                  "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                },
                "cluster_reference_list": {
                  "items": {
                    "$ref": "#/definitions/cluster_reference"
                  },
                  "type": "array",
                  "description": "List of clusters associated with the project."
                },
                "subnet_reference_list": {
                  "items": {
                    "$ref": "#/definitions/subnet_reference"
                  },
                  "type": "array",
                  "description": "List of subnets for the project."
                },
                "vpc_reference_list": {
                  "items": {
                    "$ref": "#/definitions/vpc_reference"
                  },
                  "type": "array",
                  "description": "List of VPCs associated with the project."
                },
                "external_network_list": {
                  "items": {
                    "$ref": "#/definitions/external_network"
                  },
                  "type": "array",
                  "description": "List of external network associated with the project."
                },
                "default_environment_reference": {
                  "description": "Optional default environment if one is specified",
                  "$ref": "#/definitions/environment_reference"
                }
              },
              "title": "Project Resources"
            },
            "description": {
              "type": "string",
              "description": "Project description.",
              "maxLength": 1000
            }
          },
          "title": "Project details"
        },
        "user_list": {
          "items": {
            "required": [
              "operation",
              "user",
              "metadata"
            ],
            "type": "object",
            "description": "The details of the user such as principal name and\ndirectory_service_reference. Also contains metadata.\n",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "user": {
                "$ref": "#/definitions/user"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "The list of user specification to be associated with the project.\n"
        },
        "user_group_list": {
          "items": {
            "required": [
              "operation",
              "user_group",
              "metadata"
            ],
            "type": "object",
            "description": "The details of the user group\n",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              },
              "user_group": {
                "$ref": "#/definitions/user_group"
              }
            }
          },
          "type": "array",
          "description": "The list of user group specification to be associated with the project.\n"
        }
      },
      "title": "Project details, combined with Users and ACPs"
    },
    "protection_policy_reference": {
      "description": "The reference to a protection_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "protection_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "protection_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a protection_policy"
    },
    "cluster_intent_resource": {
      "description": "Response object for intentful operations on a cluster",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/cluster_def_status"
        },
        "spec": {
          "$ref": "#/definitions/cluster"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/cluster_metadata"
        }
      },
      "title": "cluster Intent Response"
    },
    "mutable_blueprint": {
      "description": "App blueprint input for application edit",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "environment_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "Environment uuid.",
          "format": "UUID"
        },
        "source_marketplace_name": {
          "type": "string",
          "description": "Name of the source marketplace item of the app blueprint\n"
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "source_marketplace_version": {
          "type": "string",
          "description": "Indicates version of the source marketplace item of the app blueprint\n"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/blueprint_resources"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        }
      },
      "title": "App blueprint input for application edit"
    },
    "vmware_library_resource": {
      "description": "eestful represtation of the library resource instance",
      "type": "object",
      "properties": {
        "storage_backings": {
          "type": "object",
          "properties": {
            "datastore_id": {
              "type": "string",
              "description": "datastore id"
            },
            "type": {
              "type": "string",
              "description": "type of storage"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "name of the library"
        },
        "creation_time": {
          "type": "string",
          "description": "creation time of library",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "description": "version number of library"
        },
        "last_modified_time": {
          "type": "string",
          "description": "last update time of library",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "description": "type of content library"
        },
        "id": {
          "type": "string",
          "description": "unique identifier of library"
        }
      },
      "title": "library resource enitity"
    },
    "app_pricing_cost": {
      "description": "Pricing definition for account.",
      "required": [
        "name",
        "interval",
        "value"
      ],
      "type": "object",
      "properties": {
        "interval": {
          "x-ntnx-enum": [
            "day",
            "hour",
            "minute",
            "month",
            "second"
          ],
          "type": "string",
          "description": "Interval for which the cost applies."
        },
        "name": {
          "type": "string",
          "description": "Name of the attribute this cost applies to."
        },
        "value": {
          "type": "number",
          "description": "Amount of cost per unit of attribute."
        }
      },
      "title": "Pricing for account"
    },
    "snapshot_retention_policy": {
      "properties": {
        "num_snapshots": {
          "type": "integer",
          "description": "Number of snapshots need to be retained. This will be set in case of\nlinear snapshot retention.\n",
          "format": "int32"
        },
        "rollup_retention_policy": {
          "description": "Maximum snapshot retention time with rollup schedules.\n",
          "type": "object",
          "properties": {
            "multiple": {
              "type": "integer",
              "description": "Multiplier to 'snapshot_interval_type'. For example if\n'snapshot_interval_type' is \"YEARLY\" and 'multiple' is 5, then 5\nyears worth of rollup snapshots will be retained.\n",
              "format": "int32"
            },
            "snapshot_interval_type": {
              "x-ntnx-enum": [
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY"
              ],
              "type": "string",
              "description": "Snapshot interval period.\n"
            }
          },
          "title": "Snapshot Retention Policy for rollup schedules"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "num_snapshots"
          ]
        },
        {
          "required": [
            "rollup_retention_policy"
          ]
        }
      ],
      "type": "object",
      "description": "This describes the snapshot retention policy for this\navailability zone. This translates into how many snapshots\ntaken as part of this protection rule need to be retained\non this availability zone.\n",
      "title": "Snapshot Retention Policy"
    },
    "nutanix_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "nutanix",
          "x-ntnx-enum": [
            "nutanix"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for nutanix list output"
    },
    "blueprint_abort_script_input": {
      "description": "abort script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/abort_script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "abort script input"
    },
    "param_value": {
      "properties": {
        "int_value": {
          "type": "integer",
          "format": "int64"
        },
        "double_value": {
          "type": "number",
          "format": "double"
        },
        "bool_value": {
          "type": "boolean"
        },
        "string_value": {
          "type": "string"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "bool_value"
          ]
        },
        {
          "required": [
            "int_value"
          ]
        },
        {
          "required": [
            "double_value"
          ]
        },
        {
          "required": [
            "string_value"
          ]
        }
      ],
      "type": "object",
      "description": "Scalar value object that handles different types",
      "title": "Value object"
    },
    "app_runlog_archive_list_response": {
      "description": "App Archive List Response",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_runlog_archive_response"
          },
          "type": "array"
        }
      },
      "title": "App Archive List Response"
    },
    "app_consumption_input": {
      "description": "Consumption filter data",
      "required": [
        "time_unit"
      ],
      "type": "object",
      "properties": {
        "group_by": {
          "type": "string",
          "description": "Group by attribute"
        },
        "time_unit": {
          "type": "string",
          "description": "Grannularity of consumption data"
        },
        "filters": {
          "type": "object",
          "description": "Filter consumption data",
          "properties": {
            "cluster_ids": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Cluster ID filter list"
            },
            "providers": {
              "items": {
                "x-ntnx-enum": [
                  "AWS",
                  "AZURE",
                  "CHEF",
                  "DOCKER",
                  "DOCKER_REGISTRY",
                  "EXISTING_MACHINE",
                  "GCP",
                  "JENKINS",
                  "NUTANIX",
                  "PUPPET",
                  "SALT",
                  "VCENTER"
                ],
                "type": "string"
              },
              "type": "array",
              "description": "Provider filter list"
            },
            "entity_tags": {
              "type": "object",
              "description": "Entity tag filter list"
            },
            "entity_names": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Entity name filter list"
            },
            "entity_ids": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Entity ID filter list"
            },
            "entity_types": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Entity type filter list"
            }
          }
        },
        "time_range": {
          "type": "object",
          "description": "Time range for cunsumption data",
          "properties": {
            "start_time": {
              "type": "integer",
              "description": "Start time for consumption data"
            },
            "end_time": {
              "type": "integer",
              "description": "End time for consumption data"
            },
            "time_delta": {
              "type": "integer",
              "description": "Time delta for consumption data"
            }
          }
        }
      },
      "title": "Consumption filter data"
    },
    "tunnel_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "tunnel",
          "x-ntnx-enum": [
            "tunnel"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for tunnel list output"
    },
    "blueprint_launch2_spec": {
      "description": "Spec for Blueprint launch.",
      "type": "object",
      "properties": {
        "app_profile_reference": {
          "$ref": "#/definitions/app_profile_reference_for_simple_launch"
        },
        "app_description": {
          "type": "string",
          "description": "description for blueprint launch",
          "maxLength": 5000
        },
        "app_name": {
          "type": "string",
          "description": "Application name by which the application need to be created."
        },
        "runtime_editables": {
          "description": "Runtime editables on the blueprint.",
          "$ref": "#/definitions/blueprint_editables"
        }
      },
      "title": "Spec for Blueprint launch."
    },
    "blueprint_marketplace_launch_response_status": {
      "description": "Status of the Blueprint.",
      "type": "object",
      "properties": {
        "app_blueprint_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "AppBlueprint uuid.",
          "format": "UUID"
        },
        "description": {
          "type": "string",
          "description": "Description for the marketplace item"
        },
        "resources": {
          "$ref": "#/definitions/blueprint_resources_def_status"
        }
      },
      "title": "Status of the Blueprint."
    },
    "network_group_tunnel_vm_def_status": {
      "description": "Tunnel resources definition.",
      "type": "object",
      "properties": {
        "cluster_uuid": {
          "type": "string",
          "description": "UUID of the cluster where the tunnel vm has to be placed"
        },
        "subnet_uuid": {
          "type": "string",
          "description": "UUID of the subnet which will be used by the tunnel vm"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "vm_name": {
          "type": "string",
          "description": "VM name for Tunnel VM"
        }
      },
      "title": "Tunnel resources"
    },
    "project_tasks_resource": {
      "description": "Response object for the status of project task submitted",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/project_task_status"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "Response for the status of project task submitted"
    },
    "vpc_list_intent_response": {
      "description": "Response object for intentful operation of vpcs",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/vpc_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vpc_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "endpoint_upload_output": {
      "description": "The UUID of the newly created Endpoint",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "uuid of the newly created Endpoint",
          "format": "UUID"
        }
      },
      "title": "Upload Endpoint output"
    },
    "app_icon_summary_resources": {
      "description": "App icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "App Icon type"
        },
        "link": {
          "type": "string",
          "description": "App Icon link"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App Icon uuid",
          "format": "UUID"
        }
      },
      "title": "App icon resources"
    },
    "marketplace_icon_reference": {
      "description": "The reference to a marketplace_icon",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_icon"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a marketplace_icon"
    },
    "rule_app_protection_rule": {
      "description": "AppProtectionPolicy app_protection_rules",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "second_availability_site_index": {
          "type": "integer",
          "description": "second availability_site ref for the app_protection_rule"
        },
        "uuid": {
          "type": "string",
          "description": "apr uuid"
        },
        "enabled": {
          "default": true,
          "type": "boolean",
          "description": "whether the rule is enabled or not"
        },
        "provider_protection_rule_reference": {
          "description": "provider_protection_rule reference",
          "$ref": "#/definitions/protection_rule_reference"
        },
        "snapshot_type": {
          "type": "string",
          "description": "Crash consistent or Application Consistent snapshot"
        },
        "is_default": {
          "default": false,
          "type": "boolean",
          "description": "whether the rule is default or not"
        },
        "category_filter": {
          "description": "category filter",
          "$ref": "#/definitions/category_filter"
        },
        "remote_snapshot_retention_policy": {
          "description": "remote snapshot retention policy",
          "$ref": "#/definitions/snapshot_retention_policy_with_expiry"
        },
        "first_availability_site_index": {
          "type": "integer",
          "description": "first availability_site ref for the app_protection_rule"
        },
        "local_snapshot_retention_policy": {
          "description": "local snapshot retention policy",
          "$ref": "#/definitions/snapshot_retention_policy_with_expiry"
        },
        "type": {
          "enum": [
            "SNAPSHOT"
          ],
          "type": "string"
        },
        "recovery_point_objective_secs": {
          "type": "integer",
          "description": "rpo in seconds"
        },
        "name": {
          "type": "string",
          "description": "apr name"
        }
      },
      "title": "AppProtectionPolicy app_protection_rules"
    },
    "virtual_network_reference": {
      "description": "The reference to a virtual_network",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "virtual_network",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "virtual_network"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a virtual_network"
    },
    "user_group_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user_group",
          "x-ntnx-enum": [
            "user_group"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for user_group list output"
    },
    "app_credential_update_spec": {
      "description": "Spec for application credential update",
      "type": "object",
      "properties": {
        "resources": {
          "description": "resources for credential update",
          "type": "object",
          "properties": {
            "credential_definition_list": {
              "items": {
                "$ref": "#/definitions/app_credential_input"
              },
              "type": "array",
              "description": "credential list for secret/passphrase update"
            }
          },
          "title": "resources for credential update"
        }
      },
      "title": "Spec for application credential update"
    },
    "app_icon_summary_def_status": {
      "description": "An intentful representation of a app_icon_summary status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_icon_summary Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_icon_summary."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_icon_summary, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_icon_summary_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_icon_summary."
        }
      },
      "title": "app_icon_summary Intent Status with placement specified"
    },
    "license_consumption_response": {
      "description": "Response for license consumption",
      "type": "object",
      "properties": {
        "unique_active_vms": {
          "type": "integer"
        },
        "active_vms": {
          "type": "integer"
        },
        "required_packs": {
          "type": "integer"
        },
        "unique_active_containers": {
          "type": "integer"
        },
        "active_containers": {
          "type": "integer"
        },
        "applied_packs": {
          "type": "integer"
        },
        "cluster_wise_consumption": {
          "type": "array",
          "$ref": "#/definitions/license_cluster_wise_consumption"
        }
      },
      "title": "license consumption resonse object"
    },
    "rule_node_reference_upload": {
      "description": "The reference to a rule_node",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "rule_node",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "rule_node"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a rule_node"
    },
    "policy_intent_resource": {
      "description": "Response object for intentful operations on a policy",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_metadata"
        }
      },
      "title": "policy Intent Response"
    },
    "approval_request_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "approval_request",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "approval_request"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "protection_rule_reference_upload": {
      "description": "The reference to a protection_rule",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "protection_rule",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "protection_rule"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a protection_rule"
    },
    "app_profile_reference_for_simple_launch": {
      "description": "The reference to a app_profile",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_profile",
          "x-ntnx-enum": [
            "app_profile"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_profile"
    },
    "app_engine_runlog_tree_input": {
      "description": "Runlog tree input",
      "required": [
        "run_id",
        "task_id"
      ],
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string"
        },
        "run_id": {
          "type": "string"
        }
      },
      "title": "Runlog tree input"
    },
    "app_endpoint_information": {
      "description": "Endpoint information and decsription",
      "required": [
        "endpoint_reference",
        "description"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "endpoint_reference": {
          "type": "object",
          "$ref": "#/definitions/entity_reference"
        }
      },
      "title": "endpoint information"
    },
    "app_runbook_response": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "uuid",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "approval_request_def_status": {
      "description": "An intentful representation of a approval_request status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "approval_request Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the approval_request."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the approval_request, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/approval_request_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for approval_request."
        }
      },
      "title": "approval_request Intent Status with placement specified"
    },
    "endpoint_metadata": {
      "description": "The endpoint kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when endpoint was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "endpoint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "endpoint"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "endpoint uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the endpoint is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when endpoint was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the endpoint. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the endpoint. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "endpoint name",
          "maxLength": 80
        }
      },
      "title": "endpoint metadata"
    },
    "procedural_response": {
      "description": "Response for invoking a procedural call. Contains a task UUID.\n",
      "required": [
        "task_uuid"
      ],
      "type": "object",
      "properties": {
        "task_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Procedural API response"
    },
    "project_intent_response": {
      "description": "Response object for intentful operations on a project",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/project_def_status"
        },
        "spec": {
          "$ref": "#/definitions/project"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "project Intent Response"
    },
    "network_function_chain_reference": {
      "description": "The reference to a network_function_chain",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_function_chain",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_function_chain"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a network_function_chain"
    },
    "app_task_reference_upload": {
      "description": "The reference to a app_task",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_task"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_task"
    },
    "app_script_response": {
      "required": [
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "trl_id",
            "run_id",
            "request_id"
          ],
          "description": "Provides the required IDs for the run",
          "properties": {
            "trl_id": {
              "type": "string",
              "description": "task runlog id for the script run"
            },
            "request_id": {
              "type": "string",
              "description": "ergon task id for the script run"
            },
            "run_id": {
              "type": "string",
              "description": "run id for the script run"
            }
          }
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      }
    },
    "app_protection_policy_list_intent_response": {
      "description": "Response object for intentful operation of app_protection_policys",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_protection_policy_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_protection_policy_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "host_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "host",
          "x-ntnx-enum": [
            "host"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for host list output"
    },
    "aws_image_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_image",
          "x-ntnx-enum": [
            "aws_image"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for aws_image list output"
    },
    "user_group_output_resource": {
      "description": "User Group Resource Definition.",
      "required": [
        "display_name"
      ],
      "type": "object",
      "properties": {
        "projects_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "A list of projects the user group is part of."
        },
        "directory_service_user_group": {
          "$ref": "#/definitions/directory_service_user_group_status"
        },
        "access_control_policy_reference_list": {
          "items": {
            "$ref": "#/definitions/access_control_policy_reference"
          },
          "type": "array",
          "description": "List of ACP references."
        },
        "display_name": {
          "type": "string",
          "description": "The display name for the user group."
        },
        "user_group_type": {
          "x-ntnx-enum": [
            "DIRECTORY_SERVICE"
          ],
          "type": "string"
        }
      },
      "title": "user group resource definition."
    },
    "protection_rule_resources": {
      "description": "Protection rule encodes the overall topology of all the availability\nzones where the entity is replicated to. This encoding allows the system\nto figure out where the entity should be running in the case of one or\nmore availability zone failures.\n",
      "required": [
        "ordered_availability_zone_list",
        "availability_zone_connectivity_list"
      ],
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "description": "Time of the day, the policy will be started. This is in \"<x>h:<y>m\"\nformat. The values must be between 00h:00m and 23h:59m. For example\nuser specified 18h:00m and the current time is 17h:00m then the first\nsnapshot will be captured at 18h:00m. If the current time is 19h:00m\nthen the first snapshot will be captured at 18h:00m next day. If not\nset, policy will be applicable immediately.\n"
        },
        "availability_zone_connectivity_list": {
          "items": {
            "type": "object",
            "properties": {
              "destination_availability_zone_index": {
                "type": "integer",
                "description": "Index of the availability zone in\nordered_availability_zone_list. This represents the\navailability zone where the entity needs to be replicated\nto. Index starts at 0.\n",
                "format": "int32"
              },
              "source_availability_zone_index": {
                "type": "integer",
                "description": "Index of the availability zone in\nordered_availability_zone_list. This represents the source\navailability zone where the entity is running. Index starts\nat 0.\n",
                "format": "int32"
              },
              "snapshot_schedule_list": {
                "items": {
                  "required": [
                    "recovery_point_objective_secs"
                  ],
                  "type": "object",
                  "properties": {
                    "recovery_point_objective_secs": {
                      "type": "integer",
                      "description": "A recovery point objective (RPO) is the maximum\nacceptable amount of data loss. RPO is measured in\ntime (in seconds) and then dictates disaster recovery\nprocedures. For example, if the RPO is set to 30\nminutes, then a backup of the entity is required to\nbe done every 30 minutes.\n",
                      "format": "int32"
                    },
                    "local_snapshot_retention_policy": {
                      "description": "The following describes the local snapshot retention\npolicy corresponding to the snapshot schedule.\n",
                      "$ref": "#/definitions/snapshot_retention_policy"
                    },
                    "auto_suspend_timeout_secs": {
                      "type": "integer",
                      "description": "Auto suspend timeout in case of connection failure\nbetween the sites. If not set, then policy will not be\nsuspended in case of site connection failure.\n",
                      "format": "int32"
                    },
                    "snapshot_type": {
                      "x-ntnx-enum": [
                        "CRASH_CONSISTENT",
                        "APPLICATION_CONSISTENT"
                      ],
                      "type": "string",
                      "description": "Crash consistent or Application Consistent snapshot\n"
                    },
                    "remote_snapshot_retention_policy": {
                      "description": "The following describes the snapshot retention policy\nfor a given replication target availability zone.\n",
                      "$ref": "#/definitions/snapshot_retention_policy"
                    }
                  }
                },
                "type": "array",
                "description": "Snapshot schedules for the pair of the availability zones.\n"
              }
            }
          },
          "type": "array",
          "description": "This encodes the datapipes between various availability zones and\nthe backup policy of the pipes. For example, [1, 2, 3600],\n[2, 3, 3600], [4, 5, 15000], [2, 6, 4200]. Note 2 here means\nthe entry at index 2 in the ordered_availability_zone_list.\nAnd 3600 is the RPO (Recovery Point Objective) in seconds between\nthe two availability zones.\n"
        },
        "ordered_availability_zone_list": {
          "items": {
            "type": "object",
            "properties": {
              "cluster_uuid": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string",
                "description": "UUID of specific cluster to which we will be replicating.\nThis need to set only if availability zone is of type PC.\n"
              },
              "availability_zone_url": {
                "type": "string",
                "description": "The FQDN or IP address of the availability zone. Every\nPrism Central deployment acts as an availability zone.\n"
              }
            }
          },
          "type": "array",
          "description": "A list of availability zones, each of which, receives a replica\nof the data for the entities protected by this protection rule.\nThe order of the availability zones in the list determines the\npreference order (highest to lowest) for the entity to run in the\ncase of failure of one or more availability zones. For example,\nif this list is [A, B, C, D], then the entity will prefer to run\non A unless A has failed, in which case, the entity will run on\nthe second choice, B. Failover of the entity is not automatic but\nthis information is used by DR runbook to failover an entity to\nthe desired availability zone.\n"
        },
        "primary_location_list": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "List of indexes in ordered_availability_zone_list, which constitutes\nthe primary locations of this Protection Rule.\n"
        },
        "category_filter": {
          "description": "Filters for entities to be included for protection.",
          "$ref": "#/definitions/category_filter"
        }
      },
      "title": "Protection Rule resources"
    },
    "image_placement_policy_resources": {
      "description": "Describes the image placement policy spec resource object",
      "required": [
        "image_entity_filter",
        "cluster_entity_filter"
      ],
      "type": "object",
      "properties": {
        "cluster_entity_filter": {
          "description": "Category list for filtering clsuters",
          "$ref": "#/definitions/placement_entity_filter"
        },
        "image_entity_filter": {
          "description": "Category list for filtering images",
          "$ref": "#/definitions/placement_entity_filter"
        },
        "placement_type": {
          "x-ntnx-enum": [
            "AT_LEAST",
            "EXACTLY"
          ],
          "type": "string",
          "description": "Describes the image placement semantic. AT_LEAST semantics defines that the image will be attempted to be placed in the set of clusters specified by the cluster category filter but at the same time Image will still be allowed to be copied to other cluster not specified as part of the cluster category filter (for example as a result of VM create workflow). In EXACTLY semantics copying image to any cluster not part of cluster category filter will not be allowed.\n"
        }
      },
      "title": "Image placement policy spec resources"
    },
    "runbook_marketplace_clone_input": {
      "description": "Clone Marketplace Runbook request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/runbook_marketplace_clone_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "Clone Marketplace Runbook request."
    },
    "vpc_resources": {
      "description": "VPC resources",
      "type": "object",
      "properties": {
        "common_domain_name_server_ip_list": {
          "items": {
            "$ref": "#/definitions/address"
          },
          "type": "array",
          "description": "List of domain name server IPs."
        },
        "external_subnet_list": {
          "items": {
            "$ref": "#/definitions/external_subnet"
          },
          "type": "array",
          "description": "List of external subnets attached to this VPC."
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones in Xi from which resources are derived (Only supported on Xi)\n"
        }
      },
      "title": "VPC resources"
    },
    "aws_mixed_image_metadata": {
      "description": "The aws_mixed_image kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_mixed_image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_mixed_image"
          ]
        }
      },
      "title": "aws_mixed_image metadata"
    },
    "subnet": {
      "description": "An intentful representation of a subnet spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "subnet Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for subnet.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/subnet_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "subnet Intent Spec with placement specified"
    },
    "app_variable_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_variable",
          "x-ntnx-enum": [
            "app_variable"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_variable list output"
    },
    "app_variable_share_intent_input": {
      "description": "An intentful representation of a App variable",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_variable_share"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_variable_metadata"
        }
      },
      "title": "App variable Intent Entity"
    },
    "vmware_library_item_entities": {
      "description": "Restful represtation of the entity response",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "type": "object",
          "properties": {
            "resources": {
              "$ref": "#/definitions/vmware_library_item_resource"
            }
          }
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "kind": {
              "readOnly": true,
              "type": "string",
              "description": "The kind name"
            }
          }
        }
      },
      "title": "Entity Response"
    },
    "app_task_response": {
      "description": "Task definition for Application.",
      "required": [
        "name",
        "uuid",
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Task for Application"
    },
    "mpi_patch_validate_environment_profile_pair_response": {
      "description": "The result of patching validation for an app-profile and environment pair",
      "required": [
        "environment",
        "app_profile",
        "state"
      ],
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/entity_reference"
        },
        "app_profile": {
          "$ref": "#/definitions/entity_reference"
        },
        "state": {
          "type": "string",
          "description": "Whether the app-profile and environment pair is valid for patching"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "The result of patching validation for an app-profile and environment pair"
    },
    "app_saas_consumption_intent_resource": {
      "description": "Response object for intentful operations on a app_saas_consumption",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_saas_consumption_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_saas_consumption"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_saas_consumption_metadata"
        }
      },
      "title": "app_saas_consumption Intent Response"
    },
    "recovery_plan_def_status": {
      "description": "Recovery Plan status",
      "required": [
        "name",
        "resources",
        "recovery_availability_zone_order_list"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Recovery Plan name"
        },
        "recovery_availability_zone_order_list": {
          "items": {
            "required": [
              "availability_zone_url"
            ],
            "type": "object",
            "properties": {
              "availability_zone_url": {
                "type": "string",
                "description": "URL of the Availability Zone.\n"
              },
              "availability_zone_order_list": {
                "items": {
                  "properties": {
                    "availability_zone_list": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "cluster": {
                            "type": "string",
                            "description": "UUID of the cluster.\n"
                          },
                          "availability_zone_url": {
                            "type": "string",
                            "description": "URL of the Availability Zone.\n"
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of Availability Zones."
                    }
                  }
                },
                "type": "array",
                "description": "List of recovery Availability Zone orders for entities in the Recovery Plan. More than one entry in this list indicates entities in Recovery Plan are protected by the Protection Rules with different recovery Availability Zone order and makes Recovery Plan invalid.\n"
              }
            }
          },
          "type": "array",
          "description": "List of recovery Availability Zones order list. Each unique Availability Zone order list will be reported. A cluster might also be specified for each Availability Zone in the Availability Zones order list, in case the entity is protected for replication to/from a cluster in the Protection Policy.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "state": {
          "type": "string",
          "description": "The state of the Recovery Plan entity."
        },
        "latest_validation_time": {
          "type": "string",
          "description": "Time when latest validation was done for Recovery Plan.",
          "format": "date-time"
        },
        "latest_test_time": {
          "type": "string",
          "description": "Time when latest test was done for Recovery Plan.",
          "format": "date-time"
        },
        "resources": {
          "$ref": "#/definitions/recovery_plan_resources"
        },
        "description": {
          "type": "string",
          "description": "A description or user annotation for the Recovery Plan."
        }
      },
      "title": "Recovery Plan status"
    },
    "groups_sort_order": {
      "x-ntnx-enum": [
        "ASCENDING",
        "DESCENDING"
      ],
      "type": "string",
      "description": "Sort order for entities and entity groups.",
      "title": "Entities Request Sort Order"
    },
    "blueprint_metadata": {
      "description": "The blueprint kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when blueprint was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "blueprint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "blueprint"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "blueprint uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the blueprint is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when blueprint was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the blueprint. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the blueprint. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "blueprint name",
          "maxLength": 80
        }
      },
      "title": "blueprint metadata"
    },
    "network_group_tunnel_vm_intent_input": {
      "description": "An intentful representation of a network_group_tunnel_vm",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/network_group_tunnel_vm"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_tunnel_vm_metadata"
        }
      },
      "title": "network_group_tunnel_vm Intent Entity"
    },
    "app_deployment_response": {
      "description": "Deployment definition for Application.",
      "required": [
        "uuid",
        "name",
        "min_replicas",
        "max_replicas",
        "state",
        "substrate_configuration",
        "message_list",
        "element_list",
        "current_replicas"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "service_list": {
          "items": {
            "$ref": "#/definitions/app_service_response"
          },
          "type": "array",
          "description": "List of references for services"
        },
        "substrate_configuration": {
          "$ref": "#/definitions/app_substrate_response"
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "config_reference": {
          "$ref": "#/definitions/app_blueprint_deployment_reference"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for deployment"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_deployment_element"
          },
          "type": "array"
        },
        "package_list": {
          "items": {
            "$ref": "#/definitions/app_package_response"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "current_replicas": {
          "type": "integer"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "published_service_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_input"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        }
      },
      "title": "Deployment Definition for Application."
    },
    "app_engine_runlog_status_input": {
      "description": "Runlog status input",
      "required": [
        "trl_uuid"
      ],
      "type": "object",
      "properties": {
        "trl_uuid": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Runlog status input"
    },
    "app_credential_reference": {
      "description": "The reference to a app_credential",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_credential",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_credential"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_credential"
    },
    "network_group_list_intent_response": {
      "description": "Response object for intentful operation of network_groups",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/network_group_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "replication_connection_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "replication_connection",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "replication_connection"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "environment_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "environment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "environment"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "image_intent_input": {
      "description": "An intentful representation of a image",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/image"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/image_metadata"
        }
      },
      "title": "image Intent Entity"
    },
    "app_deployment_element": {
      "description": "Deployment definition for Application",
      "required": [
        "substrate_element_local_reference"
      ],
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "description": "Array index of this element"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "package_element_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_package_reference"
          },
          "type": "array",
          "description": "List of references for packages"
        },
        "substrate_element_local_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        }
      },
      "title": "Deployment for Application"
    },
    "xi_image_item": {
      "description": "Image resource in Xi",
      "required": [
        "name",
        "image_type"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "image Name.",
          "maxLength": 64
        },
        "image_type": {
          "$ref": "#/definitions/image_type"
        },
        "checksum": {
          "description": "Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n",
          "$ref": "#/definitions/checksum"
        },
        "source_uri": {
          "type": "string",
          "description": "The source URI points at the location of a the source image which is used to create/update image.\n"
        },
        "initial_placement_ref_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "List of clusters where image is requested to be placed at time of creation. This argument will not be honored at time of update.\n"
        },
        "version": {
          "description": "The image version",
          "$ref": "#/definitions/image_version_resources"
        },
        "architecture": {
          "description": "Indicates the CPU architecture that the image is compatible with. If this is not specified for an image this will default to the CPU architecture type of the cluster.\n",
          "$ref": "#/definitions/image_architecture"
        },
        "data_source_reference": {
          "description": "Reference to VM disk. The expected kind for VMs Disk is vm_disk. The uuid should be the disk device uuid, where the disk device is from disk_list from VM status.\n",
          "$ref": "#/definitions/reference"
        },
        "source_options": {
          "$ref": "#/definitions/source_options"
        }
      },
      "title": "Image resource in Xi"
    },
    "app_icon_intent_response": {
      "description": "Response object for intentful operations on a app_icon",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_icon_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_icon"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_metadata"
        }
      },
      "title": "app_icon Intent Response"
    },
    "app_icon_summary_metadata": {
      "description": "The app_icon_summary kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_icon_summary was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_icon_summary",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon_summary"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_icon_summary uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_icon_summary is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_icon_summary was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_icon_summary. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_icon_summary. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_icon_summary name",
          "maxLength": 80
        }
      },
      "title": "app_icon_summary metadata"
    },
    "policy_action_type_intent_response": {
      "description": "Response object for intentful operations on a policy_action_type",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_action_type_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy_action_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_action_type_metadata"
        }
      },
      "title": "policy_action_type Intent Response"
    },
    "aws_machine_type_resources_def_status": {
      "description": "aws_machine_type resources",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The machine type name."
        }
      },
      "title": "aws_machine_type resources"
    },
    "entity_info": {
      "description": "Entity information",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Entity type"
        },
        "name": {
          "type": "string",
          "description": "Entity name"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "Entity UUID",
          "format": "UUID"
        }
      },
      "title": "Entity name/type/id"
    },
    "app_endpoint_input": {
      "description": "Endpoint definition",
      "required": [
        "uuid",
        "name",
        "type",
        "attrs"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Endpoint definition"
    },
    "blueprint_intent_resource": {
      "description": "Response object for intentful operations on a blueprint",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_def_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Response"
    },
    "app_service_response": {
      "description": "Service definition for Application",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_service_element"
          },
          "type": "array",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_service_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "container_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s continaer spec"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Service for Application"
    },
    "aws_volume_type_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        }
      },
      "title": "Metadata for aws_volume_type list"
    },
    "quota_response": {
      "type": "object",
      "description": "Quota create response object",
      "properties": {
        "status": {
          "$ref": "#/definitions/quota_status"
        },
        "spec": {
          "$ref": "#/definitions/quota_spec"
        },
        "metadata": {
          "$ref": "#/definitions/quota_metadata"
        }
      }
    },
    "task_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "task"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "marketplace_icon_intent_input": {
      "description": "An intentful representation of a marketplace_icon",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/marketplace_icon"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_icon_metadata"
        }
      },
      "title": "marketplace_icon Intent Entity"
    },
    "tunnel_metadata": {
      "description": "The tunnel kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when tunnel was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "tunnel"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "tunnel uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the tunnel is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when tunnel was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the tunnel. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the tunnel. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "tunnel name",
          "maxLength": 80
        }
      },
      "title": "tunnel metadata"
    },
    "mutable_blueprint_intent_response": {
      "description": "Response object of application's blueprint for edit.",
      "required": [
        "api_version",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/mutable_blueprint_def_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Response"
    },
    "app_task_reference": {
      "description": "The reference to a app_task",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_task"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_task"
    },
    "asn": {
      "description": "Autonomous system number",
      "title": "ASN",
      "format": "uint32",
      "maximum": 4294967294,
      "minimum": 0,
      "type": "integer"
    },
    "assignment_rule": {
      "description": "Rule defintion for entity selection.",
      "required": [
        "selection_criteria_list"
      ],
      "type": "object",
      "properties": {
        "exclusion_list": {
          "items": {
            "$ref": "#/definitions/reference"
          },
          "type": "array",
          "description": "List of entities to be excluded from category assignment."
        },
        "inclusion_list": {
          "items": {
            "$ref": "#/definitions/reference"
          },
          "type": "array",
          "description": "List of entities to be included in category assignment."
        },
        "name": {
          "type": "string",
          "description": "Name of the assignment rule.",
          "maxLength": 64
        },
        "selection_criteria_list": {
          "items": {
            "$ref": "#/definitions/selection_criteria"
          },
          "type": "array",
          "description": "List of selection criteria for category assignment."
        },
        "description": {
          "type": "string",
          "description": "Description of the assignment rule.",
          "maxLength": 256
        }
      },
      "title": "Assignment Rule definition."
    },
    "accounts_vms_list_input": {
      "description": "All api calls that return a list should have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "fields": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Fetching vms for the account"
    },
    "runbook_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "recovery_plan_stage": {
      "description": "A stage specifies the work to be performed when the Recovery Plan is executed. A stage work can be execute an user script or recover entities in case of failover. If there are multiple entities to recover in a stage, all of them will be recovered in parallel.\n",
      "required": [
        "stage_work"
      ],
      "type": "object",
      "properties": {
        "stage_work": {
          "description": "Information about work to be performed as part of this stage on execution. Only one of recover_entities or script has to be provided.\n",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "recover_entities"
              ]
            }
          ],
          "properties": {
            "recover_entities": {
              "description": "Information about entities to be recovered. This can be either explicit entity list or entity filter to identify list of entities to be recovered.\n",
              "$ref": "#/definitions/recover_entities"
            }
          }
        },
        "stage_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of stage.",
          "format": "UUID"
        },
        "delay_time_secs": {
          "type": "integer",
          "description": "Amount of time in seconds to delay the execution of next stage after execution of current stage.\n",
          "format": "int64"
        }
      },
      "title": "Information about a stage in the Recovery Plan"
    },
    "network_group_tunnel_resources": {
      "description": "Network Group resources definition.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Calm managed network"
        },
        "platform_vpc_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific vpc uuids managed by the Network Group."
        },
        "platform_subnet_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific subnet uuids managed by the Network Group."
        },
        "account_reference": {
          "description": "Account reference for the Network Group.",
          "$ref": "#/definitions/account_reference"
        },
        "tunnel_reference": {
          "description": "tunnel reference for the Network Group",
          "$ref": "#/definitions/tunnel_reference"
        },
        "created_by": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "tunnel_vm_spec": {
          "description": "VM spec for tunnel vm asssociated with the Network Group",
          "properties": {
            "cluster_uuid": {
              "type": "string",
              "description": "UUID of the cluster where the tunnel vm has to be placed"
            },
            "subnet_uuid": {
              "type": "string",
              "description": "UUID of the subnet which will be used by the tunnel vm"
            },
            "type": {
              "type": "string",
              "description": ""
            },
            "vm_name": {
              "type": "string",
              "description": "VM name for Tunnel VM"
            }
          }
        }
      },
      "title": "Network Group resources"
    },
    "filter": {
      "description": "A filter defines the selection criteria for entities. It consists of two lists of filter expressions. The filter expressions can be of two types, Scope or Entity. The expressions in both these lists are combined with a logical AND.\n",
      "required": [
        "entity_filter_expression_list"
      ],
      "type": "object",
      "properties": {
        "entity_filter_expression_list": {
          "items": {
            "$ref": "#/definitions/entity_filter_expression"
          },
          "type": "array",
          "description": "A list of Entity filter expressions."
        },
        "scope_filter_expression_list": {
          "items": {
            "$ref": "#/definitions/scope_filter_expression"
          },
          "type": "array",
          "description": "A list of Scope filter expressions."
        }
      },
      "title": "Filter."
    },
    "category_value_list_response": {
      "description": "Category Value list response.",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/category_value_status"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/category_list_metadata"
        }
      },
      "title": "Category value list response."
    },
    "policy_action_type_list_intent_response": {
      "description": "Response object for intentful operation of policy_action_types",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/policy_action_type_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_action_type_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "network_group_tunnel_intent_response": {
      "description": "Response object for intentful operations on a network_group_tunnel",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/network_group_tunnel_def_status"
        },
        "spec": {
          "$ref": "#/definitions/network_group_tunnel"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_tunnel_metadata"
        }
      },
      "title": "network_group_tunnel Intent Response"
    },
    "blueprint_launch2_response_status": {
      "description": "Status of the Blueprint launch.",
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "description": "Request id to track the launch process"
        }
      },
      "title": "Status of the Blueprint launch."
    },
    "policy_event_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_event",
          "x-ntnx-enum": [
            "policy_event"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for policy_event list"
    },
    "network_group_tunnel_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_pricing_embedded_input": {
      "description": "Pricing definition for account.",
      "required": [
        "uuid",
        "details",
        "state_cost_list"
      ],
      "type": "object",
      "properties": {
        "details": {
          "description": "Details of the pricing",
          "$ref": "#/definitions/app_pricing_details"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state_cost_list": {
          "items": {
            "$ref": "#/definitions/app_pricing_state_cost"
          },
          "type": "array",
          "description": "List of state based cost"
        }
      },
      "title": "Pricing for account"
    },
    "task_reference_upload": {
      "description": "The reference to a task",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "task"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a task"
    },
    "app_runlog_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runlog",
          "x-ntnx-enum": [
            "app_runlog"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_runlog list"
    },
    "app_profile_reference_upload": {
      "description": "The reference to a app_profile",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_profile",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_profile"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_profile"
    },
    "certificate_spec": {
      "description": "Certificate info",
      "required": [
        "certificate"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Certificate file name",
          "maxLength": 64
        },
        "certificate": {
          "type": "string",
          "description": "Certificate content",
          "format": "byte"
        }
      },
      "title": "Certificate info"
    },
    "image_placement_info": {
      "description": "Information about state of the policy",
      "type": "object",
      "properties": {
        "complete_policy_cluster_reference_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "The complete list of clusters where the image should ideally be placed as part of this policy.\n"
        },
        "enforced_policy_cluster_reference_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "The list of clusters where the image has been placed as part of enforcing this policy.\n"
        },
        "conflicting_image_placement_policy_reference_list": {
          "items": {
            "$ref": "#/definitions/image_placement_policy_reference"
          },
          "type": "array",
          "description": "List of policies that conflict with this policy."
        }
      },
      "title": "Placement policy Information"
    },
    "generate_api_key_input": {
      "description": "Request body for generating API Key",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "should_grant_admin_access": {
          "default": false,
          "type": "boolean",
          "description": "Flag to determine whether to provide admin access or not"
        },
        "name": {
          "type": "string",
          "description": "Name of the key"
        },
        "roles": {
          "items": {
            "description": "Project & role within the project",
            "required": [
              "project_reference",
              "calm_role_reference"
            ],
            "type": "object",
            "properties": {
              "project_reference": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "description": "Project Reference in API format",
                "$ref": "#/definitions/project_reference"
              },
              "calm_role_reference": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "description": "Role Reference in API format",
                "$ref": "#/definitions/role_reference"
              },
              "operation": {
                "default": "ADD",
                "x-ntnx-enum": [
                  "ADD",
                  "UPDATE",
                  "DELETE"
                ],
                "type": "string",
                "description": "Operation to perform"
              }
            },
            "title": "project_role_mapping"
          },
          "type": "array",
          "description": "Roles associated with given key"
        }
      },
      "title": "Generate API Key request"
    },
    "ssl_key": {
      "description": "SSL certificate.",
      "required": [
        "key_type"
      ],
      "type": "object",
      "properties": {
        "key_type": {
          "$ref": "#/definitions/ssl_key_type"
        },
        "key_name": {
          "type": "string"
        },
        "signing_info": {
          "$ref": "#/definitions/certification_signing_info"
        },
        "expire_datetime": {
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when the key expires",
          "format": "date-time"
        }
      },
      "title": "SSL certificate"
    },
    "policy_action_type_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_action_type",
          "x-ntnx-enum": [
            "policy_action_type"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for policy_action_type list output"
    },
    "blueprint_pending_launches_list_response": {
      "description": "Response containing all the bp launch requests which have not completed",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entites": {
          "items": {
            "$ref": "#/definitions/blueprint_pending_launches_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_list_metadata_output"
        }
      },
      "title": "Response containing all the pending bp launches"
    },
    "query_entities_response": {
      "description": "List of entities with their protection status.\n",
      "type": "object",
      "properties": {
        "total_results": {
          "type": "integer",
          "description": "Total number of entities.",
          "format": "int32"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset.",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list.",
          "format": "int32"
        },
        "entity_list": {
          "items": {
            "type": "object",
            "properties": {
              "error_reason_list": {
                "items": {
                  "type": "object",
                  "properties": {
                    "error_code": {
                      "x-ntnx-enum": [
                        "NOT_SUPPORTED",
                        "INCOMPATIBLE",
                        "CONFLICT",
                        "NOT_FOUND",
                        "INTERNAL_ERROR"
                      ],
                      "type": "string",
                      "description": "Error code that represents a group of errors.\n"
                    },
                    "error_string": {
                      "type": "string",
                      "description": "Reason of error."
                    }
                  }
                },
                "type": "array",
                "description": "List of errors because of which protection of entity is not\npossible.\n"
              },
              "entity_reference": {
                "description": "List of references of entities that will be synced.",
                "$ref": "#/definitions/reference"
              },
              "protection_status": {
                "x-ntnx-enum": [
                  "CAN_BE_PROTECTED",
                  "CANNOT_BE_PROTECTED",
                  "PROTECTED"
                ],
                "type": "string",
                "description": "Protection status of the entity. PROTECTED status would mean\nthat the entity is protected by some protection policy.\nCANNOT_BE_PROTECTED would mean that the entities cannot be\nprotected because of some errors, details about the error would\nbe in the error_reason_list. CAN_BE_PROTECTED would mean that\nthere are no errors for this entity and it can be protected.\n"
              },
              "protection_rule_reference": {
                "description": "Protection rule reference through which the entity is\nprotected. Blank if the entity is not protected.\n",
                "$ref": "#/definitions/protection_rule_reference"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "Response of query_entities API"
    },
    "app_task_response_download": {
      "description": "Task definition for Application.",
      "required": [
        "name",
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference_upload"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Task for Application"
    },
    "app_icon_summary_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon_summary",
          "x-ntnx-enum": [
            "app_icon_summary"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_icon_summary list"
    },
    "gcp_list_metadata": {
      "description": "All GCP list calls will have this metadata block as input",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for GCP list calls"
    },
    "blueprint_upload_output": {
      "description": "The UUID of the newly created AppBlueprint",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "uuid of the newly created AppBlueprint",
          "format": "UUID"
        }
      },
      "title": "Upload AppBlueprint output"
    },
    "vm_def_status": {
      "description": "An intentful representation of a vm status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "vm Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the vm."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the vm, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/vm_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for vm."
        }
      },
      "title": "vm Intent Status with placement specified"
    },
    "aws_credentials": {
      "description": "Credentials to access AWS",
      "required": [
        "access_key",
        "secret_key"
      ],
      "type": "object",
      "properties": {
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        }
      },
      "title": "AWS Credentials"
    },
    "app_variable": {
      "description": "An intentful representation of a app_variable spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_variable Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_variable.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_variable_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_variable Intent Spec with placement specified"
    },
    "aws_role_resources_def_status": {
      "description": "aws_role resources",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the AWS role."
        }
      },
      "title": "aws_role resources"
    },
    "app_engine_runlog_task_uuid_response": {
      "description": "App Engine Runlog Task Uuid Response",
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of the task"
        },
        "name": {
          "type": "string",
          "description": "task name"
        },
        "task_id": {
          "type": "string",
          "description": "Uuid of the task",
          "format": "UUID"
        },
        "run_id": {
          "type": "string",
          "description": "Run uuid of the task",
          "format": "UUID"
        },
        "lastmodified": {
          "type": "string",
          "description": "Lastmodified time of the task",
          "format": "date-time"
        },
        "script": {
          "type": "string",
          "description": "Script used in task"
        },
        "exit_code": {
          "type": "string",
          "description": "Exit code of the trl"
        },
        "entity": {
          "type": "string",
          "description": "Entity associated with task"
        },
        "machine": {
          "type": "string",
          "description": "Machine associated with task"
        },
        "reason": {
          "type": "string",
          "description": "Reason for the task status"
        },
        "t_type": {
          "type": "string",
          "description": "Type of the task"
        },
        "created": {
          "type": "string",
          "description": "Creation time of the task",
          "format": "date-time"
        },
        "props": {
          "type": "string",
          "description": "Properties of the task"
        },
        "uuid": {
          "type": "string",
          "description": "Engine uuid of the task",
          "format": "UUID"
        }
      },
      "title": "App Engine Runlog Task Uuid Response"
    },
    "blueprint_pending_launches_resource": {
      "description": "Response object for the launches in progress for app blueprints",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_pending_launches_status"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint launches in progress response"
    },
    "policy_action_type_intent_resource": {
      "description": "Response object for intentful operations on a policy_action_type",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_action_type_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy_action_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_action_type_metadata"
        }
      },
      "title": "policy_action_type Intent Response"
    },
    "policy_event_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_event",
          "x-ntnx-enum": [
            "policy_event"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for policy_event list output"
    },
    "feature_calm_orch_dr": {
      "required": [
        "is_enabled"
      ],
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean",
          "description": "Is policy enabled"
        },
        "ui_visibility": {
          "x-ntnx-enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "description": ""
        }
      }
    },
    "app_variable_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_variable",
          "x-ntnx-enum": [
            "app_variable"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_variable list"
    },
    "resource_type_intent_resource": {
      "description": "Response object for intentful operations on a resource_type",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/resource_type_def_status"
        },
        "spec": {
          "$ref": "#/definitions/resource_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/resource_type_metadata"
        }
      },
      "title": "resource_type Intent Response"
    },
    "recover_entities": {
      "description": "Information about entities to be recovered.\n",
      "required": [
        "entity_info_list"
      ],
      "type": "object",
      "properties": {
        "entity_info_list": {
          "items": {
            "type": "object",
            "x-ntnx-one-of": [
              {
                "required": [
                  "categories"
                ]
              },
              {
                "required": [
                  "any_entity_reference"
                ]
              }
            ],
            "properties": {
              "any_entity_reference": {
                "description": "Information about entity to be recovered.",
                "$ref": "#/definitions/reference"
              },
              "categories": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object",
                "description": "Categories for filtering entities."
              },
              "script_list": {
                "items": {
                  "$ref": "#/definitions/recovery_plan_script_config"
                },
                "type": "array",
                "description": "List of scripts to be executed inside the guest VMs after recovery.\n"
              }
            }
          },
          "type": "array",
          "description": "Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n"
        }
      },
      "title": "Information about entities to be recovered"
    },
    "blueprint_def_status": {
      "description": "An intentful representation of a blueprint status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "blueprint Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the blueprint."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the blueprint, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/blueprint_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for blueprint."
        }
      },
      "title": "blueprint Intent Status with placement specified"
    },
    "approval_request_operation_input": {
      "required": [
        "state",
        "comment",
        "spec_version"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "state": {
          "enum": [
            "APPROVED",
            "REJECTED"
          ],
          "type": "string"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        }
      }
    },
    "aws_image_metadata": {
      "description": "The aws_image kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when aws_image was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "aws_image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_image"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "aws_image uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the aws_image is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when aws_image was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the aws_image. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the aws_image. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_image name",
          "maxLength": 80
        }
      },
      "title": "aws_image metadata"
    },
    "aws_machine_type_def_status": {
      "description": "aws_machine_type resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_machine_type name."
        },
        "resources": {
          "$ref": "#/definitions/aws_machine_type_resources_def_status"
        }
      },
      "title": "aws_machine_type resources status"
    },
    "feature_approval_policy_response": {
      "description": "Response for feature - Approval Policy",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_approval_policy"
            }
          }
        },
        "spec": {
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_approval_policy"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for feature - Approval Policy"
    },
    "network_group_resources": {
      "description": "Network Group resources definition.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Calm managed network"
        },
        "platform_vpc_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific vpc uuids managed by the Network Group."
        },
        "platform_subnet_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific subnet uuids managed by the Network Group."
        },
        "account_reference": {
          "description": "Account reference for the Network Group.",
          "$ref": "#/definitions/account_reference"
        },
        "tunnel_reference": {
          "description": "tunnel reference for the Network Group",
          "$ref": "#/definitions/tunnel_reference"
        },
        "created_by": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Network Group resources"
    },
    "jobs_intent_input": {
      "description": "Restful represtation of the job",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/jobs_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/jobs_metadata"
        }
      },
      "title": "job intent Enitity"
    },
    "policy_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy",
          "x-ntnx-enum": [
            "policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for policy list"
    },
    "aws_key_pair_resources_def_status": {
      "description": "aws_key_pair resources",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the AWS key pair."
        }
      },
      "title": "aws_key_pair resources"
    },
    "app_list_intent_response": {
      "description": "Response object for intentful operation of apps",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "job_reference": {
      "description": "The reference to a job",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "job",
          "readOnly": true,
          "enum": [
            "job"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a job"
    },
    "resource_type_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "resource_type",
          "x-ntnx-enum": [
            "resource_type"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for resource_type list"
    },
    "replication_connection_metadata": {
      "description": "The replication_connection kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when replication_connection was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "replication_connection",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "replication_connection"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "replication_connection uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the replication_connection is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when replication_connection was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the replication_connection. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the replication_connection. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "replication_connection name",
          "maxLength": 80
        }
      },
      "title": "replication_connection metadata"
    },
    "user_group_metadata": {
      "description": "The user_group kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when user_group was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "user_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user_group"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "user_group uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the user_group is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when user_group was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the user_group. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the user_group. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "user_group name",
          "maxLength": 80
        }
      },
      "title": "user_group metadata"
    },
    "host_intent_resource": {
      "description": "Response object for intentful operations on a host",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/host_def_status"
        },
        "spec": {
          "$ref": "#/definitions/host"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/host_metadata"
        }
      },
      "title": "host Intent Response"
    },
    "recovery_plan_policy_reference": {
      "description": "The reference to a recovery_plan_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "recovery_plan_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "recovery_plan_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a recovery_plan_policy"
    },
    "account_resources": {
      "description": "Account resources",
      "required": [
        "type",
        "data"
      ],
      "type": "object",
      "properties": {
        "data": {
          "additionalProperties": true,
          "type": "object",
          "description": "Account data"
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "price_items": {
          "items": {
            "$ref": "#/definitions/app_pricing_embedded_input"
          },
          "type": "array",
          "description": "Pricing for this account"
        },
        "sync_interval_secs": {
          "type": "integer",
          "description": "Sync interval for the account"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "Account resources"
    },
    "policy_event_metadata": {
      "description": "The policy_event kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy_event was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "policy_event",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_event"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "policy_event uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the policy_event is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy_event was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the policy_event. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the policy_event. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "policy_event name",
          "maxLength": 80
        }
      },
      "title": "policy_event metadata"
    },
    "directory_service_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "directory_service",
          "x-ntnx-enum": [
            "directory_service"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for directory_service list output"
    },
    "runbook_download_resources_def_status": {
      "description": "Status of the Runbook.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "default_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_response_download"
          },
          "type": "array",
          "description": "Substrate definitions for Runbook."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/app_endpoint_response_download"
          },
          "type": "array",
          "description": "Endpoint definitions for Runbook."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response_download"
          },
          "type": "array",
          "description": "Credential definitions for Runbook."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for runbook"
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_response_download"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "runbook": {
          "description": "Action runbook\n",
          "$ref": "#/definitions/runbook_runbook_response_download"
        },
        "type": {
          "type": "string",
          "description": "Type of runbook",
          "maxLength": 64
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Cloned or original runbook"
        }
      },
      "title": "Status of the Runbook."
    },
    "app_task_metadata": {
      "description": "The app_task kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_task was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_task"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_task uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_task is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_task was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_task. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_task. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_task name",
          "maxLength": 80
        }
      },
      "title": "app_task metadata"
    },
    "endpoint_upload_custom_intent_input": {
      "description": "An intentful representation of an endpoint",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/endpoint_upload"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "Endpoint Intent Entity"
    },
    "aws_region_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_region",
          "x-ntnx-enum": [
            "aws_region"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_region list output"
    },
    "app_cost_input": {
      "description": "Cost definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "interval",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "interval": {
          "x-ntnx-enum": [
            "HOUR",
            "WEEK",
            "MONTH"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LIVE",
            "STATIC"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Cost for Application"
    },
    "app_engine_runlog_list_response": {
      "description": "App Engine Runlog List Response",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_engine_runlog_response"
          },
          "type": "array"
        }
      },
      "title": "App Engine Runlog List Response"
    },
    "app_variable_response_download": {
      "description": "Variable definition for application.",
      "required": [
        "name",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for variable"
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Variable definition for application."
    },
    "network_group_tunnel_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel",
          "x-ntnx-enum": [
            "network_group_tunnel"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for network_group_tunnel list"
    },
    "app_service_reference": {
      "description": "The reference to a app_service",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_service"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_service"
    },
    "jobs_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "job",
          "x-ntnx-enum": [
            "job"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for job list output"
    },
    "aws_mixed_image_list_response": {
      "description": "AWS Mixed image entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_mixed_image_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_mixed_image_list_metadata_output"
        }
      },
      "title": "aws_mixed_image entity list"
    },
    "directory_service_user_group_status": {
      "description": "A Directory Service user group.",
      "type": "object",
      "properties": {
        "distinguished_name": {
          "type": "string",
          "description": "The Distinguished name for the user group."
        },
        "directory_service_reference": {
          "description": "The directory service that this user group belongs to.",
          "$ref": "#/definitions/directory_service_reference"
        }
      },
      "title": "A Directory Service user group."
    },
    "proxy_login_output": {
      "description": "Response containing the Auth token and expiry",
      "required": [
        "ntnx_igw_session",
        "expires"
      ],
      "type": "object",
      "properties": {
        "expires": {
          "type": "string"
        },
        "ntnx_igw_session": {
          "type": "string"
        }
      },
      "title": "Proxy Login Response"
    },
    "vm_metadata": {
      "description": "The vm kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vm was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "vm uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the vm is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vm was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the vm. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the vm. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "vm name",
          "maxLength": 80
        }
      },
      "title": "vm metadata"
    },
    "meter_list_response": {
      "type": "object",
      "description": "Response object from the meter service",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/meter_list_response_entity"
          },
          "type": "array"
        },
        "message_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "length": {
              "type": "number"
            },
            "total": {
              "type": "number"
            },
            "offset": {
              "type": "number"
            }
          }
        }
      }
    },
    "vpc_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vpc",
          "x-ntnx-enum": [
            "vpc"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for vpc list output"
    },
    "subnet_resources_def_status": {
      "description": "Subnet creation/modification status.",
      "type": "object",
      "properties": {
        "subnet_type": {
          "x-ntnx-enum": [
            "VLAN",
            "OVERLAY"
          ],
          "type": "string"
        },
        "vpc_reference": {
          "description": "The VPC this subnet belongs to (Only supported on Xi).\n",
          "$ref": "#/definitions/vpc_reference"
        },
        "is_external": {
          "type": "boolean",
          "description": "Whether the subnet is external subnet or not."
        },
        "vswitch_name": {
          "type": "string"
        },
        "network_function_chain_reference": {
          "$ref": "#/definitions/network_function_chain_reference"
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones from which resources are derived (Only supported on Xi).\n"
        },
        "virtual_network_reference": {
          "description": "The virtual network this subnet belongs to (Only supported on Xi). This reference is deprecated, use vpc_reference instead.\n",
          "$ref": "#/definitions/virtual_network_reference"
        },
        "external_connectivity_state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "External connectivity state (Only supported on Xi)"
        },
        "vlan_id": {
          "type": "integer",
          "format": "int32"
        },
        "ip_config": {
          "$ref": "#/definitions/ip_config"
        }
      },
      "title": "Subnet creation/modification status"
    },
    "aws_availability_zone_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_availability_zone",
          "x-ntnx-enum": [
            "aws_availability_zone"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_availability_zone list output"
    },
    "policy_resources_def_status": {
      "description": "Policy resources",
      "required": [
        "event_reference"
      ],
      "type": "object",
      "properties": {
        "condition_list": {
          "items": {
            "$ref": "#/definitions/condition_object"
          },
          "type": "array",
          "description": "List of Critria"
        },
        "action_reference_list": {
          "items": {
            "$ref": "#/definitions/action_reference"
          },
          "type": "array",
          "description": "Actions for this policy"
        },
        "category_list": {
          "additionalProperties": true,
          "type": "object",
          "description": "Categories for the policy. This allows assigning the policy to specific entities\n"
        },
        "enabled": {
          "default": false,
          "type": "boolean",
          "description": "If this is false then policy will not be applied. To use this policy this value has to be set to True.\n"
        },
        "priority": {
          "type": "integer",
          "description": "Priority of this policy"
        },
        "event_reference": {
          "$ref": "#/definitions/policy_event_reference"
        }
      },
      "title": "Policy resources"
    },
    "app_icon_summary_intent_input": {
      "description": "An intentful representation of a app_icon_summary",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_icon_summary"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_summary_metadata"
        }
      },
      "title": "app_icon_summary Intent Entity"
    },
    "aws_vpc_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_vpc",
          "x-ntnx-enum": [
            "aws_vpc"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_vpc list output"
    },
    "approval_request_list_intent_response": {
      "description": "Response object for intentful operation of approval_requests",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/approval_request_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/approval_request_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "account_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "account",
          "x-ntnx-enum": [
            "account"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for account list output"
    },
    "app_icon_summary_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon_summary",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon_summary"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "aws_image_resources_def_status": {
      "description": "AWS image resources",
      "type": "object",
      "properties": {
        "root_device_type": {
          "type": "string",
          "description": "Root device type (e.g. ebs, instance-store)"
        },
        "hypervisor": {
          "type": "string",
          "description": "The supported hypervisor."
        },
        "virtualization_type": {
          "type": "string",
          "description": "Type of virtualization supported."
        },
        "platform": {
          "type": "string",
          "description": "Platform of the image (e.g. Windows)"
        },
        "root_device_name": {
          "type": "string",
          "description": "Root device name (e.g. /dev/sda1, /dev/sda2)"
        },
        "id": {
          "pattern": "^ami-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the AMI."
        },
        "architecture": {
          "type": "string",
          "description": "Architecture of the AWS image (e.g. i386, x86_64)"
        }
      },
      "title": "AWS image resources"
    },
    "mh_vm_resources_def_status": {
      "description": "VM Resources Status Definition.",
      "type": "object",
      "properties": {
        "hypervisor_specific_id": {
          "type": "string",
          "description": "The hypervisor specific ID of the VM.\n"
        },
        "host_reference": {
          "$ref": "#/definitions/reference"
        },
        "guest_tools": {
          "description": "Information regarding guest tools.",
          "$ref": "#/definitions/guest_tools_status"
        },
        "hypervisor_type": {
          "x-ntnx-enum": [
            "ESX",
            "AHV"
          ],
          "type": "string",
          "description": "The hypervisor type for the hypervisor the VM is hosted on.\n"
        },
        "storage_config": {
          "description": "Storage configuration of the VM.",
          "$ref": "#/definitions/mh_vm_storage_config_status"
        },
        "protection_type": {
          "x-ntnx-enum": [
            "UNPROTECTED",
            "PD_PROTECTED",
            "RULE_PROTECTED"
          ],
          "type": "string",
          "description": "The type of protection applied on a VM. PD_PROTECTED indicates a VM protected using Prism Element. RULE_PROTECTED indicates a VM protected using Prism Central.\n"
        },
        "parent_reference": {
          "$ref": "#/definitions/reference"
        },
        "recovery_plan_state_list": {
          "items": {
            "$ref": "#/definitions/recovery_plan_policy_state"
          },
          "type": "array",
          "description": "Status of the Recovery Plans associated with the VM."
        },
        "protection_policy_state": {
          "description": "Status of protection policy applied to this VM.\n",
          "$ref": "#/definitions/protection_policy_state"
        }
      },
      "title": "VM Resources Status Definition"
    },
    "mutable_app_substrate_response": {
      "description": "Substrate info for deployment",
      "required": [
        "uuid",
        "name",
        "type",
        "variable_list",
        "action_list",
        "state"
      ],
      "type": "object",
      "properties": {
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        },
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe"
        },
        "config_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_element"
          },
          "type": "array",
          "description": ""
        },
        "mutable_fields": {
          "description": "Fields allowed at blueprint level in the application.",
          "type": "object",
          "properties": {
            "create_spec": {
              "type": "object",
              "$ref": "#/definitions/mutable_fields_object"
            }
          },
          "title": "Substrate Mutable Fields"
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "os_type": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Deployment Sustrate Definition for Application."
    },
    "app_substrate_response": {
      "description": "Substrate info for deployment",
      "required": [
        "uuid",
        "name",
        "type",
        "variable_list",
        "action_list",
        "state"
      ],
      "type": "object",
      "properties": {
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        },
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe"
        },
        "config_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_element"
          },
          "type": "array",
          "description": ""
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "os_type": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Deployment Sustrate Definition for Application."
    },
    "project": {
      "description": "A Project resource.",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Project name.",
          "maxLength": 64
        },
        "resources": {
          "type": "object",
          "properties": {
            "resource_domain": {
              "$ref": "#/definitions/resource_domain_spec"
            },
            "account_reference_list": {
              "items": {
                "$ref": "#/definitions/account_reference"
              },
              "type": "array",
              "description": "List of accounts associated with the project."
            },
            "environment_reference_list": {
              "items": {
                "$ref": "#/definitions/environment_reference"
              },
              "type": "array",
              "description": "List of environments associated with the project."
            },
            "default_subnet_reference": {
              "description": "Optional default subnet if one is specified",
              "$ref": "#/definitions/subnet_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "List of users in the project."
            },
            "tunnel_reference_list": {
              "items": {
                "$ref": "#/definitions/tunnel_reference"
              },
              "type": "array",
              "description": "List of tunnels associated with the project."
            },
            "external_user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
            },
            "subnet_reference_list": {
              "items": {
                "$ref": "#/definitions/subnet_reference"
              },
              "type": "array",
              "description": "List of subnets for the project."
            },
            "external_network_list": {
              "items": {
                "$ref": "#/definitions/external_network"
              },
              "type": "array",
              "description": "List of external networks associated with the project."
            },
            "default_environment_reference": {
              "description": "Optional default environment if one is specified",
              "$ref": "#/definitions/environment_reference"
            }
          },
          "title": "Project Resources"
        },
        "description": {
          "type": "string",
          "description": "Project description.",
          "maxLength": 1000
        }
      },
      "title": "Project resource spec"
    },
    "marketplace_icon_resources_def_status": {
      "description": "App icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "App Icon type"
        },
        "link": {
          "type": "string",
          "description": "App Icon link"
        },
        "uuid": {
          "type": "string",
          "description": "App Icon uuid",
          "format": "UUID"
        }
      },
      "title": "App icon resources"
    },
    "app_icon_summary_resources_def_status": {
      "description": "App icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "App Icon type"
        },
        "link": {
          "type": "string",
          "description": "App Icon link"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App Icon uuid",
          "format": "UUID"
        }
      },
      "title": "App icon resources"
    },
    "config_input_upload": {
      "description": "config definition for target object.",
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "is_system_generated": {
          "default": false,
          "type": "boolean"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": "List of variables"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "attrs_list": {
          "items": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": "array"
        },
        "runbook": {
          "$ref": "#/definitions/app_runbook_input_upload"
        },
        "type": {
          "x-ntnx-enum": [
            "AHV_SNAPSHOT",
            "AHV_RESTORE",
            "PATCH"
          ],
          "type": "string",
          "description": ""
        },
        "config_reference_list": {
          "items": {
            "$ref": "#/definitions/app_config_spec_reference_upload"
          },
          "type": "array"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "config definition for target object."
    },
    "protection_rule": {
      "description": "protection Rule creation/modification spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Protection Rule name",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/protection_rule_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for the protection rule.",
          "maxLength": 1000
        }
      },
      "title": "Protection Rule creation/modification spec"
    },
    "packet_trace_input": {
      "description": "Input parameters to run the packet trace. Required parameters\nare the source IP Address and destination IP Address. Optional\nparameters include the source port, destination port, the L4\nprotocol(TCP/UDP/ICMP), and the ICMP type and ICMP code if the\nL4 protocol for the trace is ICMP.\n",
      "required": [
        "source_ip",
        "destination_ip"
      ],
      "type": "object",
      "properties": {
        "icmp_code": {
          "minimum": 0,
          "type": "integer",
          "description": "ICMP code",
          "maximum": 255
        },
        "destination_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Destination IP Address"
        },
        "protocol": {
          "type": "integer",
          "description": "L4 Protocol"
        },
        "source_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Source IP Address"
        },
        "source_port": {
          "minimum": 0,
          "type": "integer",
          "description": "Source port",
          "maximum": 65535
        },
        "destination_port": {
          "minimum": 0,
          "type": "integer",
          "description": "Destination port",
          "maximum": 65535
        },
        "icmp_type": {
          "minimum": 0,
          "type": "integer",
          "description": "ICMP type",
          "maximum": 255
        }
      },
      "title": "Packet Trace Input"
    },
    "app_icon_metadata": {
      "description": "The app_icon kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_icon was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_icon uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_icon is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_icon was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_icon. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_icon. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_icon name",
          "maxLength": 80
        }
      },
      "title": "app_icon metadata"
    },
    "app_task_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_task"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "cluster_synchronous_replication_capable_input": {
      "description": "Input object for API to check if a remote cluster is capable of\nsynchronous replication.\n",
      "required": [
        "remote_cluster_reference",
        "remote_availability_zone_reference"
      ],
      "type": "object",
      "properties": {
        "remote_availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "remote_cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "source_cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "Input schmea for synchronous_replication_capable API."
    },
    "aws_vpc_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_vpc_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_vpc_list_metadata_output"
        }
      },
      "title": "aws_vpc entity list"
    },
    "checksum_algorithm": {
      "x-ntnx-enum": [
        "SHA_256",
        "SHA_1"
      ],
      "type": "string",
      "description": "The type of checksum calculated for the image",
      "title": "Checksum algorithm"
    },
    "job_executable_reference": {
      "description": "The reference to a job executable",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "job_executable",
          "readOnly": true,
          "enum": [
            "job_executable"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a job executable"
    },
    "vm_recovery_point": {
      "description": "The input object that defines a vm recovery point.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the recovery point.",
          "maxLength": 64
        },
        "cluster_reference": {
          "description": "Reference to the cluster in the availability zone where this recovery\npoint is located.\n",
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "type": "object",
          "properties": {
            "source_cluster_reference": {
              "description": "Reference to the cluster in the source availability zone.\n",
              "$ref": "#/definitions/cluster_reference"
            },
            "source_availability_zone_reference": {
              "description": "Reference to the availability zone where the source recovery\npoint exists. This need to be set to copy a recovery from some\nother location.\n",
              "$ref": "#/definitions/availability_zone_reference"
            },
            "parent_vm_reference": {
              "description": "Reference to vm that this recovery point is a snapshot of.\n",
              "$ref": "#/definitions/vm_reference"
            },
            "recovery_point_type": {
              "x-ntnx-enum": [
                "CRASH_CONSISTENT",
                "APPLICATION_CONSISTENT",
                "LIVE"
              ],
              "type": "string",
              "description": "Crash consistent or Application Consistent recovery point"
            },
            "creation_time": {
              "type": "string",
              "description": "The time when the the recovery point is created. This is in internet\ndate/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z,\nthis represents 20 minutes and 50.52 seconds after the 23rd hour of\nApril 12th, 1985 in UTC.\n",
              "format": "date-time"
            },
            "vm_recovery_point_location_agnostic_uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "description": "Location agnostic UUID of the recovery point. If a recovery\npoint is replicated to a different clusters, then all the\ninstances of same recovery point will share this UUID.\n"
            },
            "expiration_time": {
              "type": "string",
              "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T23:20:50.52Z, this represents 20 minutes and\n50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not\nset, then the recovery point never expires.\n",
              "format": "date-time"
            }
          },
          "title": "Recovery point resources"
        },
        "availability_zone_reference": {
          "description": "Reference to the availability zone where this recovery point is\nlocated\n",
          "$ref": "#/definitions/availability_zone_reference"
        }
      },
      "title": "vm recovery point input definitions"
    },
    "environment_usage_def": {
      "description": "Environment usage definition",
      "type": "object",
      "properties": {
        "blueprint": {
          "type": "integer",
          "description": "Number of blueprints associated with environment"
        },
        "app": {
          "type": "integer",
          "description": "Number of apps associated with environment"
        }
      },
      "title": "Environment usage definition"
    },
    "access_control_policy_def_status": {
      "description": "Access Control Policy status definition.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the Access Control Policy entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Name of the Access Control Policy."
        },
        "resources": {
          "type": "object",
          "properties": {
            "role_reference": {
              "description": "The Role being assigned to a given user(s).",
              "$ref": "#/definitions/role_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "The User(s) being assigned a given role."
            },
            "filter_list": {
              "description": "The list of filters, which define the entities.\n",
              "type": "object",
              "x-ntnx-one-of": [
                {
                  "required": [
                    "context_list"
                  ]
                }
              ],
              "properties": {
                "context_list": {
                  "items": {
                    "$ref": "#/definitions/filter"
                  },
                  "type": "array",
                  "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                }
              }
            },
            "user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "The User group(s) being assigned a given role."
            }
          },
          "title": "Access Control Policy Resources."
        },
        "description": {
          "type": "string",
          "description": "The description of the association of a role to a user in a given context."
        }
      },
      "title": "Access Control Policy status definition."
    },
    "condition_object": {
      "description": "Actions of the Policy are executed only if this condition is satisfied",
      "required": [
        "attribute_name",
        "criteria_list"
      ],
      "type": "object",
      "properties": {
        "criteria_list": {
          "items": {
            "required": [
              "lhs",
              "operator",
              "rhs",
              "is_primary"
            ],
            "type": "object",
            "properties": {
              "operator": {
                "type": "string"
              },
              "is_primary": {
                "type": "boolean"
              },
              "rhs": {
                "type": "string"
              },
              "lhs": {
                "type": "string"
              }
            }
          },
          "type": "array"
        },
        "attribute_name": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Condition of the policy"
    },
    "runbook_runlog_list": {
      "description": "Runlog entity list of the app",
      "required": [
        "metadata",
        "api_version"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/runbook_runlog_response"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_runlog_list_metadata"
        }
      },
      "title": "runlog entity list"
    },
    "aws_availability_zone_resources_def_status": {
      "description": "aws_availability_zone resources",
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "Name of the region the zone belongs to."
        },
        "state": {
          "x-ntnx-enum": [
            "AVAILABLE",
            "INFORMATION",
            "IMPAIRED",
            "UNAVAILABLE"
          ],
          "type": "string",
          "description": "The state of the availability zone."
        },
        "name": {
          "type": "string",
          "description": "Name of the AWS availability zone."
        }
      },
      "title": "aws_availability_zone resources"
    },
    "protection_policy_state": {
      "description": "State of enforced policy on an entity.",
      "required": [
        "compliance_status",
        "enforcement_mode",
        "policy_reference"
      ],
      "type": "object",
      "properties": {
        "policy_reference": {
          "$ref": "#/definitions/reference"
        },
        "policy_info": {
          "$ref": "#/definitions/protection_info"
        },
        "compliance_status": {
          "description": "This field indicates whether the given entity is compliant with the specified policy or not. It will be in unknown state if the current compliance state is not known.\n",
          "$ref": "#/definitions/policy_compliance_state"
        },
        "enforcement_mode": {
          "x-ntnx-enum": [
            "MONITORING",
            "ENFORCING",
            "ENFORCEMENT_FAILED"
          ],
          "type": "string",
          "description": "Policy enforcement mode informs us about what the policy engine is currently doing to enforce the policy on the entity. Monitoring indicates that the policy engine is simply monitoring the entity's state. Enforcing means that the policy engine is currently trying to enforce the policy on the entity. Enforcement failed indicates that the policy engine encountered a non-transient error and requires user intervention to fix the problem, error message gives the reason for error in this case.\n"
        },
        "error_message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "Policy State"
    },
    "host_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "host",
          "x-ntnx-enum": [
            "host"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for host list"
    },
    "identity_provider_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "identity_provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "identity_provider"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "account_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "account",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "account"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "recovery_plan_floating_ip_config": {
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IP to be assigned to VM, in case of failover.\n"
        },
        "should_allocate_dynamically": {
          "type": "boolean",
          "description": "Whether to allocate the floating IPs for the VMs dynamically.\n"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "ip"
          ]
        },
        {
          "required": [
            "should_allocate_dynamically"
          ]
        }
      ],
      "type": "object",
      "description": "Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n",
      "title": "Floating IP configuration for a VM\n"
    },
    "image_placement_policy_def_status": {
      "description": "Image placement policy status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the image placement policy."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the image placement policy, if in an error state."
        },
        "name": {
          "type": "string",
          "description": "Image placement policy name."
        },
        "resources": {
          "$ref": "#/definitions/image_placement_policy_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for image placement policy."
        }
      },
      "title": "Image placement policy status"
    },
    "app_service_response_download": {
      "description": "Service definition for Application",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_service_element"
          },
          "type": "array",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_service_reference_upload"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "container_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s continaer spec"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Service for Application"
    },
    "recovery_plan_resources": {
      "description": "Recovery Plan resources",
      "type": "object",
      "properties": {
        "stage_list": {
          "items": {
            "$ref": "#/definitions/recovery_plan_stage"
          },
          "type": "array",
          "description": "Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task. For example, a stage can perform the recovery of the entities specified in a stage.\n"
        },
        "parameters": {
          "type": "object",
          "description": "Parameters for the Recovery Plan.\n",
          "properties": {
            "floating_ip_assignment_list": {
              "items": {
                "required": [
                  "availability_zone_url"
                ],
                "type": "object",
                "properties": {
                  "availability_zone_url": {
                    "type": "string",
                    "description": "URL of the Availability Zone.\n"
                  },
                  "vm_ip_assignment_list": {
                    "items": {
                      "required": [
                        "vm_reference",
                        "vm_nic_information"
                      ],
                      "type": "object",
                      "properties": {
                        "test_floating_ip_config": {
                          "description": "Configuration for floating IP assignment on test failover.\n",
                          "$ref": "#/definitions/recovery_plan_floating_ip_config"
                        },
                        "recovery_floating_ip_config": {
                          "description": "Configuration for floating IP assignment on failover.\n",
                          "$ref": "#/definitions/recovery_plan_floating_ip_config"
                        },
                        "vm_reference": {
                          "description": "Reference to the VM entity.",
                          "$ref": "#/definitions/vm_reference"
                        },
                        "vm_nic_information": {
                          "required": [
                            "uuid"
                          ],
                          "type": "object",
                          "description": "Information about vnic to which floating IP has to be assigned.\n",
                          "properties": {
                            "ip": {
                              "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
                              "type": "string",
                              "description": "IP address associated with vnic for which floating IP has to be assigned on failover.\n"
                            },
                            "uuid": {
                              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                              "type": "string",
                              "description": "Uuid of the vnic of the VM to which floating IP has to be assigned.\n",
                              "format": "UUID"
                            }
                          }
                        }
                      }
                    },
                    "type": "array",
                    "description": "IP assignment for VMs upon recovery in the specified Availability Zone.\n"
                  }
                }
              },
              "type": "array",
              "description": "Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n"
            },
            "network_mapping_list": {
              "items": {
                "type": "object",
                "properties": {
                  "are_networks_stretched": {
                    "type": "boolean",
                    "description": "Whether the networks across the Availability Zones in above mapping are stretched.\n"
                  },
                  "availability_zone_network_mapping_list": {
                    "items": {
                      "required": [
                        "availability_zone_url"
                      ],
                      "type": "object",
                      "properties": {
                        "recovery_ip_assignment_list": {
                          "items": {
                            "$ref": "#/definitions/recovery_plan_vm_ip_assignment"
                          },
                          "type": "array",
                          "description": "Static IP configuration for the VMs to be applied post recovery in the recovery network for migrate/ failover action on the Recovery Plan.\n"
                        },
                        "test_ip_assignment_list": {
                          "items": {
                            "$ref": "#/definitions/recovery_plan_vm_ip_assignment"
                          },
                          "type": "array",
                          "description": "Static IP configuration for the VMs to be applied post recovery in the test network for test failover action on the Recovery Plan.\n"
                        },
                        "availability_zone_url": {
                          "type": "string",
                          "description": "URL of the Availability Zone.\n"
                        },
                        "recovery_network": {
                          "description": "Network in which VMs will be recovered on migrate/ failover action on the Recovery Plan.\n",
                          "$ref": "#/definitions/recovery_plan_network"
                        },
                        "test_network": {
                          "description": "Network in which VMs will be recovered on test failover action on the Recovery Plan.\n",
                          "$ref": "#/definitions/recovery_plan_network"
                        },
                        "cluster_reference_list": {
                          "items": {
                            "$ref": "#/definitions/cluster_reference"
                          },
                          "type": "array",
                          "description": "The clusters where the recovery and test networks reside. This is required to specify network mapping across clusters for a Recovery Plan created to handle failover within the same Availability Zone.\n"
                        }
                      }
                    },
                    "type": "array",
                    "description": "Mapping of networks across the Availability Zones.\n"
                  }
                }
              },
              "type": "array",
              "description": "Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones. Each entry of network mapping will have Availability Zone URL, recovery and test network information, static IP assignment for the VMs for the recovery and test networks. For example, Let RNx, TNx denote the recovery and test network information and RIPMx, TIPMx denote the static IP assignment for the VMs. As per below matrix, while performing failover action from Availability Zone AZ1 to AZ2, RN1 will be mapped to RN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"i.j.k.l\". On performing test failover from AZ1 to AZ2, RN1 will be mapped to TN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"I.J.K.L\". [[(AZ1 URL, RN1, TN1, [{VMx, \"a.b.c.d\"}, {VMy, \"e.f.g.h\"}],\n   [{VMx, \"A.B.C.D\"}, {VMy, \"E.F.G.H\"}]),\n  (AZ2 URL, RN4, TN4, [{VMx, \"i.j.k.l\"}, {VMy, \"m.n.p.q\"}],\n   [{VMx, \"I.J.K.L\"}, {VMy, \"M.N.P.Q\"}]),\n  (AZ3 URL, RN7, TN7)],\n [(AZ1 URL, RN2, TN2), (AZ2 URL, RN5, TN5),\n  (AZ3 URL, RN8, TN8)],\n [(AZ1 URL, RN3, TN3), (AZ2 URL, RN6, TN6)]]\nThe order of the static IP assignment for the VMs should remain same across all the networks provided in a network mapping. It forms a matrix containing IP mapping for the VMs across the Availability Zones. If a VM has multiple static IP addresses, static IP mapping will happen on the array indices. For example, Let IPrxy denote an IP address in subnet RNz and IPtxy denote an IP address in the subnet TNz. Lets VMx has two static IP address and VMy, VMz has one static IP associated with a vNIC created in network RN1. The IP mapping for the VMs will be as below.\n    AZ1, RN1        AZ1, TN1        AZ2, RN3        AZ2, TN2\n[(VMx, [IPr11]), (VMx, [IPt11]), (VMx, [IPr12]), (VMx,  [IPt12])] [(VMy, [IPr21]), (VMy, [IPt21]), (VMy, [IPr22]), (VMy,  [IPt22])] [(VMz, [IPr31]), (VMz, [IPt31]), (VMz, [IPr32]), (VMz,  [IPt32])]\nIn case of recovery of VMs from one Prism Element to the other within the same Availability Zone, a list of cluster references where the network exists can be specified. The network mapping to be used for a vNIC is decided as follows -\n1. If a VM that has a vNIC in a network N1 on cluster C1, then\n   the network mapping of N1 that has C1 in the cluster\n   references list will be used.\n\n2. In case there is no network mapping for N1 with cluster C1,\n   the default mapping of N1 for the Availability Zone (in which\n   cluster is not specified), will be used if present.\n"
            }
          }
        }
      },
      "title": "Recovery Plan resources"
    },
    "vm_recovery_point_list_intent_response": {
      "description": "Response object for intentful operation of vm_recovery_points",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/vm_recovery_point_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_recovery_point_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "aws_volume_type_resource": {
      "description": "aws_volume_type entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_volume_type_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_volume_type_metadata"
        }
      },
      "title": "aws_volume_type"
    },
    "providers": {
      "additionalProperties": {
        "type": "object"
      },
      "type": "object",
      "description": "Providers should be supplied as \"<scope>:<provider>\" style keys. Values\nwill be interpreted by the provider if supplied\n",
      "title": "Providers"
    },
    "vm_recovery_point_intent_resource": {
      "description": "Response object for intentful operations on a vm_recovery_point",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/vm_recovery_point_def_status"
        },
        "spec": {
          "$ref": "#/definitions/vm_recovery_point"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_recovery_point_metadata"
        }
      },
      "title": "vm_recovery_point Intent Response"
    },
    "environment_metadata": {
      "description": "The environment kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when environment was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "environment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "environment"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "environment uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the environment is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when environment was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the environment. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the environment. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "environment name",
          "maxLength": 80
        }
      },
      "title": "environment metadata"
    },
    "aws_role_def_status": {
      "description": "aws_role resources status",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "aws_role name."
        },
        "resources": {
          "$ref": "#/definitions/aws_role_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for aws_role."
        }
      },
      "title": "aws_role resources status"
    },
    "policy_action_type_resources": {
      "description": "PolicyActionType resources",
      "type": "object",
      "properties": {
        "runtime_settings": {
          "type": "object"
        },
        "startup_settings": {
          "type": "object"
        }
      },
      "title": "PolicyActionType resources"
    },
    "endpoint_list_intent_response": {
      "description": "Response object for intentful operation of endpoints",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/endpoint_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "datacenter_component": {
      "description": "Common properties for node or a network device in datacenters\n",
      "type": "object",
      "properties": {
        "rack_unit_height": {
          "minimum": 1,
          "type": "integer",
          "description": "rack unit height",
          "format": "int32"
        },
        "management_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "management IP address"
        },
        "management_mac_address": {
          "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
          "type": "string",
          "description": "management mac address",
          "x-example": "50:6b:8d:ee:de:2b"
        },
        "rack_unit_position": {
          "minimum": 0,
          "type": "integer",
          "description": "rack unit position",
          "format": "int32"
        },
        "installation_time": {
          "type": "string",
          "description": "installation date time",
          "format": "date-time"
        }
      },
      "title": "Hardware component"
    },
    "cluster_synchronous_replication_capable_response": {
      "items": {
        "type": "object",
        "description": "Source cluster to given remote cluster latency.",
        "properties": {
          "rtt_msecs": {
            "type": "string",
            "description": "Round trip time in milliseconds."
          },
          "cluster_reference": {
            "$ref": "#/definitions/cluster_reference"
          }
        }
      },
      "type": "array",
      "description": "Response object for the API to check if a remote cluster is capable of\nsynchronous replication.\n",
      "title": "Response schmea for synchronous_replication_capable API."
    },
    "file_item_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "file_item",
          "x-ntnx-enum": [
            "file_item"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for file_item list"
    },
    "app_runlog_list": {
      "description": "Runlog entity list of the app",
      "required": [
        "metadata",
        "api_version"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_runlog_response"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_runlog_list_metadata"
        }
      },
      "title": "runlog entity list"
    },
    "endpoint_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "endpoint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "endpoint"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "cluster_management_server": {
      "description": "Cluster Management server information.",
      "required": [
        "ip",
        "type"
      ],
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string"
        },
        "drs_enabled": {
          "type": "boolean",
          "description": "Denotes if DRS is enabled or not."
        },
        "status_list": {
          "items": {
            "x-ntnx-enum": [
              "REGISTERED",
              "IN_USE"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Array of management server status: - 'REGISTERED': Indicates whether the server is registered with\n                Nutanix or not.\n- 'IN_USE': Indicates whether any host is managed by this server or\n            not.\n"
        },
        "type": {
          "x-ntnx-enum": [
            "VCENTER"
          ],
          "type": "string"
        }
      },
      "title": "Cluster Management Server"
    },
    "directory_service_user": {
      "properties": {
        "user_principal_name": {
          "type": "string",
          "description": "The UserPrincipalName of the user from the directory service.\n",
          "maxLength": 104
        },
        "directory_service_reference": {
          "description": "Directory service reference if the user type is directory service.\n",
          "$ref": "#/definitions/directory_service_reference"
        },
        "user_attribute_value": {
          "type": "string",
          "description": "The Unique identifier for each user from the directory service.\n",
          "maxLength": 104
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "user_principal_name",
            "directory_service_reference"
          ]
        },
        {
          "required": [
            "user_attribute_value",
            "directory_service_reference"
          ]
        }
      ],
      "type": "object",
      "description": "A Directory Service user.",
      "title": "Directory Service user Definition."
    },
    "calm_feature_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "calm_feature",
          "x-ntnx-enum": [
            "calm_feature"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for calm_feature list output"
    },
    "identity_provider_reference_upload": {
      "description": "The reference to a identity_provider",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "identity_provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "identity_provider"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a identity_provider"
    },
    "ip_config": {
      "description": "IP config.",
      "type": "object",
      "properties": {
        "default_gateway_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Default gateway IP address."
        },
        "dhcp_server_address": {
          "$ref": "#/definitions/address"
        },
        "pool_list": {
          "items": {
            "$ref": "#/definitions/ip_pool"
          },
          "type": "array"
        },
        "prefix_length": {
          "type": "integer",
          "format": "int32"
        },
        "subnet_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Subnet IP address."
        },
        "dhcp_options": {
          "$ref": "#/definitions/dhcp_options"
        }
      },
      "title": "IP config"
    },
    "users_search_metadata": {
      "description": "The parameters to search for users",
      "required": [
        "query"
      ],
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search string."
        },
        "is_wildcard_search": {
          "default": true,
          "type": "boolean",
          "description": "The attribute that tells if the query is a wildcard match or exact match query.\n"
        },
        "user_type": {
          "type": "string",
          "description": "Type of User - AD, IdP or PC"
        },
        "provider_uuid": {
          "type": "string",
          "description": "The UUID of AD/IdP to search"
        }
      },
      "title": "Users search metadata"
    },
    "image_resources": {
      "description": "Describes the image spec resources object.",
      "type": "object",
      "properties": {
        "image_type": {
          "$ref": "#/definitions/image_type"
        },
        "checksum": {
          "description": "Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n",
          "$ref": "#/definitions/checksum"
        },
        "source_uri": {
          "type": "string",
          "description": "The source URI points at the location of a the source image which is used to create/update image.\n"
        },
        "initial_placement_ref_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "List of clusters where image is requested to be placed at time of creation. This argument will not be honored at time of update.\n"
        },
        "version": {
          "description": "The image version",
          "$ref": "#/definitions/image_version_resources"
        },
        "architecture": {
          "description": "Indicates the CPU architecture that the image is compatible with. If this is not specified for an image this will default to the CPU architecture type of the cluster.\n",
          "$ref": "#/definitions/image_architecture"
        },
        "data_source_reference": {
          "description": "Reference to VM disk. The expected kind for VMs Disk is vm_disk. The uuid should be the disk device uuid, where the disk device is from disk_list from VM status.\n",
          "$ref": "#/definitions/reference"
        },
        "source_options": {
          "$ref": "#/definitions/source_options"
        }
      },
      "title": "Image spec resources"
    },
    "quota_request": {
      "type": "object",
      "description": "Quota create request object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/quota_spec"
        },
        "metadata": {
          "$ref": "#/definitions/quota_metadata"
        }
      }
    },
    "blueprint_download_resources_def_status": {
      "description": "Status of the Blueprint.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_service_response_download"
          },
          "type": "array",
          "description": "Service definitions for Blueprint."
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_response_download"
          },
          "type": "array",
          "description": "Substrate definitions for Blueprint."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response_download"
          },
          "type": "array",
          "description": "Credential definitions for Blueprint."
        },
        "package_definition_list": {
          "items": {
            "$ref": "#/definitions/app_package_response_download"
          },
          "type": "array",
          "description": "Package definitions for Blueprint."
        },
        "app_profile_list": {
          "items": {
            "$ref": "#/definitions/app_profile_response_download"
          },
          "type": "array",
          "description": "App profile definitions for Blueprint."
        },
        "published_service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_response_download"
          },
          "type": "array",
          "description": "Published service definitions for Blueprint."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": "Type of blueprint",
          "maxLength": 64
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for app blueprint"
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Cloned or original blueprint"
        }
      },
      "title": "Status of the Blueprint."
    },
    "groups_aggregation_function": {
      "x-ntnx-enum": [
        "SUM",
        "AVG",
        "MIN",
        "MAX",
        "LAST",
        "COUNT",
        "BUCKETS"
      ],
      "type": "string",
      "description": "Downsampling function to take time series data and resolve to one value for aggregation purposes.\n",
      "title": "Entities Request Aggregation Function"
    },
    "ca_cert": {
      "description": "CA certificate info.",
      "required": [
        "ca_name",
        "certificate"
      ],
      "type": "object",
      "properties": {
        "ca_name": {
          "type": "string",
          "description": "Name of the certificate authority."
        },
        "certificate": {
          "type": "string",
          "description": "Certificate content.",
          "format": "byte"
        }
      },
      "title": "CA certificate info"
    },
    "blueprint_download_intent_response": {
      "description": "Response object for intentful operations on a blueprint",
      "required": [
        "api_version",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_download_def_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Response"
    },
    "marketplace_item_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_item",
          "x-ntnx-enum": [
            "marketplace_item"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for marketplace_item list output"
    },
    "script_input_spec": {
      "description": "script input spec",
      "type": "object",
      "properties": {
        "targetDetails": {
          "additionalProperties": true,
          "type": "object",
          "description": "object with the credential info for remote machine"
        },
        "machine": {
          "type": "string",
          "description": "machine on which script run"
        },
        "provider_operation_payload": {
          "type": "string",
          "description": "object with all the data from a http task run"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Contains the script and script-type"
        },
        "port": {
          "type": "string",
          "description": "port of the machine"
        },
        "runid": {
          "type": "string",
          "description": "Unique id for every run"
        }
      },
      "title": "script input spec"
    },
    "app_package_input": {
      "description": "Package definition for Application",
      "required": [
        "name",
        "uuid",
        "type"
      ],
      "type": "object",
      "properties": {
        "image_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s image spec"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_reference"
          },
          "type": "array",
          "description": "References of the service."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "version": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_package_reference"
        },
        "type": {
          "x-ntnx-enum": [
            "SNAPSHOT",
            "ISO",
            "DEB",
            "RPM",
            "DOCKER_IMAGE",
            "CHEF_COOKBOOK",
            "PUPPET_MANIFEST",
            "CUSTOM",
            "SUBSTRATE_IMAGE",
            "K8S_IMAGE"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "type": "object",
          "description": "Details based on type of the package."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Package for Application"
    },
    "recovery_groups_list_response": {
      "description": "Response object for list of recovery_groups",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/recovery_group_resource"
          },
          "type": "array"
        }
      },
      "title": "Recovery groups List Response"
    },
    "user_input_resource": {
      "properties": {
        "identity_provider_user": {
          "$ref": "#/definitions/identity_provider_user"
        },
        "directory_service_user": {
          "$ref": "#/definitions/directory_service_user"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "directory_service_user"
          ]
        },
        {
          "required": [
            "identity_provider_user"
          ]
        }
      ],
      "type": "object",
      "description": "User Resource Definition.",
      "title": "User Resource Definition."
    },
    "resource_utilization_status": {
      "description": "stores resource utilization and limits for a domain",
      "required": [
        "resource_type",
        "units",
        "value"
      ],
      "properties": {
        "units": {
          "type": "string",
          "description": "The units of the resource type"
        },
        "limit": {
          "type": "integer",
          "description": "The resource consumption limit (unspecified is unlimited)"
        },
        "value": {
          "type": "integer",
          "description": "The amount of resource consumed"
        },
        "resource_type": {
          "type": "string",
          "description": "The type of resource (for example storage, CPUs)"
        }
      },
      "title": "Resource Utilization Status"
    },
    "vm_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm",
          "x-ntnx-enum": [
            "vm"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for vm list output"
    },
    "approval_request_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "approval_request",
          "x-ntnx-enum": [
            "approval_request"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for approval_request list output"
    },
    "snapshot_retention_policy_with_expiry": {
      "description": "This describes the snapshot retention policy for this\navailability zone. This translates into how many snapshots\ntaken as part of this protection rule need to be retained\non this availability zone.\n",
      "type": "object",
      "properties": {
        "num_snapshots": {
          "type": "integer",
          "description": "Number of snapshots need to be retained. This will be set in case of\nlinear snapshot retention.\n",
          "format": "int32"
        },
        "rollup_retention_policy": {
          "description": "Maximum snapshot retention time with rollup schedules.\n",
          "type": "object",
          "properties": {
            "multiple": {
              "type": "integer",
              "description": "Multiplier to 'snapshot_interval_type'. For example if\n'snapshot_interval_type' is \"YEARLY\" and 'multiple' is 5, then 5\nyears worth of rollup snapshots will be retained.\n",
              "format": "int32"
            },
            "snapshot_interval_type": {
              "x-ntnx-enum": [
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY"
              ],
              "type": "string",
              "description": "Snapshot interval period.\n"
            }
          },
          "title": "Snapshot Retention Policy for rollup schedules"
        },
        "snapshot_expiry_policy": {
          "description": "Snapshot Expiry Policy - time period after which the snapshot will expire\n",
          "type": "object",
          "properties": {
            "interval_type": {
              "x-ntnx-enum": [
                "HOURS",
                "DAYS",
                "WEEKS",
                "MONTHS",
                "YEARS"
              ],
              "type": "string",
              "description": "Interval period.\n"
            },
            "multiple": {
              "type": "integer",
              "description": "Multiplier to 'interval_type'. For example if 'interval_type' is\n\"DAYS\" and 'multiple' is 2, then after 2 days the snapshot will expire.\n",
              "format": "int32"
            }
          },
          "title": "Snapshot Expiry Policy"
        }
      },
      "title": "Snapshot Retention Policy"
    },
    "image_detail_arg": {
      "description": "Argument format for image create action run.",
      "required": [
        "source_disk_uuid",
        "image_name"
      ],
      "type": "object",
      "properties": {
        "source_disk_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The UUID for the disk.",
          "format": "UUID"
        },
        "image_name": {
          "type": "string",
          "description": "The name for the created image."
        },
        "description": {
          "type": "string",
          "description": "The description for the created image."
        }
      },
      "title": "Argument format for image create action run."
    },
    "runbook_runlog_metadata": {
      "description": "The runbook_runlog kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when runbook_runlog was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "runbook_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook_runlog"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "runbook_runlog uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the runbook_runlog is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when runbook_runlog was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the runbook_runlog. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the runbook_runlog. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "runbook_runlog name",
          "maxLength": 80
        }
      },
      "title": "runbook_runlog metadata"
    },
    "marketplace_item_reference": {
      "description": "The reference to a marketplace_item",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_item"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a marketplace_item"
    },
    "app_patchrun_args": {
      "description": "Argument format for patch run",
      "type": "object",
      "properties": {
        "variables": {
          "items": {
            "$ref": "#/definitions/app_actionrun_args"
          },
          "type": "array",
          "description": "List of variables for patch run. It is a dictionary of name-values."
        },
        "patch": {
          "type": "object",
          "description": "Patch body to be applied on application.",
          "$ref": "#/definitions/config_input"
        }
      },
      "title": "Argument format for patch run"
    },
    "app_task_share": {
      "description": "App task share kind",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_task_share_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "App task share kind"
    },
    "protection_rule_def_status": {
      "description": "Protection Rule creation/modification status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the protection rule."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the protection rule, if in an error state.\n"
        },
        "name": {
          "type": "string",
          "description": "Protection Rule name"
        },
        "resources": {
          "$ref": "#/definitions/protection_rule_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for the protection rule."
        }
      },
      "title": "Protection Rule creation/modification status"
    },
    "blueprint_patch_with_environment_validate_spec": {
      "description": "Spec for blueprint patch validate.",
      "required": [
        "environment_profile_pairs"
      ],
      "type": "object",
      "properties": {
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/blueprint_patch_environment_profile_pair_request"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment for patching"
        }
      },
      "title": "Spec for blueprint patch validate."
    },
    "subnet_def_status": {
      "description": "An intentful representation of a subnet status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "subnet Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the subnet."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the subnet, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/subnet_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for subnet."
        }
      },
      "title": "subnet Intent Status with placement specified"
    },
    "category_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "category",
          "x-ntnx-enum": [
            "category"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for category list"
    },
    "aws_mixed_image_resource": {
      "description": "aws_mixed_image entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_mixed_image_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_mixed_image_metadata"
        }
      },
      "title": "aws_mixed_image"
    },
    "vm_recovery_point_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm_recovery_point",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for vm_recovery_point list"
    },
    "replication_connection": {
      "description": "An intentful representation of a replication_connection spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "replication_connection Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for replication_connection.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/replication_connection_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "replication_connection Intent Spec with placement specified"
    },
    "aws_key_pair_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_key_pair",
          "x-ntnx-enum": [
            "aws_key_pair"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_key_pair list output"
    },
    "blueprint_deployment_response": {
      "description": "Deployment definition for Application.",
      "required": [
        "name",
        "uuid",
        "substrate_local_reference",
        "min_replicas",
        "max_replicas",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "type": {
          "default": "GREENFIELD",
          "x-ntnx-enum": [
            "BROWNFIELD",
            "GREENFIELD",
            "K8S_DEPLOYMENT"
          ],
          "type": "string",
          "description": ""
        },
        "package_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_package_reference"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "published_service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_reference"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for blueprint deployment"
        },
        "substrate_local_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "brownfield_instance_list": {
          "items": {
            "$ref": "#/definitions/brownfield_instance_input"
          },
          "type": "array",
          "description": "brownfield map"
        }
      },
      "title": "Deployment Definition for Application."
    },
    "app_variable_input_upload": {
      "description": "Variable definition for application.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Variable definition for application."
    },
    "tunnel_list_intent_response": {
      "description": "Response object for intentful operation of tunnels",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/tunnel_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/tunnel_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "image_placement_policy_state": {
      "description": "State of enforced policy on an entity.",
      "required": [
        "compliance_status",
        "enforcement_mode",
        "policy_reference"
      ],
      "type": "object",
      "properties": {
        "policy_reference": {
          "$ref": "#/definitions/reference"
        },
        "policy_info": {
          "$ref": "#/definitions/image_placement_info"
        },
        "compliance_status": {
          "description": "This field indicates whether the given entity is compliant with the specified policy or not. It will be in unknown state if the current compliance state is not known.\n",
          "$ref": "#/definitions/policy_compliance_state"
        },
        "enforcement_mode": {
          "x-ntnx-enum": [
            "MONITORING",
            "ENFORCING",
            "ENFORCEMENT_FAILED"
          ],
          "type": "string",
          "description": "Policy enforcement mode informs us about what the policy engine is currently doing to enforce the policy on the entity. Monitoring indicates that the policy engine is simply monitoring the entity's state. Enforcing means that the policy engine is currently trying to enforce the policy on the entity. Enforcement failed indicates that the policy engine encountered a non-transient error and requires user intervention to fix the problem, error message gives the reason for error in this case.\n"
        },
        "error_message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "Policy State"
    },
    "aws_mixed_image_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        }
      },
      "title": "Metadata for aws_mixed_image list output"
    },
    "vm_gpu_output_status": {
      "description": "Graphics resource status information for the Virtual Machine.",
      "type": "object",
      "properties": {
        "frame_buffer_size_mib": {
          "type": "integer",
          "description": "GPU frame buffer size in MiB.",
          "format": "int64"
        },
        "vendor": {
          "x-ntnx-enum": [
            "NVIDIA",
            "INTEL",
            "AMD"
          ],
          "type": "string",
          "description": "The vendor of the GPU."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the GPU.",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "Name of the GPU resource."
        },
        "pci_address": {
          "type": "string",
          "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n"
        },
        "fraction": {
          "type": "integer",
          "description": "Fraction of the physical GPU assigned.",
          "format": "int32"
        },
        "mode": {
          "x-ntnx-enum": [
            "PASSTHROUGH_GRAPHICS",
            "PASSTHROUGH_COMPUTE",
            "VIRTUAL"
          ],
          "type": "string",
          "description": "The mode of this GPU"
        },
        "num_virtual_display_heads": {
          "type": "integer",
          "description": "Number of supported virtual display heads.",
          "format": "int32"
        },
        "guest_driver_version": {
          "type": "string",
          "description": "Last determined guest driver version."
        },
        "max_instances_per_vm": {
          "type": "integer",
          "description": "Maximum number of vGPUs of a GPU type assignable to a VM.",
          "format": "int64"
        },
        "device_id": {
          "type": "integer",
          "description": "The device ID of the GPU.",
          "format": "int32"
        }
      },
      "title": "Virtual Machine GPU status"
    },
    "aws_mixed_image_resources_def_status": {
      "description": "AWS image resources",
      "type": "object",
      "properties": {
        "root_device_type": {
          "type": "string",
          "description": "Root device type (e.g. ebs, instance-store)"
        },
        "id": {
          "pattern": "^ami-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the AMI."
        },
        "name": {
          "type": "string",
          "description": "Ami name"
        }
      },
      "title": "AWS image resources"
    },
    "vpc_intent_resource": {
      "description": "Response object for intentful operations on a vpc",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/vpc_def_status"
        },
        "spec": {
          "$ref": "#/definitions/vpc"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vpc_metadata"
        }
      },
      "title": "vpc Intent Response"
    },
    "custom_project_internal_intent_response": {
      "description": "Response object for intentful operations on a Project",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/custom_project_internal_def_status"
        },
        "spec": {
          "$ref": "#/definitions/custom_project_internal"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "Project Intent Response"
    },
    "provider_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "provider",
          "x-ntnx-enum": [
            "provider"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for provider list"
    },
    "app_endpoint_reference_upload": {
      "description": "The reference to a app_endpoint",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_endpoint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_endpoint"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_endpoint"
    },
    "endpoint_download_def_status": {
      "description": "Endpoint download status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/endpoint_download_resources_def_status"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Endpoint download status"
    },
    "app_runlog_reference": {
      "description": "The reference to a app_runlog",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_runlog"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_runlog"
    },
    "protection_policy_reference_upload": {
      "description": "The reference to a protection_policy",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "protection_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "protection_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a protection_policy"
    },
    "endpoint_def_status": {
      "description": "An intentful representation of a endpoint status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "endpoint Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the endpoint."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the endpoint, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/endpoint_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for endpoint."
        }
      },
      "title": "endpoint Intent Status with placement specified"
    },
    "root_certificate": {
      "description": "Payload for multicluster configuration request.",
      "required": [
        "local_gateway_role"
      ],
      "type": "object",
      "properties": {
        "certificate_chain": {
          "items": {
            "$ref": "#/definitions/certificate"
          },
          "type": "array",
          "description": "A certificate chain for validating JWT. At the beginning of this chain is an end-entity certificate whose private key is used to sign the JWT. The end of the chain is the root certificate. If this is passed from one PC to another PC, the root certificate in this chain should be the same as the root certificate to be configured. The chain guarantee the sender owns the end-entity certificate signed by the root certificate to be configured. If this is passed from one PC to PE, the root certificate in the chain on PC should be trusted by PE. This is to verify that the PC sending the root certificate to be configured is trusted by the PE."
        },
        "local_gateway_role": {
          "x-ntnx-enum": [
            "INITIATOR",
            "ACCEPTOR"
          ],
          "type": "string",
          "description": "Local gateway role in handling root certificate configurations.\n"
        },
        "jwt": {
          "maxLength": 10240,
          "type": "string",
          "description": "JWT for validating the attached root certificate.",
          "format": "byte"
        },
        "certificate": {
          "description": "The root certificate to be configured.",
          "$ref": "#/definitions/certificate"
        }
      },
      "title": "Root certificates for multicluster configurations"
    },
    "resource_type_list_intent_response": {
      "description": "Response object for intentful operation of resource_types",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/resource_type_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/resource_type_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "project_usage_response": {
      "description": "Project usage details",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/project_usage_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        }
      },
      "title": "Project usage"
    },
    "app_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "project_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "project",
          "x-ntnx-enum": [
            "project"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for project list output"
    },
    "runbook_intent_response": {
      "description": "Response object for intentful operations on a runbook",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/runbook_def_status"
        },
        "spec": {
          "$ref": "#/definitions/runbook"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Response"
    },
    "network_group_list_with_nested_attributes_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group",
          "x-ntnx-enum": [
            "network_group"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "nested_attributes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Nested attributes to return for each list item"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for network_group list"
    },
    "image_placement_policy_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image_placement_policy",
          "x-ntnx-enum": [
            "image_placement_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for image_placement_policy list"
    },
    "resource_type_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "resource_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "resource_type"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_credential_usage_response": {
      "description": "Response object for task's dependent on credentials",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_credential_task_status"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app credential dependent on task response format"
    },
    "provider_reference": {
      "description": "The reference to a provider",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "provider"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a provider"
    },
    "feature_calm_detected_dr_input": {
      "description": "Input for feature - Calm Detected DR",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_calm_detected_dr"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Input for feature - Calm Detected DR"
    },
    "cluster_service_list": {
      "items": {
        "default": "AOS",
        "x-ntnx-enum": [
          "AOS",
          "PRISM_CENTRAL",
          "CLOUD_DATA_GATEWAY",
          "AFS",
          "WITNESS",
          "XI_PORTAL",
          "ONE_NODE",
          "TWO_NODE"
        ],
        "type": "string"
      },
      "type": "array",
      "description": "Array of enabled cluster services. For example, a cluster can function\nas both AOS and cloud data gateway.\n- 'AOS': Regular Prism Element\n- 'PRISM_CENTRAL': Prism Central\n- 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway\n- 'AFS': Cluster for file server\n- 'WITNESS' : Witness cluster\n- 'XI_PORTAL': Xi cluster\n- 'ONE_NODE_CLUSTER': Single node backup cluster\n- 'TWO_NODE_CLUSTER': Two node cluster\n",
      "title": "List of Cluster Services"
    },
    "calm_feature_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "calm_feature",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "calm_feature"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "project_metadata": {
      "description": "The project kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when project was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "project",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "project"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "project uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the project is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when project was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the project. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the project. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "project name",
          "maxLength": 80
        }
      },
      "title": "project metadata"
    },
    "blueprint_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "blueprint",
          "x-ntnx-enum": [
            "blueprint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for blueprint list"
    },
    "vm_recovery_point_intent_response": {
      "description": "Response object for intentful operations on a vm_recovery_point",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/vm_recovery_point_def_status"
        },
        "spec": {
          "$ref": "#/definitions/vm_recovery_point"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_recovery_point_metadata"
        }
      },
      "title": "vm_recovery_point Intent Response"
    },
    "vm_nic_output_status": {
      "description": "Virtual Machine NIC Status.",
      "type": "object",
      "properties": {
        "dns_ip_addresses_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "List of DNS IP addresses."
        },
        "nic_type": {
          "x-ntnx-enum": [
            "NORMAL_NIC",
            "DIRECT_NIC",
            "NETWORK_FUNCTION_NIC"
          ],
          "type": "string",
          "description": "The type of this NIC. Defaults to NORMAL_NIC."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.\n",
          "format": "UUID"
        },
        "ip_endpoint_list": {
          "items": {
            "$ref": "#/definitions/ip_address"
          },
          "type": "array",
          "description": "IP endpoints for the adapter. Currently, IPv4 addresses are supported.\n"
        },
        "network_function_chain_reference": {
          "$ref": "#/definitions/network_function_chain_reference"
        },
        "floating_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "The Floating IP associated with the vnic."
        },
        "network_function_nic_type": {
          "x-ntnx-enum": [
            "INGRESS",
            "EGRESS",
            "TAP"
          ],
          "type": "string",
          "description": "The type of this Network function NIC. Defaults to INGRESS.\n"
        },
        "vlan_mode": {
          "x-ntnx-enum": [
            "ACCESS",
            "TRUNKED"
          ],
          "type": "string",
          "description": "VLAN mode."
        },
        "mac_address": {
          "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
          "type": "string",
          "description": "The MAC address for the adapter.",
          "x-example": "50:6b:8d:ee:de:2b"
        },
        "default_gateway_address_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "Default gateway IP addresses."
        },
        "subnet_reference": {
          "$ref": "#/definitions/subnet_reference"
        },
        "model": {
          "x-ntnx-enum": [
            "VIRTIO",
            "E1000"
          ],
          "type": "string",
          "description": "The model of this NIC."
        },
        "trunked_vlan_list": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "List of VLANs to trunk if vlan_mode is TRUNKED. If empty, all VLANs are trunked.\n"
        },
        "is_connected": {
          "type": "boolean",
          "description": "Whether or not the NIC is connected. True by default."
        },
        "dhcp_server_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IP address of the DHCP server."
        }
      },
      "title": "Virtual Machine NIC Status"
    },
    "approval_request_intent_input": {
      "description": "An intentful representation of a approval_request",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/approval_request"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/approval_request_metadata"
        }
      },
      "title": "approval_request Intent Entity"
    },
    "user_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "provider_resources_def_status": {
      "description": "Status of the provider",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Notes on this provider"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "resource_type_reference_list": {
          "items": {
            "$ref": "#/definitions/resource_type_reference"
          },
          "type": "array",
          "description": "List of resource type uuids which are attached to this provider"
        },
        "auth_schema_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of auth schemas"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "name": {
          "type": "string",
          "description": "Name of the provider. Ex: Oracle cloud"
        }
      },
      "title": "Status of the provider"
    },
    "app_script_input": {
      "description": "script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "script input"
    },
    "project_usage_spec": {
      "description": "Project usage resource object",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "usage": {
          "$ref": "#/definitions/project_usage_def"
        },
        "name": {
          "type": "string",
          "description": "name of the project"
        },
        "resources": {
          "$ref": "#/definitions/project_usage_resource"
        }
      },
      "title": "Project usage resource object"
    },
    "identity_provider_metadata": {
      "description": "The identity_provider kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when identity_provider was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "identity_provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "identity_provider"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "identity_provider uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the identity_provider is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when identity_provider was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the identity_provider. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the identity_provider. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "identity_provider name",
          "maxLength": 80
        }
      },
      "title": "identity_provider metadata"
    },
    "users_intent_input": {
      "description": "User search request.",
      "required": [
        "query",
        "user_type",
        "provider_uuid"
      ],
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Pattern to search for user in directory_service or idf",
          "maxLength": 64
        },
        "is_wildcard_search": {
          "default": true,
          "type": "boolean",
          "description": "The attribute that tells if the query is a wildcard match or exact match query."
        },
        "user_type": {
          "type": "string",
          "description": "Type of user - AD, IdP or PC",
          "maxLength": 64
        },
        "provider_uuid": {
          "maxLength": 64,
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Users custom input."
    },
    "aws_key_pair_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_key_pair_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_key_pair_list_metadata_output"
        }
      },
      "title": "aws_key_pair entity list"
    },
    "vpc_metadata": {
      "description": "The vpc kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vpc was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "vpc",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vpc"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "vpc uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the vpc is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when vpc was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the vpc. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the vpc. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "vpc name",
          "maxLength": 80
        }
      },
      "title": "vpc metadata"
    },
    "user_reference": {
      "description": "The reference to a user",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "user",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a user"
    },
    "app_endpoint_input_upload": {
      "description": "Endpoint definition",
      "required": [
        "name",
        "type",
        "attrs"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Endpoint definition"
    },
    "marketplace_item_intent_resource": {
      "description": "Response object for intentful operations on a marketplace_item",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/marketplace_item_def_status"
        },
        "spec": {
          "$ref": "#/definitions/marketplace_item"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_metadata"
        }
      },
      "title": "marketplace_item Intent Response"
    },
    "recovery_plan_info": {
      "description": "Information about the state of the Recovery Plan.",
      "type": "object",
      "properties": {
        "recoverability": {
          "type": "object",
          "description": "Recoverability of the entity.",
          "properties": {
            "status": {
              "x-ntnx-enum": [
                "RECOVERABLE",
                "PARTIAL_RECOVERABLE",
                "UNRECOVERABLE"
              ],
              "type": "string",
              "description": "Recoverability status of the entity."
            },
            "reason": {
              "type": "string",
              "description": "Reason for the status of the entity.",
              "maxLength": 256
            }
          }
        }
      },
      "title": "Recovery Plan information."
    },
    "groups_group_result": {
      "description": "Group Result.",
      "type": "object",
      "properties": {
        "entity_results": {
          "items": {
            "$ref": "#/definitions/groups_entity"
          },
          "type": "array"
        },
        "group_by_column_value": {
          "type": "string"
        },
        "total_entity_count": {
          "type": "integer",
          "format": "int64"
        },
        "group_summaries": {
          "$ref": "#/definitions/groups_group_summary_map"
        }
      },
      "title": "Group Result"
    },
    "blueprint_marketplace_launch_spec": {
      "description": "Spec for Blueprint launch.",
      "required": [
        "resources",
        "app_blueprint_name"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description for the marketplace item"
        },
        "environment_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "Environment uuid.",
          "format": "UUID"
        },
        "app_blueprint_name": {
          "type": "string",
          "description": "Name of the app blueprint to be created."
        },
        "source_marketplace_name": {
          "type": "string",
          "description": "Name of the source marketplace item of the app blueprint\n"
        },
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/blueprint_patch_environment_profile_pair_request"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment for patching"
        },
        "source_marketplace_version": {
          "type": "string",
          "description": "Indicates version of the source marketplace item of the app blueprint\n"
        },
        "resources": {
          "description": "Blueprint spec of the marketplace blueprint.",
          "$ref": "#/definitions/blueprint_upload_resources"
        }
      },
      "title": "Spec for Blueprint launch."
    },
    "project_def_status": {
      "description": "A Project resource.",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the project entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Project name."
        },
        "resources": {
          "type": "object",
          "properties": {
            "resource_domain": {
              "$ref": "#/definitions/resource_domain_resources_status"
            },
            "account_reference_list": {
              "items": {
                "$ref": "#/definitions/account_reference"
              },
              "type": "array",
              "description": "List of accounts associated with the project."
            },
            "environment_reference_list": {
              "items": {
                "$ref": "#/definitions/environment_reference"
              },
              "type": "array",
              "description": "List of environments associated with the project."
            },
            "default_subnet_reference": {
              "description": "Optional default subnet if one is specified",
              "$ref": "#/definitions/subnet_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "List of users added directly to the project.\n"
            },
            "is_default": {
              "type": "boolean",
              "description": "Indicates if it is the default project. A default project is\nmanaged by the system and cannot be renamed or removed.\n"
            },
            "tunnel_reference_list": {
              "items": {
                "$ref": "#/definitions/tunnel_reference"
              },
              "type": "array",
              "description": "List of tunnels associated with the project."
            },
            "external_user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "List of directory service groups reference. These\ngroups are not managed by Nutanix.\n"
            },
            "subnet_reference_list": {
              "items": {
                "$ref": "#/definitions/subnet_reference"
              },
              "type": "array",
              "description": "List of subnets for the project."
            },
            "external_network_list": {
              "items": {
                "$ref": "#/definitions/external_network"
              },
              "type": "array",
              "description": "List of external network associated with the project."
            },
            "default_environment_reference": {
              "description": "Optional default environment if one is specified",
              "$ref": "#/definitions/environment_reference"
            }
          },
          "title": "Project Resources"
        },
        "description": {
          "type": "string",
          "description": "Project description."
        }
      },
      "title": "Project Resource Status"
    },
    "routing_policy_reference": {
      "description": "The reference to a routing_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "routing_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "routing_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a routing_policy"
    },
    "environment_intent_resource": {
      "description": "Response object for intentful operations on a environment",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/environment_def_status"
        },
        "spec": {
          "$ref": "#/definitions/environment"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/environment_metadata"
        }
      },
      "title": "environment Intent Response"
    },
    "endpoint_upload": {
      "description": "title endpoint upload kind",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/endpoint_upload_resources"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        }
      },
      "title": "title endpoint upload kind"
    },
    "network_group_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group",
          "x-ntnx-enum": [
            "network_group"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for network_group list output"
    },
    "image_reference": {
      "description": "The reference to a image",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a image"
    },
    "runbook_download_def_status": {
      "description": "Runbook download status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/runbook_download_resources_def_status"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Runbook download status"
    },
    "policy_clone_metadata": {
      "required": [
        "kind",
        "policy_uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "policy_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      }
    },
    "policy_action_type_resources_def_status": {
      "description": "PolicyActionType resources",
      "required": [
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "message_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "PolicyActionType resources"
    },
    "app_engine_runlog_task_response": {
      "description": "App Engine Runlog Task Response",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_engine_runlog_task_uuid_response"
          },
          "type": "array"
        }
      },
      "title": "App Engine Runlog Task Response"
    },
    "action_reference": {
      "description": "The reference to a action",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "action",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "action"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a action"
    },
    "policies": {
      "items": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "object",
            "description": "Policy object which will be interpreted by the provider"
          },
          "type": {
            "type": "string",
            "description": "The policy type"
          }
        }
      },
      "type": "array",
      "description": "Settings that modify the behavior of the entity. They will be interpreted\nby built in or the third party providers\n",
      "title": "Policies"
    },
    "vm_disk": {
      "description": "VirtualMachine Disk (VM Disk).",
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The device ID which is used to uniquely identify this particular disk.\n",
          "format": "UUID"
        },
        "disk_size_bytes": {
          "minimum": 1,
          "type": "integer",
          "description": "Size of the disk in Bytes.",
          "format": "int64"
        },
        "storage_config": {
          "description": "Storage configuration for disks.",
          "$ref": "#/definitions/disk_storage_config"
        },
        "device_properties": {
          "type": "object",
          "properties": {
            "device_type": {
              "default": "DISK",
              "x-ntnx-enum": [
                "DISK",
                "CDROM",
                "VOLUME_GROUP"
              ],
              "type": "string"
            },
            "disk_address": {
              "$ref": "#/definitions/disk_address"
            }
          }
        },
        "data_source_reference": {
          "type": "object",
          "properties": {
            "is_direct_attach": {
              "type": "boolean",
              "description": "This is to indicate if attaching the referenced disk directly. Important: this should only be used by internal services. Direct attaching a disk that is used by another VM will result in data loss.\n"
            },
            "url": {
              "pattern": "^((http[s]?):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*(:[0-9]+)*?\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$",
              "type": "string",
              "description": "AHV sync rep uses this field to identify a dormant VM disk.\n"
            },
            "kind": {
              "type": "string"
            },
            "uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "format": "UUID"
            },
            "name": {
              "readOnly": true,
              "type": "string"
            }
          }
        },
        "disk_size_mib": {
          "minimum": 1,
          "type": "integer",
          "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB -  when that field is present.\n",
          "format": "int32"
        },
        "volume_group_reference": {
          "$ref": "#/definitions/reference"
        }
      },
      "title": "VirtualMachine Disk (VM Disk)"
    },
    "app_task_share_resources": {
      "description": "Libraty task resources definition.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this task has been assigned to"
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference"
          },
          "type": "array",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        }
      },
      "title": "Library task resources"
    },
    "blueprint_custom_intent_input": {
      "description": "An intentful representation of a blueprint",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Entity"
    },
    "feature_project_saml_response": {
      "description": "Response for feature - SAML Support",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_project_saml"
            }
          }
        },
        "spec": {
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_project_saml"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for feature - SAML Support"
    },
    "blueprint_marketplace_launch_response": {
      "description": "Response containing the uuid of the newly created app blueprint object",
      "required": [
        "api_version",
        "metadata",
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_marketplace_launch_response_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint_marketplace_launch_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Response containing the uuid of the newly created app blueprint object"
    },
    "policy_intent_response": {
      "description": "Response object for intentful operations on a policy",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/policy_def_status"
        },
        "spec": {
          "$ref": "#/definitions/policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_metadata"
        }
      },
      "title": "policy Intent Response"
    },
    "project_usage_resource": {
      "description": "Project usage resource object",
      "type": "object",
      "properties": {
        "user_list": {
          "items": {
            "$ref": "#/definitions/entity_usage"
          },
          "type": "array",
          "description": "List of user usage"
        }
      },
      "title": "Project usage resource object"
    },
    "replication_pair": {
      "required": [
        "first_account_reference",
        "second_account_reference"
      ],
      "type": "object",
      "description": "accounts that are paired to represent an active replication route.",
      "properties": {
        "second_account_reference": {
          "description": "one of the account that forms the link",
          "$ref": "#/definitions/account_reference"
        },
        "first_account_reference": {
          "description": "one of the account that forms the link",
          "$ref": "#/definitions/account_reference"
        }
      }
    },
    "blueprint_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "blueprint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "blueprint"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "runbook_script_response": {
      "required": [
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "trl_id",
            "run_id",
            "request_id"
          ],
          "description": "Provides the required IDs for the run",
          "properties": {
            "trl_id": {
              "type": "string",
              "description": "task runlog id for the script run"
            },
            "request_id": {
              "type": "string",
              "description": "ergon task id for the script run"
            },
            "run_id": {
              "type": "string",
              "description": "run id for the script run"
            }
          }
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      }
    },
    "arm_list_metadata": {
      "description": "All arm list calls will have this metadata block as input",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for arm list calls"
    },
    "app_reference": {
      "description": "The reference to a app",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app"
    },
    "app_action_response_download": {
      "description": "Action definition for Application",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for action"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "critical": {
          "default": false,
          "type": "boolean",
          "description": "action critical flag"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "action attrs"
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/app_runbook_response_download"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Action for Application"
    },
    "entity_usage_def": {
      "description": "entity usage definition",
      "type": "object",
      "properties": {
        "blueprint": {
          "type": "integer",
          "description": "Number of blueprints associated with project"
        },
        "app": {
          "type": "integer",
          "description": "Number of apps associated with project"
        },
        "vm": {
          "type": "integer",
          "description": "Number of vms associated with project"
        }
      },
      "title": "entity usage definition"
    },
    "aws_region_def_status": {
      "description": "aws_region resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_region name."
        },
        "resources": {
          "$ref": "#/definitions/aws_region_resources_def_status"
        }
      },
      "title": "aws_region resources status"
    },
    "policy_list_intent_response": {
      "description": "Response object for intentful operation of policys",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/policy_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "image_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image",
          "x-ntnx-enum": [
            "image"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for image list output"
    },
    "marketplace_item_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_item"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_cost_response": {
      "description": "Cost definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "interval",
        "value",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "interval": {
          "x-ntnx-enum": [
            "HOUR",
            "WEEK",
            "MONTH"
          ],
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LIVE",
            "STATIC"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Cost for Application"
    },
    "marketplace_icon": {
      "description": "An intentful representation of a marketplace_icon spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "marketplace_icon Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for marketplace_icon.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/marketplace_icon_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "marketplace_icon Intent Spec with placement specified"
    },
    "network_group_def_status": {
      "description": "Network Group resources definition.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Calm managed network"
        },
        "platform_vpc_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific vpc uuids managed by the Network Group."
        },
        "platform_subnet_uuid_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of provider specific subnet uuids managed by the Network Group."
        },
        "account_reference": {
          "description": "Account reference for the Network Group.",
          "$ref": "#/definitions/account_reference"
        },
        "tunnel_reference": {
          "description": "tunnel reference for the Network Group",
          "$ref": "#/definitions/tunnel_reference"
        },
        "created_by": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Network Group resources"
    },
    "blueprint_launch_input": {
      "description": "Launch Blueprint request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_launch_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Launch Blueprint request."
    },
    "policy_event_intent_input": {
      "description": "An intentful representation of a policy_event",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/policy_event"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_event_metadata"
        }
      },
      "title": "policy_event Intent Entity"
    },
    "app_substrate_input_upload": {
      "description": "Substrate definition",
      "required": [
        "name",
        "type",
        "variable_list",
        "action_list"
      ],
      "type": "object",
      "properties": {
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe_upload"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_substrate_reference_upload"
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "os_type": {
          "type": "string",
          "description": ""
        },
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": "List of variables"
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Substrate definition"
    },
    "vm_recovery_point_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm_recovery_point",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for vm_recovery_point list output"
    },
    "marketplace_item_list_intent_response": {
      "description": "Response object for intentful operation of marketplace_items",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/marketplace_item_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "xi_category_list_response": {
      "description": "Response body for Xi categories list",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/xi_category_item"
          },
          "type": "array"
        }
      },
      "title": "Response body for Xi categories list"
    },
    "port_range_status": {
      "description": "Range of TCP/UDP ports.",
      "type": "object",
      "properties": {
        "end_port": {
          "type": "integer",
          "format": "int32"
        },
        "start_port": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "TCP/UDP ports."
    },
    "app_package_element": {
      "description": "Package definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "state"
      ],
      "type": "object",
      "properties": {
        "image_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s image spec"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for package"
        },
        "service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_reference"
          },
          "type": "array",
          "description": "References of the service."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "version": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "type": {
          "x-ntnx-enum": [
            "SNAPSHOT",
            "ISO",
            "DEB",
            "RPM",
            "DOCKER_IMAGE",
            "CHEF_COOKBOOK",
            "PUPPET_MANIFEST",
            "CUSTOM",
            "SUBSTRATE_IMAGE",
            "K8S_IMAGE"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "type": "object",
          "description": "Details based on type of the package."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Package element for Application"
    },
    "marketplace_icon_def_status": {
      "description": "An intentful representation of a marketplace_icon status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "marketplace_icon Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the marketplace_icon."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the marketplace_icon, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/marketplace_icon_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for marketplace_icon."
        }
      },
      "title": "marketplace_icon Intent Status with placement specified"
    },
    "quota_metadata": {
      "description": "The quota kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when quota was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "quota",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "quota"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "quota uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the quota is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when quota was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the quota. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the quota. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "quota name",
          "maxLength": 80
        }
      },
      "title": "quota metadata"
    },
    "api_key_list_response": {
      "description": "Response object of all API keys added to the system",
      "type": "object",
      "properties": {
        "total_matches": {
          "type": "number"
        },
        "entities": {
          "items": {
            "$ref": "#/definitions/api_key_output"
          },
          "type": "array"
        }
      },
      "title": "API keys list response"
    },
    "runbook_intent_resource": {
      "description": "Response object for intentful operations on a runbook",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/runbook_def_status"
        },
        "spec": {
          "$ref": "#/definitions/runbook"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Response"
    },
    "cluster_intent_input": {
      "description": "An intentful representation of a cluster",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/cluster"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/cluster_metadata"
        }
      },
      "title": "cluster Intent Entity"
    },
    "app_runlog_output": {
      "description": "Response of app runlog response output",
      "type": "object",
      "properties": {
        "trl_id": {
          "type": "string"
        },
        "output": {
          "type": "string"
        }
      },
      "title": "Response of app runlog result output"
    },
    "quota_reference": {
      "description": "The reference to a quota",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "quota",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "quota"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a quota"
    },
    "app_task_intent_resource": {
      "description": "Response object for intentful operations on a app_task",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_task_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_task"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_task_metadata"
        }
      },
      "title": "app_task Intent Response"
    },
    "endpoint_list_input": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "endpoint",
          "x-ntnx-enum": [
            "endpoint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "advanced_filter": {
          "$ref": "#/definitions/endpoint_filters"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for endpoint list"
    },
    "license_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "license",
          "x-ntnx-enum": [
            "license"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for license list"
    },
    "app_variable_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_variable",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_variable"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "disk_storage_config": {
      "description": "This preference specifies the storage configuration parameters for VM disks.\n",
      "type": "object",
      "properties": {
        "flash_mode": {
          "description": "State of the storage policy to pin this virtual disk to the hot tier.\nIt overrides the VM preference when Flash Mode is enabled on the VM\nof this virtual disk.\n",
          "$ref": "#/definitions/flash_mode"
        },
        "storage_container_reference": {
          "description": "This reference is for disk level storage container preference. This preference specifies the storage container to which this disk belongs.\n",
          "$ref": "#/definitions/reference"
        }
      },
      "title": "Disk Storage Configuration"
    },
    "policy_event_resources_def_status": {
      "description": "Policy Event resources",
      "required": [
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "message_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Policy Event resources"
    },
    "approval_request_resources": {
      "type": "object",
      "description": "Approval Request resources",
      "title": "Approval Request resources"
    },
    "aws_machine_type_metadata": {
      "description": "The aws_machine_type kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_machine_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_machine_type"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_machine_type name"
        }
      },
      "title": "aws_machine_type metadata"
    },
    "app_package_input_upload": {
      "description": "Package definition for Application",
      "required": [
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "image_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s image spec"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_reference_upload"
          },
          "type": "array",
          "description": "References of the service."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "version": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_package_reference_upload"
        },
        "type": {
          "x-ntnx-enum": [
            "SNAPSHOT",
            "ISO",
            "DEB",
            "RPM",
            "DOCKER_IMAGE",
            "CHEF_COOKBOOK",
            "PUPPET_MANIFEST",
            "CUSTOM",
            "SUBSTRATE_IMAGE",
            "K8S_IMAGE"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "type": "object",
          "description": "Details based on type of the package."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Package for Application"
    },
    "license_reference": {
      "description": "The reference to a license",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "license",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "license"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a license"
    },
    "app_substrate_readiness_probe": {
      "description": "Readiness probe for substrate",
      "type": "object",
      "properties": {
        "connection_type": {
          "x-ntnx-enum": [
            "SSH",
            "POWERSHELL"
          ],
          "type": "string",
          "description": ""
        },
        "retries": {
          "default": "5",
          "type": "string",
          "description": "Number of times to retry the connection in case of login failure"
        },
        "connection_protocol": {
          "type": "string",
          "description": ""
        },
        "disable_readiness_probe": {
          "type": "boolean",
          "description": ""
        },
        "timeout_secs": {
          "type": "string",
          "description": ""
        },
        "address": {
          "type": "string",
          "description": ""
        },
        "delay_secs": {
          "type": "string",
          "description": "Delay after substrate provision"
        },
        "connection_port": {
          "default": 22,
          "type": "integer",
          "description": ""
        },
        "login_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        }
      },
      "title": "Readiness probe for substrate"
    },
    "right_hand_side": {
      "properties": {
        "categories": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "The category values represented as a dictionary of key -> list of values. e.g.{\"env\":[\"env1\", \"env2\"]}\n"
        },
        "collection": {
          "x-ntnx-enum": [
            "ALL",
            "SELF_OWNED"
          ],
          "type": "string",
          "description": "A representative term for supported groupings of entities. ALL = All the entities of a given kind. SELF_OWNED = The entities of a given kind, that are owned by the user.\n"
        },
        "uuid_list": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "The explicit list of UUIDs for the given kind."
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "collection"
          ]
        },
        {
          "required": [
            "categories"
          ]
        },
        {
          "required": [
            "uuid_list"
          ]
        }
      ],
      "type": "object",
      "description": "The right hand side of an expression.",
      "title": "The right hand side (RHS) of an expression."
    },
    "app_saas_consumption_reference": {
      "description": "The reference to a app_saas_consumption",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_saas_consumption",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_saas_consumption"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_saas_consumption"
    },
    "blueprint_upload_custom_intent_input": {
      "description": "An intentful representation of a blueprint",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_upload"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Entity"
    },
    "app_protection_policy_resources_def_status": {
      "description": "AppProtectionPolicy resources",
      "required": [
        "state",
        "last_evaluated",
        "app_count",
        "envirnoment_reference_list",
        "action_list"
      ],
      "type": "object",
      "properties": {
        "envirnoment_reference_list": {
          "items": {
            "$ref": "#/definitions/environment_reference"
          },
          "type": "array"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "app_count": {
          "type": "integer",
          "description": "app count protected using this rule"
        },
        "state": {
          "type": "string"
        },
        "last_evaluated": {
          "type": "integer",
          "description": "when the rule was evaluated last."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "AppProtectionPolicy resources"
    },
    "app_runbook_response_download": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_response_download"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference_upload"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "app_protection_policy_metadata": {
      "description": "The app_protection_policy kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_protection_policy was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_protection_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_protection_policy"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_protection_policy uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_protection_policy is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_protection_policy was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_protection_policy. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_protection_policy. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_protection_policy name",
          "maxLength": 80
        }
      },
      "title": "app_protection_policy metadata"
    },
    "rule_node_reference": {
      "description": "The reference to a rule_node",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "rule_node",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "rule_node"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a rule_node"
    },
    "xi_metadata": {
      "description": "The xi kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when xi was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "xi",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "xi"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "xi uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the xi is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when xi was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the xi. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the xi. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "xi name",
          "maxLength": 80
        }
      },
      "title": "xi metadata"
    },
    "app_profile_input": {
      "description": "App profile resources",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "deployment_create_list": {
          "items": {
            "$ref": "#/definitions/blueprint_deployment_input"
          },
          "type": "array",
          "description": ""
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environment uuids which are attached the app profile"
        },
        "patch_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to app edit patches\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "App profile resource"
    },
    "xi_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "xi",
          "x-ntnx-enum": [
            "xi"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for xi list"
    },
    "quota_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "quota",
          "x-ntnx-enum": [
            "quota"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for quota list"
    },
    "vm_vnuma_config": {
      "description": "Indicates how VM vNUMA should be configured\n",
      "type": "object",
      "properties": {
        "num_vnuma_nodes": {
          "type": "integer",
          "description": "Number of vNUMA nodes. 0 means vNUMA is disabled.",
          "format": "int64"
        }
      },
      "title": "VM vNUMA configuration"
    },
    "feature_calm_detected_dr": {
      "required": [
        "ui_visibility"
      ],
      "type": "object",
      "properties": {
        "ui_visibility": {
          "x-ntnx-enum": [
            "hidden",
            "enabled",
            "disabled"
          ],
          "type": "string",
          "description": ""
        }
      }
    },
    "app_variable_list_intent_response": {
      "description": "Response object for intentful operation of app_variables",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_variable_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_variable_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "category_filter": {
      "description": "CategoryFilter for App Protection Rule",
      "type": "object",
      "properties": {
        "type": {
          "default": "CATEGORIES_MATCH_ANY",
          "x-ntnx-enum": [
            "CATEGORIES_MATCH_ANY",
            "CATEGORIES_MATCH_ALL"
          ],
          "type": "string"
        },
        "params": {
          "additionalProperties": true,
          "type": "object",
          "description": "category-category value list pairs"
        }
      },
      "title": "CategoryFilter"
    },
    "aws_key_pair_def_status": {
      "description": "aws_key_pair resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_key_pair name."
        },
        "resources": {
          "$ref": "#/definitions/aws_key_pair_resources_def_status"
        }
      },
      "title": "aws_key_pair resources status"
    },
    "vm_snapshot_input": {
      "description": "Input object for the snapshot API. User can provide optional UUID of the vm_recovery_point that will be created as a result of this operation.\n",
      "type": "object",
      "properties": {
        "creation_time": {
          "type": "string",
          "description": "The target time at which the user wishes to have a fully usable\nrecovery point. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T22:10:10Z, this represents 10 minutes and 10.10\nseconds after the 22nd hour of April 12th, 1985 in UTC. The backend\nwill generate a complete recovery point out of the closest available\npartial backend recovery point that is created on or before the\nprovided timestamp. This field is explicitly used for the realization\nsemantics for high frequency snapshotting. If this field is set, none\nof the other fields in this parameter are valid.\n",
          "format": "date-time"
        },
        "expiration_time": {
          "type": "string",
          "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). If not\nset, then the recovery point never expires.\n",
          "format": "date-time"
        },
        "vm_recovery_point_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "Name of the recovery point.",
          "maxLength": 64
        },
        "recovery_point_type": {
          "x-ntnx-enum": [
            "CRASH_CONSISTENT",
            "APPLICATION_CONSISTENT"
          ],
          "type": "string",
          "description": "Crash consistent or Application Consistent recovery point"
        }
      },
      "title": "Snapshot API input"
    },
    "availability_zone_reference": {
      "description": "The reference to a availability_zone",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "availability_zone",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "availability_zone"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a availability_zone"
    },
    "schedule_info": {
      "type": "object",
      "x-ntnx-one-of": [
        {
          "required": [
            "schedule"
          ]
        },
        {
          "required": [
            "execution_time"
          ]
        }
      ],
      "properties": {
        "execution_time": {
          "type": "string",
          "description": "execution time for one time jobs"
        },
        "start_time": {
          "type": "string",
          "description": "start time for recurring job"
        },
        "expiry_time": {
          "type": "string",
          "description": "expiration time for jobs after which they wont be executed"
        },
        "time_zone": {
          "type": "string",
          "description": "time zone of the user"
        },
        "schedule": {
          "type": "string",
          "description": "job schedule in cron format"
        }
      }
    },
    "aws_security_group_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_security_group",
          "x-ntnx-enum": [
            "aws_security_group"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_security_group list output"
    },
    "entity_usage": {
      "description": "Entity usage",
      "type": "object",
      "properties": {
        "usage": {
          "$ref": "#/definitions/entity_usage_def"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity"
        },
        "uuid": {
          "type": "string",
          "description": "Uuid of the entity"
        }
      },
      "title": "Entity usage"
    },
    "api_version": {
      "default": "3.1.0",
      "readOnly": true,
      "type": "string",
      "description": "API Version of the Nutanix v3 API framework.",
      "title": "API Version"
    },
    "runbook": {
      "description": "An intentful representation of a runbook spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "runbook Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for runbook.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/runbook_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "runbook Intent Spec with placement specified"
    },
    "runbook_runlog_output": {
      "description": "Response of app runlog response output",
      "type": "object",
      "properties": {
        "trl_id": {
          "type": "string"
        },
        "output": {
          "type": "string"
        }
      },
      "title": "Response of app runlog result output"
    },
    "aws_volume_type_resources_def_status": {
      "description": "aws_volume_type resources",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The volume type name."
        }
      },
      "title": "aws_volume_type resources"
    },
    "network_group_reference": {
      "description": "The reference to a network_group",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a network_group"
    },
    "runbook_marketplace_execute_spec": {
      "description": "Spec for Runbook execute.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "resources": {
          "description": "Runbook spec of the marketplace runbook.",
          "$ref": "#/definitions/runbook_marketplace_execute_resources"
        }
      },
      "title": "Spec for Runbook execute."
    },
    "entity_compliance_status": {
      "description": "An entity's compliance status details.",
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "If the entity in not in compliance, this field shows the reason as to why not.\n"
        },
        "compliance_state": {
          "$ref": "#/definitions/policy_compliance_state"
        },
        "entity_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The entity UUID."
        },
        "policy_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The policy UUID."
        }
      },
      "title": "Entity Compliance with a Policy"
    },
    "app_pricing_state_cost": {
      "description": "Pricing definition for account.",
      "required": [
        "state",
        "cost_list"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "State that this pricing is applicable for."
        },
        "cost_list": {
          "items": {
            "$ref": "#/definitions/app_pricing_cost"
          },
          "type": "array",
          "description": "List of pricing costs"
        }
      },
      "title": "Pricing for account"
    },
    "recovery_plan_vm_ip_assignment": {
      "description": "IP configuration to be applied to a VM.\n",
      "required": [
        "vm_reference",
        "ip_config_list"
      ],
      "type": "object",
      "properties": {
        "ip_config_list": {
          "items": {
            "required": [
              "ip_address"
            ],
            "type": "object",
            "description": "IP configuration.\n",
            "properties": {
              "ip_address": {
                "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
                "type": "string",
                "description": "IP address.\n"
              }
            }
          },
          "type": "array",
          "description": "List of IP configurations for a VM.\n"
        },
        "vm_reference": {
          "description": "Reference to the VM.",
          "$ref": "#/definitions/vm_reference"
        }
      },
      "title": "IP configuration for a VM\n"
    },
    "vpc_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vpc",
          "x-ntnx-enum": [
            "vpc"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for vpc list"
    },
    "runbook_runbook_input": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "output_variables": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output Variables for runbook"
        },
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_input"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "node_details": {
      "description": "Node information to be used by licensing service for CBL",
      "required": [
        "uuid"
      ],
      "type": "object",
      "properties": {
        "block_serial_name": {
          "type": "string",
          "description": "This is the serial number for the host"
        },
        "physical_capacity": {
          "type": "object",
          "description": "Physical capacity of the host, cores, disks etc."
        },
        "model_name": {
          "type": "string",
          "description": "This is the model name of the host"
        },
        "name": {
          "type": "string",
          "description": "This is the name of the host"
        },
        "uuid": {
          "type": "string",
          "description": "This is the uuid of the host"
        }
      },
      "title": "Node Information"
    },
    "network_group_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group",
          "x-ntnx-enum": [
            "network_group"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for network_group list"
    },
    "vm_intent_input": {
      "description": "An intentful representation of a vm",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/vm"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_metadata"
        }
      },
      "title": "vm Intent Entity"
    },
    "feature_approval_policy_email_settings": {
      "description": "Approval email settings used for email notification",
      "type": "object",
      "properties": {
        "requester_email_template": {
          "$ref": "#/definitions/email_template"
        },
        "approver_email_template": {
          "$ref": "#/definitions/email_template"
        }
      },
      "title": "Approval email notification settings"
    },
    "approval_request": {
      "description": "An intentful representation of a approval_request spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "approval_request Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for approval_request.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/approval_request_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "approval_request Intent Spec with placement specified"
    },
    "aws_machine_type_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_machine_type_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_machine_type_list_metadata_output"
        }
      },
      "title": "aws_machine_type entity list"
    },
    "app_endpoint_response_download": {
      "description": "Endpoint definition",
      "required": [
        "name",
        "type",
        "attrs"
      ],
      "type": "object",
      "properties": {
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Endpoint definition"
    },
    "availability_zone_metadata": {
      "description": "The availability_zone kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when availability_zone was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "availability_zone",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "availability_zone"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "availability_zone uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the availability_zone is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when availability_zone was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the availability_zone. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the availability_zone. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "availability_zone name",
          "maxLength": 80
        }
      },
      "title": "availability_zone metadata"
    },
    "subnet_intent_resource": {
      "description": "Response object for intentful operations on a subnet",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/subnet_def_status"
        },
        "spec": {
          "$ref": "#/definitions/subnet"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/subnet_metadata"
        }
      },
      "title": "subnet Intent Response"
    },
    "app_config_spec_reference_upload": {
      "description": "The reference to a app_config_spec",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_config_spec",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_config_spec"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_config_spec"
    },
    "app_deployment_reference": {
      "description": "The reference to a app_deployment",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_deployment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_deployment"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_deployment"
    },
    "app_variable_reference": {
      "description": "The reference to a app_variable",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_variable",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_variable"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_variable"
    },
    "blueprint_marketplace_express_launch_input": {
      "description": "Launch Blueprint request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "description": "Details of the Marketplace item and project to be launched",
          "required": [
            "marketplace_item_uuid",
            "project_uuid"
          ],
          "type": "object",
          "properties": {
            "marketplace_item_uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "description": "UUID of the Marketplace item to be launched",
              "format": "UUID"
            },
            "project_uuid": {
              "type": "string",
              "description": "UUID of the Project to be launched with"
            }
          },
          "title": "Express launch spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Express launch Marketplace Blueprint request."
    },
    "oplog_usage": {
      "description": "oplog disk usage.",
      "type": "object",
      "properties": {
        "oplog_disk_pct": {
          "type": "number",
          "description": "Oplog disk size used in percentage.",
          "format": "float"
        },
        "oplog_disk_size": {
          "type": "integer",
          "description": "Size of oplog disk in bytes.",
          "format": "int64"
        }
      },
      "title": "Host oplog disk usage stats"
    },
    "replication_connection_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "replication_connection",
          "x-ntnx-enum": [
            "replication_connection"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for replication_connection list"
    },
    "cloud_credentials_def_status": {
      "description": "Cloud credentials configuration",
      "required": [
        "id",
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "readOnly": true,
          "type": "string",
          "description": "The state of the entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "type": "integer",
          "description": "ID to uniquely identify cloud credentials",
          "format": "int64"
        },
        "resources": {
          "$ref": "#/definitions/cloud_credentials_resources"
        },
        "name": {
          "type": "string",
          "description": "Credentials name."
        }
      },
      "title": "Cloud credentials Configuration"
    },
    "app_saas_consumption_list_intent_response": {
      "description": "Response object for intentful operation of app_saas_consumptions",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_saas_consumption_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_saas_consumption_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "resource_domain_spec": {
      "description": "Resource domain specification (limits)",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/resource_utilization_spec"
          },
          "type": "array",
          "description": "The utilization limits for resource types"
        }
      },
      "title": "Resource Domain Spec"
    },
    "policy_action_type_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_action_type",
          "x-ntnx-enum": [
            "policy_action_type"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for policy_action_type list"
    },
    "task_reference": {
      "description": "The reference to a task",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "task"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a task"
    },
    "access_control_policy_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "access_control_policy",
          "x-ntnx-enum": [
            "access_control_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for access_control_policy list output"
    },
    "aws_region_list_metadata": {
      "type": "object",
      "description": "All api calls will return aws regions\n",
      "title": "Metadata for aws_region list"
    },
    "image_placement_policy_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image_placement_policy",
          "x-ntnx-enum": [
            "image_placement_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for image_placement_policy list output"
    },
    "policy_compliance_state": {
      "x-ntnx-enum": [
        "COMPLIANT",
        "NON_COMPLIANT",
        "UNKNOWN"
      ],
      "type": "string",
      "description": "Compliance state enum.",
      "title": "Policy Compliance State Enum"
    },
    "aws_region_resource": {
      "description": "aws_region entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_region_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_region_metadata"
        }
      },
      "title": "aws_region"
    },
    "task_metadata": {
      "description": "The task kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when task was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "task",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "task"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "task uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the task is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when task was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the task. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the task. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "task name",
          "maxLength": 80
        }
      },
      "title": "task metadata"
    },
    "app_credential_update_input": {
      "description": "input for credential update",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_credential_update_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "input for credential update"
    },
    "app_protection_policy": {
      "description": "An intentful representation of a app_protection_policy spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_protection_policy Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_protection_policy.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_protection_policy_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_protection_policy Intent Spec with placement specified"
    },
    "meter_list_response_entity": {
      "type": "object",
      "description": "Wrapper for entities in response",
      "properties": {
        "status": {
          "type": "object",
          "properties": {
            "resources": {
              "type": "object",
              "$ref": "#/definitions/metering_entry"
            }
          }
        },
        "spec": {
          "type": "object"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "cluster_network": {
      "description": "Cluster network.",
      "type": "object",
      "properties": {
        "masquerading_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "The cluster NAT'd or proxy IP which maps to the cluster local IP.\n"
        },
        "masquerading_port": {
          "type": "integer",
          "description": "Port used together with masquerading_ip to connect to the cluster.\n",
          "format": "int32"
        },
        "external_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "The local IP of cluster visible externally."
        },
        "http_proxy_list": {
          "items": {
            "$ref": "#/definitions/cluster_network_entity"
          },
          "type": "array",
          "description": "List of proxies to connect to the service centers."
        },
        "smtp_server": {
          "$ref": "#/definitions/smtp_server"
        },
        "ntp_server_ip_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of IP addresses or FQDNs of the NTP servers."
        },
        "external_subnet": {
          "default": "172.16.0.0/255.240.0.0",
          "type": "string",
          "description": "External subnet for cross server communication. The format is\nIP/netmask.\n"
        },
        "nfs_subnet_whitelist": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that\nare allowed to send NFS requests to this container. If not specified,\nthe global NFS whitelist will be looked up for access permission.\nThe internal subnet is always automatically considered part of the\nwhitelist, even if the field below does not explicitly specify it.\nSimilarly, all the hypervisor IPs are considered part of the\nwhitelist. Finally, to permit debugging, all of the SVMs local IPs\nare considered to be implicitly part of the whitelist.\n"
        },
        "external_data_services_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "The cluster IP address that provides external entities access to\nvarious cluster data services.\n"
        },
        "domain_server": {
          "$ref": "#/definitions/cluster_domain_server"
        },
        "fully_qualified_domain_name": {
          "type": "string",
          "description": "fully qualified domain name of the cluster visible externally."
        },
        "name_server_ip_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "The list of IP addresses of the name servers."
        },
        "http_proxy_whitelist": {
          "items": {
            "$ref": "#/definitions/http_proxy_whitelist"
          },
          "type": "array",
          "description": "HTTP proxy whitelist."
        },
        "internal_subnet": {
          "default": "192.168.5.0/255.255.255.0",
          "type": "string",
          "description": "The internal subnet is local to every server - its not visible\noutside.iSCSI requests generated internally within the appliance\n(by user VMs or VMFS) are sent to the internal subnet. The format is\nIP/netmask.\n"
        },
        "default_vswitch_config": {
          "description": "Configuration for the default vswitch (br0) present on all nodes of\nthis cluster. This is considered internal only and is not supported\non this version of AOS.\n",
          "$ref": "#/definitions/vswitch_config"
        }
      },
      "title": "Cluster Network Configuration"
    },
    "policy_event_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_event",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_event"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "category_query_input": {
      "description": "Categories query input object.",
      "type": "object",
      "properties": {
        "usage_type": {
          "$ref": "#/definitions/category_query_usage_type"
        },
        "group_member_offset": {
          "type": "integer",
          "description": "The offset into the total member set to return per group.",
          "format": "int64"
        },
        "group_member_count": {
          "type": "integer",
          "description": "The maximum number of members to return per group.",
          "format": "int64"
        },
        "category_filter": {
          "$ref": "#/definitions/category_filter"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Category Query Input"
    },
    "aws_vpc_metadata": {
      "description": "The aws_vpc kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_vpc",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_vpc"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_vpc name"
        }
      },
      "title": "aws_vpc metadata"
    },
    "replication_connection_intent_resource": {
      "description": "Response object for intentful operations on a replication_connection",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/replication_connection_def_status"
        },
        "spec": {
          "$ref": "#/definitions/replication_connection"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/replication_connection_metadata"
        }
      },
      "title": "replication_connection Intent Response"
    },
    "environment_usage_response": {
      "description": "Environment usage details",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/environment_usage_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        }
      },
      "title": "Environment usage"
    },
    "user_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user",
          "x-ntnx-enum": [
            "user"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for user list"
    },
    "project_internal": {
      "description": "A Project resource, combined with Users and ACPs",
      "required": [
        "project_detail"
      ],
      "type": "object",
      "properties": {
        "access_control_policy_list": {
          "items": {
            "required": [
              "operation",
              "acp",
              "metadata"
            ],
            "type": "object",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD",
                  "DELETE",
                  "UPDATE"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "acp": {
                "$ref": "#/definitions/access_control_policy_input"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "The list of ACPs to be attached to the users belonging to a project.\n"
        },
        "project_detail": {
          "description": "A Project resource.",
          "required": [
            "name",
            "resources"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project name.",
              "maxLength": 64
            },
            "resources": {
              "type": "object",
              "properties": {
                "resource_domain": {
                  "$ref": "#/definitions/resource_domain_spec"
                },
                "account_reference_list": {
                  "items": {
                    "$ref": "#/definitions/account_reference"
                  },
                  "type": "array",
                  "description": "List of accounts associated with the project."
                },
                "environment_reference_list": {
                  "items": {
                    "$ref": "#/definitions/environment_reference"
                  },
                  "type": "array",
                  "description": "List of environments associated with the project."
                },
                "default_subnet_reference": {
                  "description": "Optional default subnet if one is specified",
                  "$ref": "#/definitions/subnet_reference"
                },
                "user_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_reference"
                  },
                  "type": "array",
                  "description": "List of users in the project."
                },
                "tunnel_reference_list": {
                  "items": {
                    "$ref": "#/definitions/tunnel_reference"
                  },
                  "type": "array",
                  "description": "List of tunnels associated with the project."
                },
                "external_user_group_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_group_reference"
                  },
                  "type": "array",
                  "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                },
                "subnet_reference_list": {
                  "items": {
                    "$ref": "#/definitions/subnet_reference"
                  },
                  "type": "array",
                  "description": "List of subnets for the project."
                },
                "external_network_list": {
                  "items": {
                    "$ref": "#/definitions/external_network"
                  },
                  "type": "array",
                  "description": "List of external network associated with the project."
                },
                "default_environment_reference": {
                  "description": "Optional default environment if one is specified",
                  "$ref": "#/definitions/environment_reference"
                }
              },
              "title": "Project Resources"
            },
            "description": {
              "type": "string",
              "description": "Project description.",
              "maxLength": 1000
            }
          },
          "title": "Project details"
        },
        "user_list": {
          "items": {
            "required": [
              "operation",
              "user",
              "metadata"
            ],
            "type": "object",
            "description": "The details of the user such as principal name and\ndirectory_service_reference. Also contains metadata.\n",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "user": {
                "$ref": "#/definitions/user"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "The list of user specification to be associated with the project.\n"
        },
        "user_group_list": {
          "items": {
            "required": [
              "operation",
              "user_group",
              "metadata"
            ],
            "type": "object",
            "description": "The details of the user group\n",
            "properties": {
              "operation": {
                "x-ntnx-enum": [
                  "ADD"
                ],
                "type": "string",
                "description": "Indicates the action(add, delete, update)"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              },
              "user_group": {
                "$ref": "#/definitions/user_group"
              }
            }
          },
          "type": "array",
          "description": "The list of user group specification to be associated with the project.\n"
        }
      },
      "title": "Project details, combined with Users and ACPs"
    },
    "vmware_library_entities": {
      "description": "restful represtation of the library entity response",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "type": "object",
          "properties": {
            "resources": {
              "$ref": "#/definitions/vmware_library_resource"
            }
          }
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "kind": {
              "readOnly": true,
              "type": "string",
              "description": "the kind name"
            }
          }
        }
      },
      "title": "library entity response"
    },
    "cluster_config": {
      "description": "Cluster Configuration.",
      "type": "object",
      "properties": {
        "gpu_driver_version": {
          "type": "string",
          "description": "GPU driver version."
        },
        "client_auth": {
          "$ref": "#/definitions/client_auth"
        },
        "authorized_public_key_list": {
          "items": {
            "$ref": "#/definitions/public_key"
          },
          "type": "array",
          "description": "List of valid ssh keys for the cluster."
        },
        "software_map": {
          "additionalProperties": {
            "$ref": "#/definitions/cluster_software"
          },
          "type": "object",
          "description": "Map of software on the cluster with software type as the\nkey.\n"
        },
        "encryption_status": {
          "$ref": "#/definitions/encryption_status"
        },
        "ssl_key": {
          "readOnly": true,
          "$ref": "#/definitions/ssl_key"
        },
        "service_list": {
          "readOnly": true,
          "$ref": "#/definitions/cluster_service_list"
        },
        "supported_information_verbosity": {
          "default": "BASIC_PLUS_CORE_DUMP",
          "x-ntnx-enum": [
            "NOTHING",
            "BASIC",
            "BASIC_PLUS_CORE_DUMP",
            "ALL"
          ],
          "type": "string",
          "description": "Verbosity level settings for populating support information.\n- 'Nothing': Send nothing\n- 'Basic': Send basic information - skip core dump and hypervisor\n           stats information\n- 'BasicPlusCoreDump': Send basic and core dump information\n- 'All': Send all information\n"
        },
        "certification_signing_info": {
          "$ref": "#/definitions/certification_signing_info"
        },
        "redundancy_factor": {
          "type": "integer",
          "description": "Cluster supported redundancy factor.",
          "format": "int32"
        },
        "external_configurations": {
          "description": "External Connector Configurations.",
          "$ref": "#/definitions/external_configurations"
        },
        "operation_mode": {
          "$ref": "#/definitions/cluster_operation_mode"
        },
        "ca_certificate_list": {
          "items": {
            "$ref": "#/definitions/ca_cert"
          },
          "readOnly": true,
          "type": "array",
          "description": "List of cluster trusted CA certificates."
        },
        "domain_awareness_level": {
          "default": "NODE",
          "x-ntnx-enum": [
            "DISK",
            "NODE",
            "BLOCK",
            "RACK"
          ],
          "type": "string",
          "description": "Domain awareness supported on cluster."
        },
        "enabled_feature_list": {
          "items": {
            "x-ntnx-enum": [
              "LOCK_DOWN_ENABLED",
              "PASSWORD_REMOTE_LOGIN_ENABLED",
              "SHADOW_CLONES_ENABLED",
              "COMMON_CRITERIA_MODE_ENABLED",
              "SSP_CONFIGURED",
              "ACS_ENABLED",
              "NETWORK_FLOW_STATS_COLLECTOR_ENABLED"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Array of enabled features."
        },
        "is_available": {
          "readOnly": true,
          "type": "boolean",
          "description": "Indicates if cluster is available to contact."
        },
        "build": {
          "readOnly": true,
          "$ref": "#/definitions/build_info"
        },
        "timezone": {
          "type": "string",
          "description": "Zone name used in value of TZ environment variable."
        },
        "enable_efficient_metric_sync": {
          "type": "boolean",
          "description": "Indicates if downsampling of metrics syncing between PE\nand PC is enabled or not.\n"
        },
        "cluster_arch": {
          "readOnly": true,
          "type": "string",
          "x-ntnx-enum": [
            "X86_64",
            "PPC64LE"
          ],
          "description": "Cluster architecture."
        },
        "management_server_list": {
          "items": {
            "$ref": "#/definitions/cluster_management_server"
          },
          "readOnly": true,
          "type": "array",
          "description": "List of cluster management servers."
        }
      },
      "title": "Cluster Configuration"
    },
    "aws_availability_zone_metadata": {
      "description": "The aws_availability_zone kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_availability_zone",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_availability_zone"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_availability_zone name"
        }
      },
      "title": "aws_availability_zone metadata"
    },
    "identity_provider_reference": {
      "description": "The reference to a identity_provider",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "identity_provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "identity_provider"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a identity_provider"
    },
    "app_task_input": {
      "description": "Task definition for Application.",
      "required": [
        "name",
        "uuid",
        "type"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Task for Application"
    },
    "app_substrate_readiness_probe_upload": {
      "description": "Readiness probe for substrate",
      "type": "object",
      "properties": {
        "connection_type": {
          "x-ntnx-enum": [
            "SSH",
            "POWERSHELL"
          ],
          "type": "string",
          "description": ""
        },
        "retries": {
          "default": "5",
          "type": "string",
          "description": "Number of times to retry the connection in case of login failure"
        },
        "connection_protocol": {
          "type": "string",
          "description": ""
        },
        "disable_readiness_probe": {
          "type": "boolean",
          "description": ""
        },
        "timeout_secs": {
          "type": "string",
          "description": ""
        },
        "address": {
          "type": "string",
          "description": ""
        },
        "delay_secs": {
          "type": "string",
          "description": "Delay after substrate provision"
        },
        "connection_port": {
          "default": 22,
          "type": "integer",
          "description": ""
        },
        "login_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference_upload"
        }
      },
      "title": "Readiness probe for substrate"
    },
    "aws_volume_type_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_volume_type_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_volume_type_list_metadata_output"
        }
      },
      "title": "aws_volume_type entity list"
    },
    "feature_policy_input": {
      "description": "Input for feature - Policy Engine",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_policy"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Input for feature - Policy Engine"
    },
    "blueprint_pending_launches_status": {
      "description": "Response containing state, milestone reached and application uuid",
      "type": "object",
      "properties": {
        "application_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "application uuid present after the status moves to success",
          "format": "UUID"
        },
        "app_name": {
          "type": "string",
          "description": "name of the application"
        },
        "state": {
          "type": "string",
          "description": "Status of the launch"
        },
        "blueprint_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "blueprint uuid",
          "format": "UUID"
        },
        "details": {
          "type": "string",
          "description": "additional details about the status of launch"
        },
        "milestone": {
          "type": "string",
          "description": "gives more granularity in status"
        },
        "bp_name": {
          "type": "string",
          "description": "name of the blueprint"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for app blueprint"
        }
      },
      "title": "Status of the launch"
    },
    "cluster_intent_response": {
      "description": "Response object for intentful operations on a cluster",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/cluster_def_status"
        },
        "spec": {
          "$ref": "#/definitions/cluster"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/cluster_metadata"
        }
      },
      "title": "cluster Intent Response"
    },
    "policy_action_type_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_action_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_action_type"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_runbook_reference_upload": {
      "description": "The reference to a app_runbook",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runbook",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_runbook"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_runbook"
    },
    "guest_customization": {
      "description": "VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.\n",
      "title": "Guest Customization Configuration for creation/modification request",
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "properties": {
        "cloud_init": {
          "description": "If this field is set, the guest will be customized using cloud-init. Either user_data or custom_key_values should be provided. If custom_key_ves are provided then the user data will be generated using these key-value pairs.\n",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "user_data"
              ]
            },
            {
              "required": [
                "custom_key_values"
              ]
            }
          ],
          "properties": {
            "meta_data": {
              "type": "string",
              "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n",
              "maxLength": 32000
            },
            "user_data": {
              "type": "string",
              "description": "The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n",
              "maxLength": 128000
            },
            "custom_key_values": {
              "$ref": "#/definitions/custom_generic_key_value_pair"
            }
          }
        },
        "is_overridable": {
          "default": false,
          "type": "boolean",
          "description": "Flag to allow override of customization by deployer."
        },
        "sysprep": {
          "description": "If this field is set, the guest will be customized using Sysprep. Either unattend_xml or custom_key_values should be provided. If custom_key_values are provided then the unattended answer file will be generated using these key-value pairs.\n",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "unattend_xml"
              ]
            },
            {
              "required": [
                "custom_key_values"
              ]
            }
          ],
          "properties": {
            "install_type": {
              "default": "PREPARED",
              "x-ntnx-enum": [
                "FRESH",
                "PREPARED"
              ],
              "type": "string",
              "description": "Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is \"PREPARED\".\n"
            },
            "unattend_xml": {
              "type": "string",
              "description": "This field contains a Sysprep unattend xml definition, as a string. The value must be base64 encoded.\n",
              "maxLength": 32000
            },
            "custom_key_values": {
              "$ref": "#/definitions/custom_generic_key_value_pair"
            }
          }
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "sysprep"
          ]
        },
        {
          "required": [
            "cloud_init"
          ]
        }
      ]
    },
    "policy_reference": {
      "description": "The reference to a policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a policy"
    },
    "vm_gpu": {
      "description": "Graphics resource information for the Virtual Machine.",
      "type": "object",
      "properties": {
        "vendor": {
          "x-ntnx-enum": [
            "NVIDIA",
            "INTEL",
            "AMD"
          ],
          "type": "string",
          "description": "The vendor of the GPU."
        },
        "mode": {
          "x-ntnx-enum": [
            "PASSTHROUGH_GRAPHICS",
            "PASSTHROUGH_COMPUTE",
            "VIRTUAL"
          ],
          "type": "string",
          "description": "The mode of this GPU."
        },
        "device_id": {
          "type": "integer",
          "description": "The device ID of the GPU.",
          "format": "int32"
        }
      },
      "title": "VirtualMachine GPU"
    },
    "policy_intent_input": {
      "description": "An intentful representation of a policy",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_metadata"
        }
      },
      "title": "policy Intent Entity"
    },
    "category_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "category",
          "x-ntnx-enum": [
            "category"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for category list output"
    },
    "job_executable_entity": {
      "description": "job executable entity",
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "runbook",
            "blueprint",
            "mpi",
            "app"
          ],
          "type": "string",
          "description": "type of job"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "job executable entity UUID",
          "format": "UUID"
        }
      },
      "title": "job executable entity"
    },
    "app_service_reference_upload": {
      "description": "The reference to a app_service",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_service"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_service"
    },
    "port_range": {
      "description": "Range of TCP/UDP ports.",
      "type": "object",
      "properties": {
        "end_port": {
          "minimum": 0,
          "type": "integer",
          "maximum": 65535,
          "format": "int32"
        },
        "start_port": {
          "minimum": 0,
          "type": "integer",
          "maximum": 65535,
          "format": "int32"
        }
      },
      "title": "TCP/UDP ports."
    },
    "image_list_intent_response": {
      "description": "Response object for intentful operation of images",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/image_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/image_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "job_instances_metadata": {
      "description": "Restful represtation of the job instance",
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when job instance was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "x-ntnx-enum": [
            "job_instance"
          ],
          "type": "string",
          "readOnly": true,
          "description": "The kind name"
        },
        "uuid": {
          "type": "string",
          "description": "job instance uuid",
          "format": "UUID"
        },
        "project_reference": {
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when job instance was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the job instance. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the job instance. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        }
      },
      "title": "job instance intent Enitity"
    },
    "app_cost_response_download": {
      "description": "Cost definition for Application",
      "required": [
        "name",
        "type",
        "interval",
        "value",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "interval": {
          "x-ntnx-enum": [
            "HOUR",
            "WEEK",
            "MONTH"
          ],
          "type": "string",
          "description": ""
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LIVE",
            "STATIC"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Cost for Application"
    },
    "tunnel_resources_def_status": {
      "description": "Tunnel resources definition.",
      "type": "object",
      "properties": {
        "credential_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "created_by": {
          "type": "string"
        }
      },
      "title": "Tunnel resources"
    },
    "environment_resources": {
      "description": "Resources for Environment.",
      "type": "object",
      "properties": {
        "infra_inclusion_list": {
          "items": {
            "$ref": "#/definitions/environment_infra_inclusion_list"
          },
          "type": "array",
          "description": "Infrastrucure included in the environment"
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_input"
          },
          "type": "array",
          "description": "Substrate definitions for Environment."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input"
          },
          "type": "array",
          "description": "Credential definitions for Environment."
        }
      },
      "title": "Resources for Environment."
    },
    "aws_vpc_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_vpc list"
    },
    "file_item_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "file_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "file_item"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "blueprint_list_input": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "blueprint",
          "x-ntnx-enum": [
            "blueprint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "advanced_filter": {
          "$ref": "#/definitions/blueprint_filters"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for blueprint list"
    },
    "tunnel_intent_response": {
      "description": "Response object for intentful operations on a tunnel",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/tunnel_def_status"
        },
        "spec": {
          "$ref": "#/definitions/tunnel"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/tunnel_metadata"
        }
      },
      "title": "tunnel Intent Response"
    },
    "app_deployment_input": {
      "description": "Deployment definition for Application.",
      "required": [
        "uuid",
        "name",
        "min_replicas",
        "max_replicas",
        "substrate"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "published_service_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_input"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "substrate": {
          "$ref": "#/definitions/app_substrate_input"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "service_list": {
          "items": {
            "$ref": "#/definitions/app_service_input"
          },
          "type": "array",
          "description": "List of references for services"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "package_list": {
          "items": {
            "$ref": "#/definitions/app_package_input"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "type": {
          "default": "GREENFIELD",
          "x-ntnx-enum": [
            "BROWNFIELD",
            "GREENFIELD",
            "K8S_DEPLOYMENT"
          ],
          "type": "string",
          "description": ""
        },
        "config_reference": {
          "$ref": "#/definitions/app_blueprint_deployment_reference"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "brownfield_instance_list": {
          "items": {
            "$ref": "#/definitions/brownfield_instance_input"
          },
          "type": "array",
          "description": "list of brownfield elements"
        }
      },
      "title": "Deployment definition for Application."
    },
    "runbook_runlog_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "runbook_runlog"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "meter_resources": {
      "type": "object",
      "description": "Resources which are metered at the moment",
      "properties": {
        "vcpu": {
          "type": "integer",
          "format": "int64"
        },
        "disk": {
          "type": "integer",
          "format": "int64"
        },
        "memory": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "app_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app",
          "x-ntnx-enum": [
            "app"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app list output"
    },
    "environment_usage_input": {
      "description": "Environment usage input filters",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/environment_usage_filter"
        }
      },
      "title": "Environment usage input filters"
    },
    "category_key": {
      "description": "Category key definition.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "description": {
          "type": "string",
          "description": "Description of the category.",
          "maxLength": 1000
        },
        "capabilities": {
          "$ref": "#/definitions/capabilities"
        },
        "name": {
          "type": "string",
          "description": "Name of the category.",
          "maxLength": 64
        }
      },
      "title": "Category Key definition."
    },
    "entity_reference": {
      "description": "Reference to an entity.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of the reference."
        },
        "type": {
          "x-ntnx-enum": [
            "CATEGORIES_MATCH_ALL",
            "CATEGORIES_MATCH_ANY"
          ],
          "type": "string",
          "description": "The type of filter being used."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the entity.",
          "format": "UUID"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the entity.",
          "maxLength": 64
        }
      },
      "title": "Entity Reference."
    },
    "groups_bucket_summary_map": {
      "additionalProperties": {
        "type": "integer",
        "format": "int64"
      },
      "type": "object",
      "description": "Group Bucket Summary Map.",
      "title": "Group Buckets Summary Map"
    },
    "identity_provider_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "identity_provider",
          "x-ntnx-enum": [
            "identity_provider"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for identity_provider list output"
    },
    "windows_domain": {
      "description": "Hyper-V node domain.",
      "required": [
        "domain_credential"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n"
        },
        "domain_name": {
          "type": "string",
          "description": "Full name of domain."
        },
        "domain_credential": {
          "$ref": "#/definitions/credentials"
        },
        "organization_unit_path": {
          "type": "string",
          "description": "Path to organization unit in the domain."
        },
        "name_prefix": {
          "type": "string",
          "description": "The name prefix in the domain in case of CPS deployment."
        },
        "name_server_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "The ip of name server that can resolve the domain name. Required during joining domain.\n"
        }
      },
      "title": "Hyper-v Domain"
    },
    "policy_resources": {
      "description": "Policy resources",
      "required": [
        "event_reference",
        "condition_list"
      ],
      "type": "object",
      "properties": {
        "condition_list": {
          "items": {
            "$ref": "#/definitions/condition_object"
          },
          "type": "array",
          "description": "List of Critria"
        },
        "action_reference_list": {
          "items": {
            "$ref": "#/definitions/action_reference"
          },
          "type": "array",
          "description": "Action references for this policy"
        },
        "category_list": {
          "additionalProperties": true,
          "type": "object",
          "description": "Categories for the policy. This allows assigning the policy to specific entities\n"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/action"
          },
          "type": "array",
          "description": "Actions for this policy"
        },
        "enabled": {
          "default": false,
          "type": "boolean",
          "description": "If this is false then policy will not be applied. To use this policy this value has to be set to True.\n"
        },
        "priority": {
          "type": "integer",
          "description": "Priority of this policy"
        },
        "event_reference": {
          "$ref": "#/definitions/policy_event_reference"
        }
      },
      "title": "Policy resources"
    },
    "user_group_reference": {
      "description": "The reference to a user_group",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "user_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user_group"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a user_group"
    },
    "runbook_runlog_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook_runlog",
          "x-ntnx-enum": [
            "runbook_runlog"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for runbook_runlog list output"
    },
    "aws_image_def_status": {
      "description": "aws_image resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_image name."
        },
        "resources": {
          "$ref": "#/definitions/aws_image_resources_def_status"
        }
      },
      "title": "aws_image resources status"
    },
    "job_executable_action": {
      "description": "job executable action",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "type of action"
        },
        "spec": {
          "$ref": "#/definitions/executable_action_spec"
        }
      },
      "title": "job executable action"
    },
    "project_internal_def_status": {
      "description": "A Project resource, combined with Users and ACPs.",
      "required": [
        "project_status"
      ],
      "type": "object",
      "properties": {
        "access_control_policy_list_status": {
          "items": {
            "type": "object",
            "description": "The acp status and metadata",
            "properties": {
              "access_control_policy_status": {
                "$ref": "#/definitions/access_control_policy_def_status"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "kind": {
                    "readOnly": true,
                    "type": "string"
                  },
                  "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                    "type": "string",
                    "format": "UUID"
                  }
                }
              }
            }
          },
          "type": "array",
          "description": "The list of access control policies associates with users in the project.\n"
        },
        "project_status": {
          "description": "A Project resource.",
          "required": [
            "name",
            "resources"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project name.",
              "maxLength": 64
            },
            "state": {
              "type": "string",
              "description": "The state of the project entity."
            },
            "reason": {
              "readOnly": true,
              "type": "string",
              "description": "One snake case word."
            },
            "message": {
              "readOnly": true,
              "type": "string",
              "description": "The reason for the state if in error."
            },
            "resources": {
              "type": "object",
              "properties": {
                "resource_domain": {
                  "$ref": "#/definitions/resource_domain_resources_status"
                },
                "account_reference_list": {
                  "items": {
                    "$ref": "#/definitions/account_reference"
                  },
                  "type": "array",
                  "description": "List of accounts associated with the project."
                },
                "environment_reference_list": {
                  "items": {
                    "$ref": "#/definitions/environment_reference"
                  },
                  "type": "array",
                  "description": "List of environments associated with the project."
                },
                "default_subnet_reference": {
                  "description": "Optional default subnet if one is specified",
                  "$ref": "#/definitions/subnet_reference"
                },
                "user_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_reference"
                  },
                  "type": "array",
                  "description": "List of users in the project including all the users from the\nusers group if provided.\n"
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Indicates if it is the default project. A default project is\nmanaged by the system and cannot be renamed or removed. If\nuser_reference_list or external_group_list is not specified,\nthen all users are given access to the default project.\n"
                },
                "tunnel_reference_list": {
                  "items": {
                    "$ref": "#/definitions/tunnel_reference"
                  },
                  "type": "array",
                  "description": "List of tunnels associated with the project."
                },
                "external_user_group_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_group_reference"
                  },
                  "type": "array",
                  "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                },
                "subnet_reference_list": {
                  "items": {
                    "$ref": "#/definitions/subnet_reference"
                  },
                  "type": "array",
                  "description": "List of subnets for the project."
                },
                "external_network_list": {
                  "items": {
                    "$ref": "#/definitions/external_network"
                  },
                  "type": "array",
                  "description": "List of external network associated with the project."
                },
                "default_environment_reference": {
                  "description": "Optional default environment if one is specified",
                  "$ref": "#/definitions/environment_reference"
                }
              },
              "title": "Project Resources"
            },
            "description": {
              "type": "string",
              "description": "Project description.",
              "maxLength": 1000
            }
          },
          "title": "Project Resource Status"
        }
      },
      "title": "Project Resource Status, combined with Users and ACPs"
    },
    "job_instances_response": {
      "description": "Restful represtation of the job instance",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/job_instances_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/job_instances_metadata"
        }
      },
      "title": "job instance Response"
    },
    "app_variable_intent_response": {
      "description": "Response object for intentful operations on a app_variable",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_variable_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_variable"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_variable_metadata"
        }
      },
      "title": "app_variable Intent Response"
    },
    "blueprint_filters": {
      "description": "Supported filters in blueprint list call",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vpc_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cluster_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subnet_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Supported filters in blueprint list call"
    },
    "runbook_download_intent_response": {
      "description": "Response object for intentful operations on a runbook",
      "required": [
        "api_version",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/runbook_download_def_status"
        },
        "spec": {
          "$ref": "#/definitions/runbook"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Response"
    },
    "recovery_plan_policy_state": {
      "description": "State of enforced policy on an entity.",
      "required": [
        "compliance_status",
        "enforcement_mode",
        "policy_reference"
      ],
      "type": "object",
      "properties": {
        "policy_reference": {
          "$ref": "#/definitions/reference"
        },
        "policy_info": {
          "$ref": "#/definitions/recovery_plan_info"
        },
        "compliance_status": {
          "description": "This field indicates whether the given entity is compliant with the specified policy or not. It will be in unknown state if the current compliance state is not known.\n",
          "$ref": "#/definitions/policy_compliance_state"
        },
        "enforcement_mode": {
          "x-ntnx-enum": [
            "MONITORING",
            "ENFORCING",
            "ENFORCEMENT_FAILED"
          ],
          "type": "string",
          "description": "Policy enforcement mode informs us about what the policy engine is currently doing to enforce the policy on the entity. Monitoring indicates that the policy engine is simply monitoring the entity's state. Enforcing means that the policy engine is currently trying to enforce the policy on the entity. Enforcement failed indicates that the policy engine encountered a non-transient error and requires user intervention to fix the problem, error message gives the reason for error in this case.\n"
        },
        "error_message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        }
      },
      "title": "Policy State"
    },
    "recovery_plan_subnet_config": {
      "description": "Subnet configuration for network mapping in the Recovery Plan.\n",
      "required": [
        "gateway_ip",
        "prefix_length"
      ],
      "type": "object",
      "properties": {
        "external_connectivity_state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n"
        },
        "gateway_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Gateway IP address for the subnet.\n"
        },
        "prefix_length": {
          "minimum": 0,
          "type": "integer",
          "description": "Prefix length for the subnet.\n",
          "maximum": 32,
          "format": "int32"
        }
      },
      "title": "Subnet configuration for the Recovery Plan\n"
    },
    "host_reference": {
      "description": "The reference to a host",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "host",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "host"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a host"
    },
    "image_create_input": {
      "description": "Request object for action_run for image_create, contains action_run_log",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/image_create_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app actionrun request for image_create format"
    },
    "directory_service_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "directory_service",
          "x-ntnx-enum": [
            "directory_service"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for directory_service list"
    },
    "cluster_nodes": {
      "description": "Node info for this cluster.",
      "type": "object",
      "properties": {
        "hypervisor_server_list": {
          "items": {
            "$ref": "#/definitions/hypervisor_server"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "title": "Cluster Nodes"
    },
    "ip_subnet_status": {
      "description": "IP subnet provided as an address and prefix length.",
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IPV4 address."
        },
        "prefix_length": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "IP subnet."
    },
    "replication_connection_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "replication_connection",
          "x-ntnx-enum": [
            "replication_connection"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for replication_connection list output"
    },
    "aws_region_metadata": {
      "description": "The aws_region kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_region",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_region"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "aws_region name"
        }
      },
      "title": "aws_region metadata"
    },
    "groups_requested_attribute": {
      "description": "An attribute that has been requested to be returned in the response.\n",
      "required": [
        "attribute"
      ],
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/groups_aggregation_function"
        },
        "ancestor_entity_type": {
          "type": "string"
        }
      },
      "title": "Entities Request Attribute"
    },
    "app_metadata": {
      "description": "The app kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app name",
          "maxLength": 80
        }
      },
      "title": "app metadata"
    },
    "runbook_marketplace_execute_input": {
      "description": "Execute Marketplace Runbook request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/runbook_marketplace_execute_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "Execute Marketplace Runbook request."
    },
    "app_actionrun_spec": {
      "description": "Spec for action launch.",
      "type": "object",
      "properties": {
        "args": {
          "items": {
            "$ref": "#/definitions/app_actionrun_args"
          },
          "type": "array",
          "description": "Argument that need to be passed in action run. It is a dictionary of name-values."
        },
        "target_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The target entity on which that action will be running.",
          "format": "UUID"
        },
        "target_kind": {
          "type": "string",
          "description": "type of target entity."
        }
      },
      "title": "Spec for action launch."
    },
    "app_clone_input": {
      "description": "Request object for application clone",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_clone_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app clone request format"
    },
    "aws_vpc_def_status": {
      "description": "aws_vpc resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_vpc name."
        },
        "resources": {
          "$ref": "#/definitions/aws_vpc_resources_def_status"
        }
      },
      "title": "aws_vpc resources status"
    },
    "hypervisor": {
      "description": "Host Hypervisor information.",
      "required": [
        "ip"
      ],
      "type": "object",
      "properties": {
        "num_vms": {
          "type": "integer",
          "description": "Num of VMs running on this Host.",
          "format": "int64"
        },
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Hypervisor IP."
        },
        "hypervisor_full_name": {
          "type": "string",
          "description": "Full name of hypervisor running on Host."
        }
      },
      "title": "Hypervisor Info"
    },
    "cluster_reference": {
      "description": "The reference to a cluster",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "cluster",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "cluster"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a cluster"
    },
    "calm_marketplace_icon": {
      "description": "Description of icon used by app",
      "required": [
        "icon_reference",
        "icon_type"
      ],
      "type": "object",
      "properties": {
        "icon_reference": {
          "$ref": "#/definitions/file_item_reference"
        },
        "icon_type": {
          "x-ntnx-enum": [
            "ICON",
            "FEATURED_ICON",
            "SCREENSHOT"
          ],
          "type": "string"
        }
      },
      "title": "Description of icon used by app"
    },
    "role_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "role",
          "x-ntnx-enum": [
            "role"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for role list"
    },
    "image_placement_policy_reference": {
      "description": "The reference to a image_placement_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "image_placement_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image_placement_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a image_placement_policy"
    },
    "replication_connection_intent_input": {
      "description": "An intentful representation of a replication_connection",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/replication_connection"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/replication_connection_metadata"
        }
      },
      "title": "replication_connection Intent Entity"
    },
    "app_saas_consumption_metadata": {
      "description": "The app_saas_consumption kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_saas_consumption was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_saas_consumption",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_saas_consumption"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_saas_consumption uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_saas_consumption is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_saas_consumption was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_saas_consumption. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_saas_consumption. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_saas_consumption name",
          "maxLength": 80
        }
      },
      "title": "app_saas_consumption metadata"
    },
    "blueprint_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "blueprint",
          "x-ntnx-enum": [
            "blueprint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for blueprint list output"
    },
    "app_config_spec_reference": {
      "description": "The reference to a app_config_spec",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_config_spec",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_config_spec"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_config_spec"
    },
    "network_group_metadata": {
      "description": "The network_group kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "network_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "network_group uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the network_group is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the network_group. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the network_group. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "network_group name",
          "maxLength": 80
        }
      },
      "title": "network_group metadata"
    },
    "marketplace_item_intent_response": {
      "description": "Response object for intentful operations on a marketplace_item",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/marketplace_item_def_status"
        },
        "spec": {
          "$ref": "#/definitions/marketplace_item"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_metadata"
        }
      },
      "title": "marketplace_item Intent Response"
    },
    "vm": {
      "description": "An intentful representation of a vm spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "vm Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for vm.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/vm_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "vm Intent Spec with placement specified"
    },
    "image_version_resources": {
      "description": "The image version, which is composed of a product name and product version.\n",
      "required": [
        "product_name",
        "product_version"
      ],
      "type": "object",
      "properties": {
        "product_version": {
          "type": "string",
          "description": "Version string for the disk image.",
          "maxLength": 64
        },
        "product_name": {
          "type": "string",
          "description": "Name of the producer/distribution of the image. For example windows or red hat.\n",
          "maxLength": 64
        }
      },
      "title": "Image version"
    },
    "cluster": {
      "description": "Cluster Definition.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Cluster Name."
        },
        "resources": {
          "type": "object",
          "description": "Cluster resources.",
          "properties": {
            "config": {
              "$ref": "#/definitions/cluster_config_spec"
            },
            "network": {
              "$ref": "#/definitions/cluster_network"
            },
            "runtime_status_list": {
              "items": {
                "x-ntnx-enum": [
                  "UPGRADE_QUEUED",
                  "UPGRADE_CANCELLED",
                  "UPGRADE_SCHEDULED",
                  "SSP_CONFIG_MIGRATED"
                ],
                "type": "string"
              },
              "type": "array",
              "description": "Cluster onging operations."
            }
          }
        }
      },
      "title": "Cluster Definition"
    },
    "runbook_runlog_output_status": {
      "description": "Runlog output",
      "required": [
        "output_list"
      ],
      "type": "object",
      "properties": {
        "output_list": {
          "items": {
            "$ref": "#/definitions/runbook_runlog_output"
          },
          "type": "array",
          "description": "application runlog resources"
        }
      },
      "title": "Runlog output"
    },
    "xi_subnet_list_response": {
      "description": "Response body for Xi subnets list",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/xi_subnet_item"
          },
          "type": "array"
        }
      },
      "title": "Response body for Xi subnets list"
    },
    "app_runlog_response": {
      "description": "Response containing the current state of the runlog",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_runlog_resources"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_runlog_metadata"
        }
      },
      "title": "Response containing the current state of the runlog"
    },
    "custom_project_internal_def_status": {
      "description": "A Project resource, combined with Users and ACPs.",
      "required": [
        "project_status"
      ],
      "type": "object",
      "properties": {
        "project_status": {
          "description": "A Project resource.",
          "required": [
            "name",
            "resources"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project name.",
              "maxLength": 64
            },
            "state": {
              "type": "string",
              "description": "The state of the project entity."
            },
            "reason": {
              "readOnly": true,
              "type": "string",
              "description": "One snake case word."
            },
            "message": {
              "readOnly": true,
              "type": "string",
              "description": "The reason for the state if in error."
            },
            "resources": {
              "type": "object",
              "properties": {
                "resource_domain": {
                  "$ref": "#/definitions/resource_domain_resources_status"
                },
                "account_reference_list": {
                  "items": {
                    "$ref": "#/definitions/account_reference"
                  },
                  "type": "array",
                  "description": "List of accounts associated with the project."
                },
                "environment_reference_list": {
                  "items": {
                    "$ref": "#/definitions/environment_reference"
                  },
                  "type": "array",
                  "description": "List of environments associated with the project."
                },
                "default_subnet_reference": {
                  "description": "Optional default subnet if one is specified",
                  "$ref": "#/definitions/subnet_reference"
                },
                "user_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_reference"
                  },
                  "type": "array",
                  "description": "List of users in the project including all the users from the\nusers group if provided.\n"
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Indicates if it is the default project.\n"
                },
                "tunnel_reference_list": {
                  "items": {
                    "$ref": "#/definitions/tunnel_reference"
                  },
                  "type": "array",
                  "description": "List of tunnels associated with the project."
                },
                "external_user_group_reference_list": {
                  "items": {
                    "$ref": "#/definitions/user_group_reference"
                  },
                  "type": "array",
                  "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                },
                "cluster_reference_list": {
                  "items": {
                    "$ref": "#/definitions/cluster_reference"
                  },
                  "type": "array",
                  "description": "List of clusters associated with the project."
                },
                "subnet_reference_list": {
                  "items": {
                    "$ref": "#/definitions/subnet_reference"
                  },
                  "type": "array",
                  "description": "List of subnets for the project."
                },
                "vpc_reference_list": {
                  "items": {
                    "$ref": "#/definitions/vpc_reference"
                  },
                  "type": "array",
                  "description": "List of VPCs associated with the project."
                },
                "external_network_list": {
                  "items": {
                    "$ref": "#/definitions/external_network"
                  },
                  "type": "array",
                  "description": "List of external network associated with the project."
                },
                "default_environment_reference": {
                  "description": "Optional default environment if one is specified",
                  "$ref": "#/definitions/environment_reference"
                }
              },
              "title": "Project Resources"
            },
            "description": {
              "type": "string",
              "description": "Project description.",
              "maxLength": 1000
            }
          },
          "title": "Project Resource Status"
        }
      },
      "title": "Project Resource Status, combined with Users and ACPs"
    },
    "project_internal_intent_input": {
      "description": "An intentful representation of a Project",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/project_internal"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "Project Intent Entity"
    },
    "blueprint_mutable_fields": {
      "description": "Fields allowed at blueprint level in the application.",
      "type": "object",
      "properties": {
        "substrate_definition_list": {
          "type": "object",
          "$ref": "#/definitions/mutable_fields_object"
        }
      },
      "title": "Blueprint Mutable Fields"
    },
    "app_icon_resources": {
      "description": "App icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "App Icon type"
        },
        "link": {
          "type": "string",
          "description": "App Icon link"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "App Icon uuid",
          "format": "UUID"
        },
        "data": {
          "type": "string",
          "description": "Base64 encoded data"
        }
      },
      "title": "App icon resources"
    },
    "app_runlog_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runlog",
          "x-ntnx-enum": [
            "app_runlog"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_runlog list output"
    },
    "app_published_service_element": {
      "description": "Published service element",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "type": {
          "default": "K8S_SERVICE",
          "x-ntnx-enum": [
            "K8S_SERVICE"
          ],
          "type": "string",
          "description": "Type of published service"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional published service options"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Published service element definition"
    },
    "certificate_spec_upload_input": {
      "description": "Input spec for certificate upload.",
      "required": [
        "spec_list"
      ],
      "type": "object",
      "properties": {
        "spec_list": {
          "items": {
            "$ref": "#/definitions/certificate_spec"
          },
          "type": "array",
          "description": "List of certificate specs"
        }
      },
      "title": "Input spec for certificate upload"
    },
    "cloud_type": {
      "x-ntnx-enum": [
        "ONPREM_CLOUD",
        "NUTANIX_HOSTED_CLOUD",
        "AWS",
        "AZURE"
      ],
      "type": "string",
      "description": "Types of cloud.",
      "title": "Cloud Type"
    },
    "custom_generic_key_value_pair": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "description": "Generic key value pair used for custom attributes",
      "title": "Generic key value pair"
    },
    "resource_type_intent_response": {
      "description": "Response object for intentful operations on a resource_type",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/resource_type_def_status"
        },
        "spec": {
          "$ref": "#/definitions/resource_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/resource_type_metadata"
        }
      },
      "title": "resource_type Intent Response"
    },
    "aws_availability_zone_list_response": {
      "description": "AWS VPC entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_availability_zone_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_availability_zone_list_metadata_output"
        }
      },
      "title": "aws_availability_zone entity list"
    },
    "subnet_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "subnet",
          "x-ntnx-enum": [
            "subnet"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for subnet list"
    },
    "proxy_login_status": {
      "description": "The status of a REST API call. Only used when there is a failure to report.\n",
      "type": "object",
      "properties": {
        "status": {
          "readOnly": true,
          "type": "string",
          "description": "failure"
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "Something went wrong."
        }
      },
      "title": "Response status"
    },
    "blueprint_patch_with_environment_spec": {
      "description": "Spec for blueprint patch request",
      "required": [
        "environment_profile_pairs",
        "new_blueprint"
      ],
      "type": "object",
      "properties": {
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/blueprint_patch_environment_profile_pair_request"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment for patching"
        },
        "new_blueprint": {
          "$ref": "#/definitions/new_blueprint_reference"
        }
      },
      "title": "Spec for blueprint patch patch request"
    },
    "selection_criteria": {
      "description": "Entity selection criteria for category assignment definition.",
      "required": [
        "entity_type",
        "expression_list"
      ],
      "type": "object",
      "properties": {
        "expression_list": {
          "items": {
            "$ref": "#/definitions/filter_expression"
          },
          "type": "array"
        },
        "entity_type": {
          "type": "string",
          "description": "Entity type which has to be selected"
        }
      },
      "title": "Selection Criteria definition."
    },
    "aws_subnet_metadata": {
      "description": "The aws_subnet kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "aws_subnet",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "aws_subnet"
          ]
        }
      },
      "title": "aws_subnet metadata"
    },
    "file_item_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "file_item",
          "x-ntnx-enum": [
            "file_item"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for file_item list output"
    },
    "app_task_def_status": {
      "description": "An intentful representation of a app_task status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_task Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_task."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_task, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_task_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_task."
        }
      },
      "title": "app_task Intent Status with placement specified"
    },
    "virtual_network_reference_upload": {
      "description": "The reference to a virtual_network",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "virtual_network",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "virtual_network"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a virtual_network"
    },
    "network_group_tunnel_vm_intent_response": {
      "description": "Response object for intentful operations on a network_group_tunnel_vm",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/network_group_tunnel_vm_def_status"
        },
        "spec": {
          "$ref": "#/definitions/network_group_tunnel_vm"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_tunnel_vm_metadata"
        }
      },
      "title": "network_group_tunnel_vm Intent Response"
    },
    "app_engine_runlog_response": {
      "description": "App Engine Runlog Response",
      "type": "object",
      "properties": {
        "created_time": {
          "type": "string",
          "description": "Creation time of workflow",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the workflow"
        },
        "workflow_name": {
          "type": "string",
          "description": "Workflow name"
        },
        "uuid": {
          "type": "string",
          "description": "Workflow uuid",
          "format": "UUID"
        },
        "run_id": {
          "type": "string",
          "description": "Run id of the workflow",
          "format": "UUID"
        }
      },
      "title": "App engine runlog response"
    },
    "users_intent_response": {
      "description": "The configuration details of the users.",
      "required": [
        "search_result_list",
        "users_search_metadata"
      ],
      "type": "object",
      "properties": {
        "users_search_metadata": {
          "type": "object",
          "description": "Metadata of user search",
          "$ref": "#/definitions/users_search_metadata"
        },
        "search_result_list": {
          "items": {
            "$ref": "#/definitions/match_user_details"
          },
          "type": "array",
          "description": "List of search results of matching users"
        },
        "api_version": {
          "type": "string"
        }
      },
      "title": "Users details list"
    },
    "app_saas_consumption_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_saas_consumption",
          "x-ntnx-enum": [
            "app_saas_consumption"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_saas_consumption list"
    },
    "status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "status": {
          "readOnly": true,
          "type": "string",
          "description": "Only value possible is \"failure\"."
        },
        "kind": {
          "readOnly": true,
          "type": "string",
          "description": "The entitys kind. i.e. \"status\"."
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "reason": {
          "readOnly": true,
          "type": "string",
          "description": "One snake case word."
        },
        "details": {
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true,
          "type": "object",
          "description": "Custom key-value details relevant to the status."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "A sentence explaining the reason for the status."
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "policy_def_status": {
      "description": "An intentful representation of a policy status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the policy."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the policy, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/policy_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for policy."
        }
      },
      "title": "policy Intent Status with placement specified"
    },
    "aws_mixed_image_def_status": {
      "description": "aws_mixed_image resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_mixed_image name."
        },
        "resources": {
          "$ref": "#/definitions/aws_mixed_image_resources_def_status"
        }
      },
      "title": "aws_mixed_image resources status"
    },
    "app_actionrun_args": {
      "description": "Argument format for action run",
      "type": "object",
      "properties": {
        "task_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "Value of the task uuid",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "Name of the Argument field.",
          "maxLength": 64
        },
        "value": {
          "type": "string",
          "description": "Value of the Argument field."
        }
      },
      "title": "Argument format for action run"
    },
    "endpoint_intent_resource": {
      "description": "Response object for intentful operations on a endpoint",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/endpoint_def_status"
        },
        "spec": {
          "$ref": "#/definitions/endpoint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "endpoint Intent Response"
    },
    "vm_recovery_point_reference": {
      "description": "The reference to a vm_recovery_point",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm_recovery_point",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a vm_recovery_point"
    },
    "app_intent_input": {
      "description": "An intentful representation of a app",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app Intent Entity"
    },
    "policy_action_type_metadata": {
      "description": "The policy_action_type kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy_action_type was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "policy_action_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_action_type"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "policy_action_type uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the policy_action_type is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy_action_type was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the policy_action_type. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the policy_action_type. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "policy_action_type name",
          "maxLength": 80
        }
      },
      "title": "policy_action_type metadata"
    },
    "recovery_point_resource": {
      "description": "Response object for recovery point object",
      "type": "object",
      "properties": {
        "resources": {
          "additionalProperties": true,
          "type": "object",
          "description": "Response attributes for recovery point object"
        }
      },
      "title": "recovery point response"
    },
    "guest_tools_status": {
      "description": "Information regarding guest tools.",
      "type": "object",
      "properties": {
        "nutanix_guest_tools": {
          "description": "Nutanix Guest Tools information",
          "$ref": "#/definitions/nutanix_guest_tools_status"
        }
      },
      "title": "Guest Tools information"
    },
    "message_resource": {
      "description": "message.",
      "required": [
        "message",
        "reason"
      ],
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "If state is ERROR, a message describing the error."
        },
        "reason": {
          "x-ntnx-enum": [
            "ACCESS_DENIED",
            "ACCESS_FORBIDDEN",
            "ACTION_NOT_SUPPORTED",
            "AUTHENTICATION_REQUIRED",
            "BEARER_TOKEN_EXPIRED",
            "BEARER_TOKEN_BAD_SIGNATURE",
            "CANNOT_MODIFY_PRE_CONFIGURED_REPORT",
            "CATEGORY_NAME_VALUE_MISMATCH",
            "CONFIGURATION_INCOMPLETE",
            "CONCURRENT_REQUESTS_NOT_ALLOWED",
            "DEFAULT_PROJECT_UNAVAILABLE",
            "DESERIALIZATION_FAILED",
            "DIRECTORY_SERVICE_CONNECTION_FAILED",
            "ENTITY_ALREADY_EXISTS",
            "ENTITY_DELETION_FAILED",
            "ENTITY_IS_READONLY",
            "ENTITY_NAME_UUID_MISMATCH",
            "ENTITY_NOT_CONFIGURED",
            "ENTITY_NOT_FOUND",
            "ENTITY_SAVE_ERROR",
            "ENTITY_UPDATE_FAILED",
            "IDEMPOTENCE_UUID_CREATION_FAILED",
            "IDP_NOT_REACHABLE",
            "INTERNAL_ERROR",
            "INVALID_ARGUMENT",
            "INVALID_AZ_NAME",
            "INVALID_CONTENT_TYPE",
            "INVALID_DATA_FORMAT",
            "INVALID_PORTAL_CONFIGURATION",
            "INVALID_REQUEST",
            "INVALID_UUID",
            "INVALID_OWNER_REFERENCE",
            "INTERNAL_AZ_PROXY_SETUP_ERROR",
            "INTERNAL_ERROR_REMOTE_REQUEST",
            "INTERNAL_ROLE_ACCESS_DENIED",
            "INCORRECT_EVENTS_FILTER",
            "MISSING_ATTRIBUTE",
            "MISSING_CURRENT_USER_METADATA",
            "NAME_NOT_IN_DOMAIN",
            "NO_RESPONSE_RECEIVED_FROM_PORTAL",
            "PE_NOT_PAIRED_WITH_PC",
            "PC_NOT_PAIRED_WITH_XI_PORTAL",
            "REFERENCE_ERROR",
            "RESERVED_ROLE_ACCESS_DENIED",
            "REQUEST_NOT_SUPPORTED",
            "REMOTE_CLUSTER_IP_FETCH_FAILED",
            "REMOTE_CLUSTER_NOT_CONNECTED",
            "REMOTE_CONNECTION_EXISTS",
            "REMOTE_CONNECTION_NOT_FOUND",
            "REPORT_CONFIG_NOT_FOUND",
            "REPORTING_RESOURCE_NOT_FOUND",
            "REPORTING_INTERNAL_ERROR",
            "SERVICE_UNAVAILABLE",
            "SEARCH_RESULT_PROCESSING_ERROR",
            "TOO_MANY_REQUESTS",
            "UNCONFIGURED_API_KEY",
            "UNCONFIGURED_PORTAL_CONNECTION",
            "UNSPECIFIED_EVENTS_FILTER",
            "UNSUPPORTED_AZ_PROXY_API",
            "UNSUPPORTED_MEDIA_TYPE_ERROR",
            "UPLOAD_TO_S3_FAILED",
            "VALIDATION_ERROR",
            "INVALID_SSL_CERTIFICATE",
            "ERROR_ATTACHING_FILE_TO_CASE",
            "SPEC_UPDATE_ERROR",
            "SPEC_INCOMPATIBLE_ERROR",
            "CLOUD_UNREACHABLE_ERROR",
            "INVALID_CLOUD_CREDENTIALS",
            "IDP_PORTAL_UNREACHABLE",
            "SELF_PAIRING_NOT_ALLOWED",
            "PAIRING_FAILED",
            "PAIRING_NOT_ALLOWED",
            "PAIRING_INITIATING_NOT_ALLOWED",
            "CLOUD_TRUST_EXISTS",
            "DUPLICATE_CLOUD_TRUST",
            "DUPLICATE_CLOUD_TRUST_ON_REMOTE"
          ],
          "type": "string",
          "description": "If state is ERROR, a machine-readable snake-cased string."
        },
        "details": {
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true,
          "type": "object",
          "description": "Custom key-value details relevant to the status."
        }
      },
      "title": "Message."
    },
    "user": {
      "description": "User Input Definition.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/user_input_resource"
        }
      },
      "title": "User."
    },
    "xi_vpc_list_response": {
      "description": "Response body for Xi vpc list",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/xi_vpc_item"
          },
          "type": "array"
        }
      },
      "title": "Response body for Xi vpc list"
    },
    "vm_storage_config": {
      "description": "User inputs of storage configuration parameters for VMs.",
      "type": "object",
      "properties": {
        "qos_policy": {
          "description": "Storage qos policy parameters applied on the VM. The policy\nparameters are reset if the default values are passed.\n",
          "$ref": "#/definitions/storage_qos_policy_config_input"
        },
        "flash_mode": {
          "description": "State of the storage policy to pin virtual disks of the VM to the\nhot tier.\n",
          "$ref": "#/definitions/flash_mode"
        }
      },
      "title": "VM Storage Config input"
    },
    "marketplace_item_output_resources": {
      "properties": {
        "app_blueprint_template": {
          "type": "object",
          "description": "Represents the information of the runbook, it will be used in executing the runbook.\n",
          "properties": {
            "status": {
              "$ref": "#/definitions/blueprint_download_def_status"
            },
            "spec": {
              "$ref": "#/definitions/blueprint_upload"
            }
          }
        },
        "app_state": {
          "default": "PENDING",
          "x-ntnx-enum": [
            "PENDING",
            "ACCEPTED",
            "REJECTED",
            "PUBLISHED"
          ],
          "type": "string",
          "description": "State indicating if marketplace item is approved, pending or rejected\n"
        },
        "author": {
          "type": "string",
          "description": "Person or company which developed the app"
        },
        "app_attribute_list": {
          "items": {
            "x-ntnx-enum": [
              "FEATURED",
              "EXPRESS_LAUNCH"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Attributes of this app."
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this marketplace item has been assigned to"
        },
        "icon_reference_list": {
          "items": {
            "$ref": "#/definitions/calm_marketplace_icon"
          },
          "type": "array"
        },
        "app_group_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID for the group of MPIs which are versions of the same App\n",
          "format": "UUID"
        },
        "support_status": {
          "default": "SUPPORTED",
          "x-ntnx-enum": [
            "SUPPORTED",
            "DEPRECATED",
            "DECOMMISSIONED"
          ],
          "type": "string",
          "description": "Status indicating if marketplace item is supported, deprecated or decommissioned. Only meaningful for global marketplace items.\n"
        },
        "change_log": {
          "type": "string",
          "description": "Change log for this version of the app\n",
          "maxLength": 5000
        },
        "version": {
          "type": "string",
          "description": "Indicates version of the App that this marketplace item represents\n",
          "maxLength": 64
        },
        "runbook_template_info": {
          "required": [
            "source_runbook_reference"
          ],
          "type": "object",
          "description": "Represents the information of the runbook, it will be used in executing the runbook.\n",
          "properties": {
            "is_published_with_secrets": {
              "default": false,
              "type": "boolean",
              "description": "Is runbook published with secrets"
            },
            "source_runbook_reference": {
              "$ref": "#/definitions/runbook_reference"
            },
            "is_published_with_endpoints": {
              "default": false,
              "type": "boolean",
              "description": "Is runbook published with endpoints"
            }
          }
        },
        "app_source": {
          "default": "LOCAL",
          "x-ntnx-enum": [
            "LOCAL",
            "GLOBAL_STORE"
          ],
          "type": "string",
          "description": "Indicates whether the app is Global(Marketplace item) or Local(User created)\n"
        },
        "type": {
          "default": "blueprint",
          "x-ntnx-enum": [
            "blueprint",
            "runbook"
          ],
          "type": "string",
          "description": "Type of this app"
        },
        "deprecation_reason": {
          "type": "string",
          "description": "Reason for deprecating or decommissioning this version of the app\n",
          "maxLength": 5000
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "app_blueprint_template",
            "author"
          ]
        },
        {
          "required": [
            "runbook_template_info",
            "author"
          ]
        }
      ],
      "type": "object",
      "description": "Description of the marketplace item",
      "title": "Description of the marketplace item"
    },
    "runbook_runbook_input_upload": {
      "description": "Runbook definition for Application",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "output_variables": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output Variables for runbook"
        },
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference_upload"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "app_package_response": {
      "description": "Package definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "state"
      ],
      "type": "object",
      "properties": {
        "image_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s image spec"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_package_element"
          },
          "type": "array",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for package"
        },
        "service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_reference"
          },
          "type": "array",
          "description": "References of the service."
        },
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "version": {
          "type": "string",
          "description": ""
        },
        "service_element_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_element"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_package_reference"
        },
        "type": {
          "x-ntnx-enum": [
            "SNAPSHOT",
            "ISO",
            "DEB",
            "RPM",
            "DOCKER_IMAGE",
            "CHEF_COOKBOOK",
            "PUPPET_MANIFEST",
            "CUSTOM",
            "SUBSTRATE_IMAGE",
            "K8S_IMAGE"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "type": "object",
          "description": "Details based on type of the package."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Package for Application"
    },
    "endpoint_intent_response": {
      "description": "Response object for intentful operations on a endpoint",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/endpoint_def_status"
        },
        "spec": {
          "$ref": "#/definitions/endpoint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "endpoint Intent Response"
    },
    "reference": {
      "description": "Reference to a kind. Either one of (kind, uuid) or url needs to be specified.\n",
      "type": "object",
      "properties": {
        "url": {
          "pattern": "^((http[s]?):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*(:[0-9]+)*?\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$",
          "type": "string",
          "description": "GET query on the URL will provide information on the source.\n"
        },
        "kind": {
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        }
      },
      "title": "Reference"
    },
    "tunnel_def_status": {
      "description": "An intentful representation of a tunnel status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "tunnel Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the tunnel."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the tunnel, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/tunnel_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for tunnel."
        }
      },
      "title": "tunnel Intent Status with placement specified"
    },
    "account_reference_upload": {
      "description": "The reference to a account",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "account",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "account"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a account"
    },
    "flash_mode": {
      "x-ntnx-enum": [
        "ENABLED",
        "DISABLED"
      ],
      "type": "string",
      "description": "State of the storage policy to pin virtual disks to the hot tier. When specified as a VM attribute, the storage policy applies to all virtual disks of the VM unless overridden by the same attribute specified for a virtual disk.\n",
      "title": "Flash Mode"
    },
    "resource_type_intent_input": {
      "description": "An intentful representation of a resource_type",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/resource_type"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/resource_type_metadata"
        }
      },
      "title": "resource_type Intent Entity"
    },
    "blueprint_patch_with_environment_input": {
      "description": "Blueprint patch request.",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_patch_with_environment_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Blueprint patch request."
    },
    "build_info": {
      "description": "Cluster build details.",
      "required": [
        "build_type",
        "version",
        "commit_id",
        "short_commit_id"
      ],
      "type": "object",
      "properties": {
        "commit_id": {
          "type": "string",
          "description": "Last Git commit id which the build is based on."
        },
        "full_version": {
          "type": "string",
          "description": "Full version name."
        },
        "commit_date": {
          "type": "string",
          "description": "Date/time of the last commit.",
          "format": "date-time"
        },
        "is_long_term_support": {
          "type": "boolean",
          "description": "Flag to indicate if the AOS release is qualified as long term support.\n"
        },
        "version": {
          "type": "string",
          "description": "Numeric version. e.g. \"5.5\""
        },
        "short_commit_id": {
          "type": "string",
          "description": "First 6 characters of the last Git commit id."
        },
        "build_type": {
          "type": "string",
          "description": "Build type, one of {dbg, opt, release}."
        }
      },
      "title": "Cluster build details"
    },
    "app_credential_reference_upload": {
      "description": "The reference to a app_credential",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_credential",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_credential"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_credential"
    },
    "directory_service_reference": {
      "description": "The reference to a directory_service",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "directory_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "directory_service"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a directory_service"
    },
    "runbook_resources": {
      "description": "Resources for Runbook.",
      "type": "object",
      "properties": {
        "endpoints_information": {
          "items": {
            "$ref": "#/definitions/app_endpoint_information"
          },
          "type": "array",
          "description": "Information about endpoints used."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/app_endpoint_input"
          },
          "type": "array",
          "description": "Endpoint definitions for actions."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input"
          },
          "type": "array",
          "description": "Credential definitions for Runbook."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "default_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/runbook_runbook_input"
        }
      },
      "title": "Resources for Runbook."
    },
    "network_group_intent_resource": {
      "description": "Response object for intentful operations on a network_group",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/network_group_def_status"
        },
        "spec": {
          "$ref": "#/definitions/network_group"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/network_group_metadata"
        }
      },
      "title": "network_group Intent Response"
    },
    "mh_vm_storage_config": {
      "description": "User inputs of different storage parameters",
      "type": "object",
      "properties": {
        "qos_policy": {
          "description": "Storage QoS policy parameters applied on the VM. The policy\nparameters are reset if the default values are passed.\n",
          "$ref": "#/definitions/storage_qos_policy_config_input"
        }
      },
      "title": "VM Storage Config input"
    },
    "action_variables_get_response": {
      "items": {
        "$ref": "#/definitions/app_actionrun_args"
      },
      "type": "array",
      "description": "Response object for GET on action variables",
      "title": "Response object for GET on action variables"
    },
    "app_showback_status_response": {
      "description": "Information about showback status",
      "type": "object",
      "properties": {
        "current_state": {
          "type": "string"
        },
        "previous_state_timestamps": {
          "type": "object",
          "properties": {
            "disabled": {
              "type": "number"
            },
            "enabling": {
              "type": "number"
            },
            "enabled": {
              "type": "number"
            }
          }
        }
      },
      "title": "Showback status"
    },
    "vpc_resources_def_status": {
      "description": "VPC resources status",
      "type": "object",
      "properties": {
        "common_domain_name_server_ip_list": {
          "items": {
            "$ref": "#/definitions/address"
          },
          "type": "array",
          "description": "List of domain name server IPs."
        },
        "nat_ip_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "List of IP addresses used for SNAT."
        },
        "external_subnet_list": {
          "items": {
            "$ref": "#/definitions/external_subnet"
          },
          "type": "array",
          "description": "List of external subnets attached to this VPC."
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones in Xi from which resources are derived (Only supported on Xi)\n"
        }
      },
      "title": "VPC resources status"
    },
    "abort_script_response": {
      "additionalProperties": true,
      "type": "object"
    },
    "environment_intent_input": {
      "description": "An intentful representation of a environment",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/environment"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/environment_metadata"
        }
      },
      "title": "environment Intent Entity"
    },
    "approval_request_reference": {
      "description": "The reference to a approval_request",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "approval_request",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "approval_request"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a approval_request"
    },
    "marketplace_icon_summary_resources_def_status": {
      "description": "Marketplace icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "Marketplace Icon type"
        },
        "link": {
          "type": "string",
          "description": "Marketplace Icon link"
        },
        "uuid": {
          "type": "string",
          "description": "Marketplace Icon uuid",
          "format": "UUID"
        }
      },
      "title": "Marketplace icon resources"
    },
    "app_icon_summary_list_intent_response": {
      "description": "Response object for intentful operation of app_icon_summarys",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_icon_summary_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_summary_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "resource_type_resources_def_status": {
      "description": "Status of the resource_type",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "$ref": "#/definitions/account_reference"
          },
          "type": "array",
          "description": "List of accounts using this resource type's provider"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource_type. Ex: Oracle cloud"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "target_type": {
          "default": "substrate",
          "type": "string",
          "description": "Target class kind which uses the resource type"
        },
        "provider_reference": {
          "$ref": "#/definitions/provider_reference"
        },
        "schema_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of schemas"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "description": {
          "type": "string",
          "description": "Notes of resource_type"
        }
      },
      "title": "Status of the resource_type"
    },
    "quota_spec": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "object",
          "description": "Encapsulates quota entries",
          "$ref": "#/definitions/quota_entry"
        }
      },
      "title": "Quota create request spec"
    },
    "environment_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "environment",
          "x-ntnx-enum": [
            "environment"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for environment list output"
    },
    "approval_element_object": {
      "description": "Approval element can be either user, group or external user",
      "required": [
        "name",
        "type",
        "state"
      ],
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "state": {
          "enum": [
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "State of approval element.\n"
        },
        "type": {
          "enum": [
            "USER",
            "GROUP",
            "EXTERNAL"
          ],
          "type": "string",
          "description": "Type of approval element.\n"
        },
        "approver_name": {
          "type": "string"
        }
      },
      "title": "Approval elements of the approval set"
    },
    "app_icon_summary_reference": {
      "description": "The reference to a app_icon_summary",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon_summary",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_icon_summary"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_icon_summary"
    },
    "marketplace_icon_metadata": {
      "description": "The marketplace_icon kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when marketplace_icon was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "marketplace_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_icon"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "marketplace_icon uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the marketplace_icon is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when marketplace_icon was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the marketplace_icon. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the marketplace_icon. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "marketplace_icon name",
          "maxLength": 80
        }
      },
      "title": "marketplace_icon metadata"
    },
    "blueprint_runtime_editable": {
      "description": "Spec for runtime editable.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "description of the object"
        },
        "value": {
          "additionalProperties": true,
          "type": "object",
          "description": "dictionary of runtime editable fields under this\nobject with their values\n"
        },
        "name": {
          "type": "string",
          "description": "name of the object"
        },
        "context": {
          "readOnly": true,
          "type": "string",
          "description": "the context the object is part of, for example if it's a runtime variable on an app profile, then the context is app_profile.app_profile_name.variable\n"
        },
        "type": {
          "type": "string",
          "description": "type of the object"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "uuid of the object",
          "format": "UUID"
        }
      },
      "title": "Spec for runtime editable."
    },
    "mutable_blueprint_def_status": {
      "description": "App blueprint download status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/mutable_blueprint_resources_def_status"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "App blueprint download status"
    },
    "image_resources_def_status": {
      "description": "Describes the image status resources object.",
      "type": "object",
      "properties": {
        "retrieval_uri_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of URIs where the raw image data can be accessed.\n"
        },
        "current_cluster_reference_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "List of clusters where image is currently present."
        },
        "image_type": {
          "$ref": "#/definitions/image_type"
        },
        "checksum": {
          "description": "Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n",
          "$ref": "#/definitions/checksum"
        },
        "source_uri": {
          "type": "string",
          "description": "The source URI points at the location of a the source image which is used to create/update image.\n"
        },
        "initial_placement_ref_list": {
          "items": {
            "$ref": "#/definitions/cluster_reference"
          },
          "type": "array",
          "description": "List of clusters where image is requested to be placed at time of creation. This argument will not be honored at time of update.\n"
        },
        "version": {
          "description": "The image version",
          "$ref": "#/definitions/image_version_status"
        },
        "architecture": {
          "description": "Indicates the CPU architecture that the image is compatible with. If this is not specified for an image this will default to the CPU architecture type of the cluster.\n",
          "$ref": "#/definitions/image_architecture"
        },
        "size_bytes": {
          "type": "integer",
          "description": "The size of the image in bytes.",
          "format": "int64"
        },
        "data_source_reference": {
          "description": "Reference to VM disk. The expected kind for VMs Disk is vm_disk. The uuid should be the disk device uuid, where the disk device is from disk_list from VM status.\n",
          "$ref": "#/definitions/reference"
        },
        "image_placement_policy_state_list": {
          "items": {
            "$ref": "#/definitions/image_placement_policy_state"
          },
          "type": "array",
          "description": "A single image could get multiple policies applied to it. In such cases, each policy state is shown as an element of this list.\n"
        },
        "source_options": {
          "$ref": "#/definitions/source_options"
        }
      },
      "title": "Image status resources"
    },
    "account_reference": {
      "description": "The reference to a account",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "account",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "account"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a account"
    },
    "app_substrate_response_download": {
      "description": "Substrate info for deployment",
      "required": [
        "uuid",
        "name",
        "type",
        "variable_list",
        "action_list",
        "state"
      ],
      "type": "object",
      "properties": {
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        },
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe"
        },
        "config_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_element"
          },
          "type": "array",
          "description": ""
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "os_type": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Deployment Sustrate Definition for Application."
    },
    "guest_customization_status": {
      "description": "VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.\n",
      "title": "Guest Customization Configuration for creation/modification request",
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "properties": {
        "cloud_init": {
          "description": "If this field is set, the guest will be customized using cloud-init. Either user_data or custom_key_values should be provided. If custom_key_ves are provided then the user data will be generated using these key-value pairs.\n",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "user_data"
              ]
            },
            {
              "required": [
                "custom_key_values"
              ]
            }
          ],
          "properties": {
            "meta_data": {
              "type": "string",
              "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n"
            },
            "user_data": {
              "type": "string",
              "description": "The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
            },
            "custom_key_values": {
              "$ref": "#/definitions/custom_generic_key_value_pair"
            }
          }
        },
        "is_overridable": {
          "type": "boolean",
          "description": "Flag to allow override of customization by deployer."
        },
        "sysprep": {
          "description": "If this field is set, the guest will be customized using Sysprep. Either unattend_xml or custom_key_values should be provided. If custom_key_values are provided then the unattended answer file will be generated using these key-value pairs.\n",
          "type": "object",
          "x-ntnx-one-of": [
            {
              "required": [
                "unattend_xml"
              ]
            },
            {
              "required": [
                "custom_key_values"
              ]
            }
          ],
          "properties": {
            "install_type": {
              "default": "PREPARED",
              "x-ntnx-enum": [
                "FRESH",
                "PREPARED"
              ],
              "type": "string",
              "description": "Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is \"PREPARED\".\n"
            },
            "unattend_xml": {
              "type": "string",
              "description": "This field contains a Sysprep unattend xml definition, as a string. The value must be base64 encoded.\n"
            },
            "custom_key_values": {
              "$ref": "#/definitions/custom_generic_key_value_pair"
            }
          }
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "sysprep"
          ]
        },
        {
          "required": [
            "cloud_init"
          ]
        }
      ]
    },
    "aws_role_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_role list"
    },
    "runbook_runlog_response": {
      "description": "Response containing the current state of the runlog",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/runbook_runlog_resources"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_runlog_metadata"
        }
      },
      "title": "Response containing the current state of the runlog"
    },
    "credentials": {
      "description": "Credentials to login server",
      "required": [
        "username"
      ],
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "Credentials to login server"
    },
    "aws_subnet_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for aws_subnet list"
    },
    "vm_intent_resource": {
      "description": "Response object for intentful operations on a vm",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/vm_def_status"
        },
        "spec": {
          "$ref": "#/definitions/vm"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/vm_metadata"
        }
      },
      "title": "vm Intent Response"
    },
    "feature_policy_response": {
      "description": "Response for feature - Policy Engine",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_policy"
            }
          }
        },
        "spec": {
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_policy"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for feature - Policy Engine"
    },
    "runbook_upload_resources": {
      "description": "Resources for Runbook.",
      "type": "object",
      "properties": {
        "endpoints_information": {
          "items": {
            "$ref": "#/definitions/app_endpoint_information"
          },
          "type": "array",
          "description": "Information about endpoints used."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/app_endpoint_input_upload"
          },
          "type": "array",
          "description": "Endpoint definitions for actions."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input_upload"
          },
          "type": "array",
          "description": "Credential definitions for Runbook."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference_upload"
        },
        "default_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/runbook_runbook_input_upload"
        }
      },
      "title": "Resources for Runbook."
    },
    "directory_service_metadata": {
      "description": "The directory_service kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when directory_service was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "directory_service",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "directory_service"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "directory_service uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the directory_service is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when directory_service was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the directory_service. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the directory_service. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "directory_service name",
          "maxLength": 80
        }
      },
      "title": "directory_service metadata"
    },
    "vpc_def_status": {
      "description": "VPC output status",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the VPC."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the VPC, if in an error state.\n"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/vpc_resources_def_status"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "VPC status"
    },
    "policy_event_reference": {
      "description": "The reference to a policy_event",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_event",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_event"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a policy_event"
    },
    "app_variable_resources_def_status": {
      "description": "Libraty variable resources definition.",
      "required": [
        "type",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for variable"
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this variable type has been assigned to"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        }
      },
      "title": "Library variable resources"
    },
    "blueprint_launch2_input": {
      "description": "Launch Blueprint request.",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_launch2_spec"
        }
      },
      "title": "Launch Blueprint request."
    },
    "replication_connection_list_intent_response": {
      "description": "Response object for intentful operation of replication_connections",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/replication_connection_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/replication_connection_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "vm_nic": {
      "description": "Virtual Machine NIC.",
      "type": "object",
      "properties": {
        "nic_type": {
          "x-ntnx-enum": [
            "NORMAL_NIC",
            "DIRECT_NIC",
            "NETWORK_FUNCTION_NIC"
          ],
          "type": "string",
          "description": "The type of this NIC. Defaults to NORMAL_NIC."
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.\n",
          "format": "UUID"
        },
        "ip_endpoint_list": {
          "items": {
            "$ref": "#/definitions/ip_address"
          },
          "type": "array",
          "description": "IP endpoints for the adapter. Currently, IPv4 addresses are\nsupported.\n"
        },
        "network_function_chain_reference": {
          "$ref": "#/definitions/network_function_chain_reference"
        },
        "network_function_nic_type": {
          "x-ntnx-enum": [
            "INGRESS",
            "EGRESS",
            "TAP"
          ],
          "type": "string",
          "description": "The type of this Network function NIC. Defaults to INGRESS.\n"
        },
        "vlan_mode": {
          "x-ntnx-enum": [
            "ACCESS",
            "TRUNKED"
          ],
          "type": "string",
          "description": "VLAN mode."
        },
        "mac_address": {
          "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
          "type": "string",
          "description": "The MAC address for the adapter.",
          "x-example": "50:6b:8d:ee:de:2b"
        },
        "subnet_reference": {
          "$ref": "#/definitions/subnet_reference"
        },
        "model": {
          "x-ntnx-enum": [
            "VIRTIO",
            "E1000"
          ],
          "type": "string",
          "description": "The model of this NIC."
        },
        "is_connected": {
          "type": "boolean",
          "description": "Whether or not the NIC is connected. True by default."
        },
        "trunked_vlan_list": {
          "items": {
            "type": "integer"
          },
          "type": "array",
          "description": "List of networks to trunk if vlan_mode is TRUNKED. If empty and VLAN mode is TRUNKED, all VLANs are trunked.\n"
        }
      },
      "title": "Virtual Machine NIC"
    },
    "nutanix_guest_tools_status": {
      "description": "Information regarding Nutanix Guest Tools.",
      "type": "object",
      "properties": {
        "available_version": {
          "type": "string",
          "description": "Version of Nutanix Guest Tools available on the cluster."
        },
        "ngt_state": {
          "x-ntnx-enum": [
            "INSTALLED",
            "UNINSTALLED"
          ],
          "type": "string",
          "description": "Nutanix guest tools is installed or not."
        },
        "iso_mount_state": {
          "x-ntnx-enum": [
            "MOUNTED",
            "UNMOUNTED"
          ],
          "type": "string",
          "description": "Desired mount state of Nutanix Guest Tools ISO.\n"
        },
        "guest_os_version": {
          "type": "string",
          "description": "Version of the operating system on the VM."
        },
        "state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "Nutanix Guest Tools is enabled or not."
        },
        "version": {
          "type": "string",
          "description": "Version of Nutanix Guest Tools installed on the VM."
        },
        "enabled_capability_list": {
          "items": {
            "x-ntnx-enum": [
              "SELF_SERVICE_RESTORE",
              "VSS_SNAPSHOT"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Application names that are enabled."
        },
        "credentials": {
          "description": "Administrator Credentials of UVM. This is required for installing Nutanix Guest Tools on the UVM.\n",
          "$ref": "#/definitions/credentials"
        },
        "vss_snapshot_capable": {
          "type": "boolean",
          "description": "Whether the VM is configured to take VSS snapshots through NGT.\n"
        },
        "is_reachable": {
          "type": "boolean",
          "description": "Communication from VM to CVM is active or not."
        },
        "vm_mobility_drivers_installed": {
          "type": "boolean",
          "description": "Whether VM mobility drivers are installed in the VM."
        }
      },
      "title": "Nutanix Guest Tools status"
    },
    "custom_project_intent_response": {
      "description": "Response object for intentful operations on a project",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/custom_project_def_status"
        },
        "spec": {
          "$ref": "#/definitions/custom_project"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "project Intent Response"
    },
    "subnet_intent_input": {
      "description": "An intentful representation of a subnet",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/subnet"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/subnet_metadata"
        }
      },
      "title": "subnet Intent Entity"
    },
    "aws_subnet_def_status": {
      "description": "aws_subnet resources status",
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/aws_subnet_resources_def_status"
        }
      },
      "title": "aws_subnet resources status"
    },
    "capabilities": {
      "description": "Category key capabilities defintion.",
      "type": "object",
      "properties": {
        "cardinality": {
          "type": "integer",
          "description": "Cardinality of the category key.",
          "format": "int64"
        }
      },
      "title": "Category key capabilities definition."
    },
    "network_group_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "generic_key_value_pair": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "description": "Generic key value pair used for custom attributes.",
      "title": "Generic key value pair."
    },
    "policy_attribute_schema": {
      "description": "Schema information for events and their respective conditions and subconditions.",
      "type": "object",
      "properties": {
        "events": {
          "items": {
            "type": "object",
            "properties": {
              "attributes": {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "type": "array"
        }
      },
      "title": "Attributes schema"
    },
    "app_cost_input_upload": {
      "description": "Cost definition for Application",
      "required": [
        "name",
        "type",
        "interval",
        "value"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "interval": {
          "x-ntnx-enum": [
            "HOUR",
            "WEEK",
            "MONTH"
          ],
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LIVE",
            "STATIC"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Cost for Application"
    },
    "policy_action_type": {
      "description": "An intentful representation of a policy_action_type spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "policy_action_type Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for policy_action_type.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/policy_action_type_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "policy_action_type Intent Spec with placement specified"
    },
    "tunnel_reference": {
      "description": "The reference to a tunnel",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "tunnel"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a tunnel"
    },
    "marketplace_item_intent_input": {
      "description": "An intentful representation of a marketplace_item",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/marketplace_item"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_metadata"
        }
      },
      "title": "marketplace_item Intent Entity"
    },
    "vm_boot_device": {
      "properties": {
        "disk_address": {
          "description": "Address of disk to boot from.",
          "$ref": "#/definitions/disk_address"
        },
        "mac_address": {
          "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
          "type": "string",
          "description": "MAC address of nic to boot from.",
          "x-example": "50:6b:8d:ee:de:2b"
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "disk_address"
          ]
        },
        {
          "required": [
            "mac_address"
          ]
        }
      ],
      "type": "object",
      "description": "Indicates which device a VM should boot from. One of disk_address or mac_address should be provided.\n",
      "title": "VM Boot device"
    },
    "app_engine_runlog_status_response": {
      "description": "App Engine Runlog Status Response",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/app_engine_runlog_task_uuid_response"
          },
          "type": "array"
        }
      },
      "title": "App Engine Runlog Status Response"
    },
    "new_blueprint_reference": {
      "required": [
        "name"
      ],
      "type": "object",
      "description": "New blueprint details",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the blueprint"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "UUID of the blueprint",
          "format": "UUID"
        }
      }
    },
    "vm_resources": {
      "description": "VM Resources Definition.",
      "type": "object",
      "properties": {
        "num_threads_per_core": {
          "minimum": 1,
          "type": "integer",
          "description": "Number of logical threads per core.",
          "format": "int32"
        },
        "gpu_list": {
          "items": {
            "$ref": "#/definitions/vm_gpu"
          },
          "type": "array",
          "description": "GPUs attached to the VM."
        },
        "memory_size_mib": {
          "minimum": 1,
          "type": "integer",
          "description": "Memory size in MiB.",
          "format": "int32"
        },
        "boot_config": {
          "description": "Indicates which device the VM should boot from.",
          "$ref": "#/definitions/vm_boot_config"
        },
        "disk_list": {
          "items": {
            "$ref": "#/definitions/vm_disk"
          },
          "type": "array",
          "description": "Disks attached to the VM."
        },
        "serial_port_list": {
          "items": {
            "$ref": "#/definitions/serial_port"
          },
          "type": "array",
          "description": "Serial ports configured on the VM."
        },
        "vga_console_enabled": {
          "type": "boolean",
          "description": "Indicates whether VGA console should be enabled or not."
        },
        "power_state": {
          "x-ntnx-enum": [
            "ON",
            "OFF"
          ],
          "type": "string",
          "description": "The current or desired power state of the VM."
        },
        "num_vcpus_per_socket": {
          "minimum": 1,
          "type": "integer",
          "description": "Number of vCPUs per socket.",
          "format": "int32"
        },
        "num_sockets": {
          "minimum": 1,
          "type": "integer",
          "description": "Number of vCPU sockets.",
          "format": "int32"
        },
        "storage_config": {
          "description": "Storage configuration for AHV VMs.",
          "$ref": "#/definitions/vm_storage_config"
        },
        "is_agent_vm": {
          "type": "boolean",
          "description": "Indicates whether the VM is an agent VM. When their host enters maintenance mode, after normal VMs are evacuated, agent VMs are powered off. When the host is restored, agent VMs are powered on before normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.\n"
        },
        "machine_type": {
          "x-ntnx-enum": [
            "PC",
            "PSERIES",
            "Q35"
          ],
          "type": "string",
          "description": "Machine type for the VM. Machine type Q35 is required for secure boot and does not support IDE disks.\n"
        },
        "hardware_clock_timezone": {
          "type": "string",
          "description": "VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n",
          "maxLength": 64
        },
        "guest_customization": {
          "$ref": "#/definitions/guest_customization"
        },
        "power_state_mechanism": {
          "$ref": "#/definitions/vm_power_state_mechanism"
        },
        "is_vcpu_hard_pinned": {
          "type": "boolean",
          "description": "Indicates whether the vCPUs should be hard pinned to specific pCPUs."
        },
        "vnuma_config": {
          "description": "Information regarding vNUMA configuration.",
          "$ref": "#/definitions/vm_vnuma_config"
        },
        "nic_list": {
          "items": {
            "$ref": "#/definitions/vm_nic"
          },
          "type": "array",
          "description": "NICs attached to the VM."
        },
        "guest_os_id": {
          "type": "string",
          "description": "String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify.",
          "maxLength": 64
        },
        "guest_tools": {
          "description": "Information regarding guest tools.",
          "$ref": "#/definitions/guest_tools_spec"
        },
        "enable_cpu_passthrough": {
          "type": "boolean",
          "description": "Indicates whether to passthrough the host's CPU features to the guest. Enabling this will disable live migration of the VM.\n"
        },
        "parent_reference": {
          "description": "Reference to an entity that the VM should be cloned or created from.\n",
          "$ref": "#/definitions/reference"
        },
        "disable_branding": {
          "type": "boolean",
          "description": "Indicates whether to remove AHV branding from VM firmware tables.\n"
        }
      },
      "title": "VM Resources"
    },
    "app_task_share_intent_input": {
      "description": "An intentful representation of a App task",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_task_share"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_task_metadata"
        }
      },
      "title": "App task Intent Entity"
    },
    "endpoint_resources": {
      "description": "Resource object for intentful operations on an endpoint",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Attributes for specified endpoint type."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Resources for endpoints"
    },
    "aws_role_resource": {
      "description": "aws_role entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_role_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_role_metadata"
        }
      },
      "title": "aws_role"
    },
    "custom_project": {
      "description": "A Project resource.",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Project name.",
          "maxLength": 64
        },
        "resources": {
          "type": "object",
          "properties": {
            "resource_domain": {
              "$ref": "#/definitions/resource_domain_spec"
            },
            "account_reference_list": {
              "items": {
                "$ref": "#/definitions/account_reference"
              },
              "type": "array",
              "description": "List of accounts associated with the project."
            },
            "environment_reference_list": {
              "items": {
                "$ref": "#/definitions/environment_reference"
              },
              "type": "array",
              "description": "List of environments associated with the project."
            },
            "default_subnet_reference": {
              "description": "Optional default subnet if one is specified",
              "$ref": "#/definitions/subnet_reference"
            },
            "user_reference_list": {
              "items": {
                "$ref": "#/definitions/user_reference"
              },
              "type": "array",
              "description": "List of users in the project."
            },
            "tunnel_reference_list": {
              "items": {
                "$ref": "#/definitions/tunnel_reference"
              },
              "type": "array",
              "description": "List of tunnels associated with the project."
            },
            "external_user_group_reference_list": {
              "items": {
                "$ref": "#/definitions/user_group_reference"
              },
              "type": "array",
              "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
            },
            "cluster_reference_list": {
              "items": {
                "$ref": "#/definitions/cluster_reference"
              },
              "type": "array",
              "description": "List of clusters associated with the project."
            },
            "subnet_reference_list": {
              "items": {
                "$ref": "#/definitions/subnet_reference"
              },
              "type": "array",
              "description": "List of subnets for the project."
            },
            "vpc_reference_list": {
              "items": {
                "$ref": "#/definitions/vpc_reference"
              },
              "type": "array",
              "description": "List of VPCs associated with the project."
            },
            "external_network_list": {
              "items": {
                "$ref": "#/definitions/external_network"
              },
              "type": "array",
              "description": "List of external networks associated with the project."
            },
            "default_environment_reference": {
              "description": "Optional default environment if one is specified",
              "$ref": "#/definitions/environment_reference"
            }
          },
          "title": "Project Resources"
        },
        "description": {
          "type": "string",
          "description": "Project description.",
          "maxLength": 1000
        }
      },
      "title": "Project resource spec"
    },
    "provider_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "provider",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "provider"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "ip_subnet": {
      "description": "IP subnet provided as an address and prefix length.",
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IPV4 address."
        },
        "prefix_length": {
          "minimum": 0,
          "type": "integer",
          "maximum": 32,
          "format": "int32"
        }
      },
      "title": "IP subnet."
    },
    "ipmi": {
      "description": "Host IPMI info.",
      "required": [
        "ip"
      ],
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "IPMI IP address."
        }
      },
      "title": "Host IPMI info"
    },
    "category_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "category",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "category"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "feature_project_saml": {
      "required": [
        "ui_visibility"
      ],
      "type": "object",
      "properties": {
        "ui_visibility": {
          "x-ntnx-enum": [
            "enabled",
            "disabled"
          ],
          "type": "string",
          "description": ""
        }
      }
    },
    "aws_availability_zone_resource": {
      "description": "aws_availability_zone entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_availability_zone_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_availability_zone_metadata"
        }
      },
      "title": "aws_availability_zone"
    },
    "cluster_def_status": {
      "description": "Cluster status definition.  A Nutanix cluster is comprised of three or\nmore Nutanix nodes. Each node in the cluster contains memory, CPU, RAM,\nand storage (SSD/HDD). Each node in the cluster runs standard hypervisor\nsuch as VMware vSphere, Microsoft Hyper-V, or AHV. A Controller VM (CVM)\nruns on each node in the cluster. The CVM enables each node to share\nlocal storage from all nodes in the cluster.\n",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "readOnly": true,
          "type": "string",
          "description": "The state of the cluster entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Cluster Name."
        },
        "resources": {
          "required": [
            "config",
            "network"
          ],
          "type": "object",
          "description": "Cluster resources.",
          "properties": {
            "nodes": {
              "$ref": "#/definitions/cluster_nodes"
            },
            "config": {
              "$ref": "#/definitions/cluster_config"
            },
            "network": {
              "$ref": "#/definitions/cluster_network"
            },
            "runtime_status_list": {
              "items": {
                "x-ntnx-enum": [
                  "UPGRADE_QUEUED",
                  "UPGRADE_CANCELLED",
                  "UPGRADE_IN_PROGRESS",
                  "UPGRADE_SCHEDULED",
                  "HAVE_SELF_ENCRYPTING_DRIVE",
                  "SSP_CONFIG_OWNER"
                ],
                "type": "string"
              },
              "type": "array",
              "description": "Cluster current attributes and onging operations."
            }
          }
        }
      },
      "title": "Cluster Status"
    },
    "host_def_status": {
      "description": "Host Status definition.",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the entity"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Host Name."
        },
        "resources": {
          "description": "Host resources.",
          "type": "object",
          "properties": {
            "gpu_driver_version": {
              "type": "string",
              "description": "Host GPU driver version."
            },
            "failover_cluster": {
              "$ref": "#/definitions/failover_cluster"
            },
            "controller_vm": {
              "$ref": "#/definitions/controller_vm"
            },
            "ipmi": {
              "$ref": "#/definitions/ipmi"
            },
            "rackable_unit_reference": {
              "$ref": "#/definitions/rackable_unit_reference"
            },
            "host_type": {
              "x-ntnx-enum": [
                "HYPER_CONVERGED",
                "COMPUTE_ONLY"
              ],
              "type": "string",
              "description": "Host type."
            },
            "cpu_model": {
              "type": "string",
              "description": "Host CPU model."
            },
            "host_nics_id_list": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Host NICs."
            },
            "num_cpu_sockets": {
              "type": "integer",
              "description": "Number of CPU sockets.",
              "format": "int64"
            },
            "windows_domain": {
              "$ref": "#/definitions/windows_domain"
            },
            "gpu_list": {
              "items": {
                "$ref": "#/definitions/host_gpu"
              },
              "type": "array",
              "description": "List of GPUs on the host."
            },
            "num_cpu_cores": {
              "type": "integer",
              "description": "Number of CPU cores on Host.",
              "format": "int64"
            },
            "monitoring_state": {
              "x-ntnx-enum": [
                "MONITORED",
                "NOT_MONITORED"
              ],
              "type": "string",
              "description": "Host monitoring status."
            },
            "cpu_capacity_hz": {
              "type": "integer",
              "description": "Host CPU capacity.",
              "format": "int64"
            },
            "serial_number": {
              "type": "string",
              "description": "Node serial number."
            },
            "memory_capacity_mib": {
              "type": "integer",
              "description": "Host memory capacity in MiB.",
              "format": "int64"
            },
            "hypervisor": {
              "$ref": "#/definitions/hypervisor"
            },
            "block": {
              "$ref": "#/definitions/block"
            },
            "host_disks_reference_list": {
              "items": {
                "$ref": "#/definitions/disk_reference"
              },
              "type": "array"
            }
          },
          "title": "Host Resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/reference"
        }
      },
      "title": "Host Status"
    },
    "cluster_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "cluster",
          "x-ntnx-enum": [
            "cluster"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for cluster list output"
    },
    "identity_provider_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "identity_provider",
          "x-ntnx-enum": [
            "identity_provider"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for identity_provider list"
    },
    "vm_revert_input": {
      "description": "Input object for the revert API. Pass the UUID of the vm_recovery_point to which the vm is to be reverted to.\n",
      "required": [
        "vm_recovery_point_uuid"
      ],
      "type": "object",
      "properties": {
        "vm_recovery_point_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Revert API input"
    },
    "app_consumption_response": {
      "description": "Consumption response data",
      "type": "object",
      "properties": {
        "total_spend": {
          "type": "number",
          "description": "Total spend for the time range"
        },
        "data_available_till": {
          "type": "number",
          "description": "Time till when data is available"
        },
        "entries": {
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string"
              },
              "data": {
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number"
                    },
                    "key": {
                      "type": "string"
                    }
                  }
                },
                "type": "array"
              },
              "spend": {
                "type": "number"
              }
            }
          },
          "type": "array",
          "description": "Consumption entries"
        },
        "next": {
          "type": "string",
          "description": "URI & params for next set of entries"
        },
        "currency": {
          "type": "string",
          "description": "Currency for cunsumption data"
        }
      },
      "title": "Consumption response data"
    },
    "category_reference": {
      "description": "The reference to a category",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "category",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "category"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a category"
    },
    "vpc_reference_upload": {
      "description": "The reference to a vpc",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "vpc",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vpc"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a vpc"
    },
    "app_resources": {
      "description": "Resources for Application.",
      "required": [
        "variable_list",
        "deployment_list",
        "action_list",
        "credential_list"
      ],
      "type": "object",
      "properties": {
        "app_blueprint_reference": {
          "$ref": "#/definitions/blueprint_reference"
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environment uuids which are attached the app profile"
        },
        "patch_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of Patch for Application."
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of Action for Application."
        },
        "default_credential_local_reference": {
          "description": "Default credential for appspec",
          "$ref": "#/definitions/app_credential_reference"
        },
        "app_blueprint_config_reference": {
          "$ref": "#/definitions/blueprint_reference"
        },
        "credential_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input"
          },
          "type": "array",
          "description": "Credential list for appspec"
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "app_profile_config_reference": {
          "$ref": "#/definitions/app_profile_reference"
        },
        "dependency_list": {
          "items": {
            "$ref": "#/definitions/blueprint_dependency_list"
          },
          "type": "array",
          "description": "Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks"
        },
        "cloned_from_reference": {
          "$ref": "#/definitions/app_reference"
        },
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_input"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "deployment_list": {
          "items": {
            "$ref": "#/definitions/app_deployment_input"
          },
          "type": "array",
          "description": "List of Deployment Spec for Application."
        }
      },
      "title": "Resources for Application."
    },
    "vm_restore_override_spec": {
      "description": "Properties of the vm that can be overriden.\n",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "vm Name.",
          "maxLength": 64
        },
        "resources": {
          "description": "vm Resources Definition.",
          "type": "object",
          "properties": {
            "nic_list": {
              "items": {
                "$ref": "#/definitions/vm_nic"
              },
              "type": "array",
              "description": "NICs attached to the VM."
            }
          },
          "title": "vm Resources"
        }
      },
      "title": "vm override spec"
    },
    "public_key": {
      "description": "Public Key",
      "required": [
        "name",
        "key"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "key": {
          "type": "string"
        }
      },
      "title": "Public Key"
    },
    "network_group_tunnel_vm_metadata": {
      "description": "The network_group_tunnel_vm kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group_tunnel_vm was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "network_group_tunnel_vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel_vm"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "network_group_tunnel_vm uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the network_group_tunnel_vm is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when network_group_tunnel_vm was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the network_group_tunnel_vm. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the network_group_tunnel_vm. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "network_group_tunnel_vm name",
          "maxLength": 80
        }
      },
      "title": "network_group_tunnel_vm metadata"
    },
    "groups_get_entities_response": {
      "description": "Get Entities Response.",
      "type": "object",
      "properties": {
        "entity_type": {
          "type": "string"
        },
        "filtered_group_count": {
          "type": "integer",
          "format": "int64"
        },
        "total_entity_count": {
          "type": "integer",
          "format": "int64"
        },
        "filtered_entity_count": {
          "type": "integer",
          "format": "int64"
        },
        "group_results": {
          "items": {
            "$ref": "#/definitions/groups_group_result"
          },
          "type": "array"
        },
        "total_group_count": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "Get Entities Response"
    },
    "vm_recovery_point_reference_upload": {
      "description": "The reference to a vm_recovery_point",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm_recovery_point",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a vm_recovery_point"
    },
    "environment_intent_response": {
      "description": "Response object for intentful operations on a environment",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/environment_def_status"
        },
        "spec": {
          "$ref": "#/definitions/environment"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/environment_metadata"
        }
      },
      "title": "environment Intent Response"
    },
    "account_intent_resource": {
      "description": "Response object for intentful operations on a account",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/account_def_status"
        },
        "spec": {
          "$ref": "#/definitions/account"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/account_metadata"
        }
      },
      "title": "account Intent Response"
    },
    "blueprint_list_intent_response": {
      "description": "Response object for intentful operation of blueprints",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/blueprint_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "user_def_status": {
      "description": "User status definition.",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the entity."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "Name of the User."
        },
        "resources": {
          "$ref": "#/definitions/user_status_resource"
        }
      },
      "title": "User status definition."
    },
    "aws_resource_state": {
      "x-ntnx-enum": [
        "AVAILABLE",
        "PENDING"
      ],
      "type": "string",
      "description": "State of the AWS resource",
      "title": "Resource State"
    },
    "app_variable_input": {
      "description": "Variable definition for application.",
      "required": [
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Variable definition for application."
    },
    "host_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "host",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "host"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "app_abort_script_input": {
      "description": "abort script input",
      "required": [
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/abort_script_input_spec"
        },
        "api_version": {
          "type": "string",
          "description": "api version"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "abort script input"
    },
    "app_variable_intent_input": {
      "description": "An intentful representation of a app_variable",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_variable"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_variable_metadata"
        }
      },
      "title": "app_variable Intent Entity"
    },
    "category_query_response": {
      "description": "Categories query response object.",
      "type": "object",
      "properties": {
        "results": {
          "items": {
            "type": "object",
            "properties": {
              "filtered_entity_count": {
                "type": "integer",
                "description": "Total number of filtered results.",
                "format": "int64"
              },
              "kind": {
                "type": "string",
                "description": "The entity kind."
              },
              "kind_reference_list": {
                "items": {
                  "$ref": "#/definitions/entity_reference"
                },
                "type": "array",
                "description": "List of entity references."
              },
              "total_entity_count": {
                "type": "integer",
                "description": "Total number of the matched results.",
                "format": "int64"
              }
            }
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "type": "object",
          "description": "Response metadata.",
          "properties": {
            "total_matches": {
              "type": "integer",
              "description": "Total number of matched results.",
              "format": "int64"
            },
            "usage_type": {
              "$ref": "#/definitions/category_query_usage_type"
            },
            "group_member_offset": {
              "type": "integer",
              "description": "The offset into the total records set to return per group.\n",
              "format": "int64"
            },
            "group_member_count": {
              "type": "integer",
              "description": "The maximum number of records to return per group.",
              "format": "int64"
            }
          }
        }
      },
      "title": "Category Query Response"
    },
    "policy_metadata": {
      "description": "The policy kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "policy uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the policy is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when policy was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the policy. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the policy. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "policy name",
          "maxLength": 80
        }
      },
      "title": "policy metadata"
    },
    "runbook_runlog_output_response": {
      "description": "Response containing the last 10 lines of output",
      "required": [
        "api_version",
        "metadata",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/runbook_runlog_output_status"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_runlog_metadata"
        }
      },
      "title": "Response containing the last 10 lines of output"
    },
    "quota_entry": {
      "type": "object",
      "description": "Quota values on a group of entities",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "entities": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "state": {
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "minimum": -1,
            "type": "integer",
            "description": "The value for quota attributes(vcpu, disk, memory)",
            "format": "int64"
          },
          "type": "object"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "calm_feature_reference": {
      "description": "The reference to a calm_feature",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "calm_feature",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "calm_feature"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a calm_feature"
    },
    "marketplace_icon_intent_response": {
      "description": "Response object for intentful operations on a marketplace_icon",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/marketplace_icon_def_status"
        },
        "spec": {
          "$ref": "#/definitions/marketplace_icon"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_icon_metadata"
        }
      },
      "title": "marketplace_icon Intent Response"
    },
    "mutable_blueprint_resources_def_status": {
      "description": "Status of the Blueprint.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_service_response"
          },
          "type": "array",
          "description": "Service definitions for Blueprint."
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/mutable_app_substrate_response"
          },
          "type": "array",
          "description": "Substrate definitions for Blueprint."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response"
          },
          "type": "array",
          "description": "Credential definitions for Blueprint."
        },
        "published_service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_response"
          },
          "type": "array",
          "description": "Published service definitions for Blueprint."
        },
        "app_profile_list": {
          "items": {
            "$ref": "#/definitions/app_profile_response"
          },
          "type": "array",
          "description": "App profile definitions for Blueprint."
        },
        "mutable_fields": {
          "type": "object",
          "$ref": "#/definitions/blueprint_mutable_fields"
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "package_definition_list": {
          "items": {
            "$ref": "#/definitions/app_package_response"
          },
          "type": "array",
          "description": "Package definitions for Blueprint."
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": "Type of blueprint",
          "maxLength": 64
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for app blueprint"
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Cloned or original blueprint"
        }
      },
      "title": "Status of the Blueprint."
    },
    "blueprint_resources": {
      "description": "Resources for Blueprint.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_service_input"
          },
          "type": "array",
          "description": "Service definitions for Blueprint."
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_input"
          },
          "type": "array",
          "description": "Substrate definitions for Blueprint."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/endpoint_upload"
          },
          "type": "array",
          "description": "Endpoint definitions for Blueprint."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_input"
          },
          "type": "array",
          "description": "Credential definitions for Blueprint."
        },
        "package_definition_list": {
          "items": {
            "$ref": "#/definitions/app_package_input"
          },
          "type": "array",
          "description": "Package definitions for Blueprint."
        },
        "app_profile_list": {
          "items": {
            "$ref": "#/definitions/app_profile_input"
          },
          "type": "array",
          "description": "App profile definitions for Blueprint."
        },
        "published_service_definition_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_input"
          },
          "type": "array",
          "description": "Published service definitions for Blueprint."
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_reference"
        },
        "endpoints_mapping": {
          "additionalProperties": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              }
            }
          },
          "type": "object",
          "description": "Mapping for endpoint name and endpoint uuid in new project"
        },
        "type": {
          "type": "string",
          "description": "Type of blueprint",
          "maxLength": 64
        }
      },
      "title": "Resources for Blueprint."
    },
    "subnet_list_intent_response": {
      "description": "Response object for intentful operation of subnets",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/subnet_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/subnet_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "provider_def_status": {
      "description": "An intentful representation of a provider status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "provider Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the provider."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the provider, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/provider_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for provider."
        }
      },
      "title": "provider Intent Status with placement specified"
    },
    "app_action_response": {
      "description": "Action definition for Application",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for action"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "critical": {
          "default": false,
          "type": "boolean",
          "description": "action critical flag"
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "action attrs"
        },
        "runbook": {
          "description": "Action runbooks\n",
          "$ref": "#/definitions/app_runbook_response"
        },
        "type": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Action for Application"
    },
    "app_saas_consumption_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_saas_consumption",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_saas_consumption"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "account_intent_input": {
      "description": "An intentful representation of a account",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/account"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/account_metadata"
        }
      },
      "title": "account Intent Entity"
    },
    "runbook_upload": {
      "description": "Runbook upload kind",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/runbook_upload_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "Runbook upload kind"
    },
    "marketplace_icon_resources": {
      "description": "Marketplace icon resources",
      "required": [
        "link",
        "type",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "x-ntnx-enum": [
            "ICON"
          ],
          "type": "string",
          "description": "Marketplace Icon type"
        },
        "link": {
          "type": "string",
          "description": "Marketplace Icon link"
        },
        "uuid": {
          "type": "string",
          "description": "Marketplace Icon uuid",
          "format": "UUID"
        },
        "data": {
          "type": "string",
          "description": "Base64 encoded data",
          "format": "bytes"
        }
      },
      "title": "Marketplace icon resources"
    },
    "network_group_tunnel_vm_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel_vm",
          "x-ntnx-enum": [
            "network_group_tunnel_vm"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for network_group_tunnel_vm list output"
    },
    "runbook_list_intent_response": {
      "description": "Response object for intentful operation of runbooks",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/runbook_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "blueprint_upload": {
      "description": "App blueprint upload kind",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/blueprint_upload_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "App blueprint upload kind"
    },
    "approval_request_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "approval_request",
          "x-ntnx-enum": [
            "approval_request"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for approval_request list"
    },
    "app_icon_summary_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_icon_summary",
          "x-ntnx-enum": [
            "app_icon_summary"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_icon_summary list output"
    },
    "blueprint_patch_with_environment_validate_response": {
      "description": "Response containing information on whether given app-profile and environment pairs are valid for patching",
      "required": [
        "api_version",
        "metadata",
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_patch_with_environment_validate_response_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint_patch_with_environment_validate_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Response containing information on whether given app-profile and environment pairs are valid for patching"
    },
    "category_key_status": {
      "description": "Category Key Definition.",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "capabilities": {
          "$ref": "#/definitions/capabilities"
        },
        "system_defined": {
          "readOnly": true,
          "type": "boolean",
          "description": "Specifying whether its a system defined category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category.",
          "maxLength": 1000
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "name": {
          "type": "string",
          "description": "Name of the category.",
          "maxLength": 64
        }
      },
      "title": "Category Key Definition."
    },
    "aws_subnet_resources_def_status": {
      "description": "AWS Subnet creation/modification status.",
      "type": "object",
      "properties": {
        "vpc_id": {
          "pattern": "^vpc-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the VPC the subnet is in."
        },
        "cidr_block": {
          "type": "string",
          "description": "The CIDR block assigned to the subnet.",
          "maxLength": 64
        },
        "tag_list": {
          "$ref": "#/definitions/aws_tag_list"
        },
        "id": {
          "pattern": "^subnet-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the subnet."
        },
        "state": {
          "$ref": "#/definitions/aws_resource_state"
        }
      },
      "title": "AWS subnet creation/modification status"
    },
    "vswitch_config": {
      "description": "VSwitch configuration.",
      "required": [
        "nic_teaming_policy",
        "uplink_grouping"
      ],
      "type": "object",
      "properties": {
        "nic_teaming_policy": {
          "x-ntnx-enum": [
            "ACTIVE_BACKUP",
            "BALANCE_SLB",
            "BALANCE_TCP"
          ],
          "type": "string",
          "description": "NIC teaming policy."
        },
        "uplink_grouping": {
          "x-ntnx-enum": [
            "NO_UPLINKS",
            "ALL",
            "ALL_1G",
            "ALL_10G",
            "ALL_25G",
            "ALL_40G",
            "ALL_100G"
          ],
          "type": "string",
          "description": "Determines how the ethernet uplinks are selected for this vswitch."
        }
      },
      "title": "VSwitch configuration"
    },
    "directory_service_user_status": {
      "description": "A Directory Service user.",
      "type": "object",
      "properties": {
        "user_principal_name": {
          "type": "string",
          "description": "The UserPrincipalName of the user from the directory service. It will be same as default user principal name if no upn suffix is enabled for user logon name in directory service.\n",
          "maxLength": 104
        },
        "directory_service_reference": {
          "description": "Directory service reference if the user type is directory service.\n",
          "$ref": "#/definitions/directory_service_reference"
        },
        "default_user_principal_name": {
          "type": "string",
          "description": "The Default UserPrincipalName of the user from the directory service. This is of format samAccountName@domain_name.\n",
          "maxLength": 104
        }
      },
      "title": "Directory Service user Response."
    },
    "marketplace_item": {
      "description": "Detailed spec for creation of an marketplace item",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Marketplace item name",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/marketplace_item_input_resources"
        },
        "description": {
          "type": "string",
          "description": "Marketplace item description",
          "maxLength": 5000
        }
      },
      "title": "Marketplace item information"
    },
    "policy_event_list_intent_response": {
      "description": "Response object for intentful operation of policy_events",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/policy_event_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/policy_event_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "runbook_marketplace_clone_resources": {
      "description": "Resources for Runbook clone from Marketplace.",
      "required": [
        "marketplace_reference"
      ],
      "type": "object",
      "properties": {
        "marketplace_reference": {
          "description": "Marketplace reference to use for clone.",
          "$ref": "#/definitions/marketplace_item_reference"
        }
      },
      "title": "Resources for Runbook clone from Marketplace."
    },
    "runbook_runbook_response_download": {
      "description": "Runbook definition for Application",
      "required": [
        "name",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "output_variables": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output Variables for runbook"
        },
        "task_definition_list": {
          "items": {
            "$ref": "#/definitions/app_task_response_download"
          },
          "type": "array",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "main_task_local_reference": {
          "$ref": "#/definitions/app_task_reference_upload"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Runbook for Application"
    },
    "groups_field_data": {
      "description": "Group Summary Data.",
      "type": "object",
      "properties": {
        "buckets": {
          "$ref": "#/definitions/groups_bucket_summary_map"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/groups_timevalue_pair"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Group Summary Data"
    },
    "policy_output_response": {
      "description": "Response for output of policy feature status",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "required": [
            "output"
          ],
          "type": "object",
          "properties": {
            "output": {
              "type": "string"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Response for output of policy feature status"
    },
    "recovery_group_resource": {
      "description": "Response object for recovery group object",
      "type": "object",
      "properties": {
        "resources": {
          "additionalProperties": true,
          "type": "object",
          "description": "Response attributes for recovery group object"
        }
      },
      "title": "recovery group response"
    },
    "project_internal_intent_response": {
      "description": "Response object for intentful operations on a Project",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/project_internal_def_status"
        },
        "spec": {
          "$ref": "#/definitions/project_internal"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "Project Intent Response"
    },
    "image_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "image",
          "x-ntnx-enum": [
            "image"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for image list"
    },
    "marketplace_icon_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_icon",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_icon"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "category_value": {
      "description": "Category value definition.",
      "type": "object",
      "properties": {
        "assignment_rule": {
          "$ref": "#/definitions/assignment_rule"
        },
        "value": {
          "type": "string",
          "description": "Value for the category.",
          "maxLength": 64
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "description": {
          "type": "string",
          "description": "Description of the category value.",
          "maxLength": 1000
        }
      },
      "title": "Category Value definition."
    },
    "aws_subnet_list_response": {
      "description": "AWS subnets entity list.",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/aws_subnet_resource"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/aws_subnet_list_metadata_output"
        }
      },
      "title": "aws_subnet entity list"
    },
    "app_profile_response": {
      "description": "App profile resources",
      "required": [
        "name",
        "uuid",
        "state",
        "message_list",
        "dependency_list"
      ],
      "type": "object",
      "properties": {
        "deployment_create_list": {
          "items": {
            "$ref": "#/definitions/blueprint_deployment_response"
          },
          "type": "array",
          "description": ""
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environment uuids which are attached the app profile"
        },
        "patch_list": {
          "items": {
            "$ref": "#/definitions/config_response"
          },
          "type": "array",
          "description": "List of references to app edit patches\n"
        },
        "description": {
          "type": "string",
          "description": ""
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "name": {
          "type": "string",
          "description": ""
        },
        "restore_config_list": {
          "items": {
            "$ref": "#/definitions/config_response"
          },
          "type": "array",
          "description": "List of references to restore_configs\n"
        },
        "snapshot_config_list": {
          "items": {
            "$ref": "#/definitions/config_response"
          },
          "type": "array",
          "description": "List of references to snapshot_configs\n"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for blueprint deployment"
        },
        "dependency_list": {
          "items": {
            "$ref": "#/definitions/blueprint_dependency_list"
          },
          "type": "array"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "App profile resources"
    },
    "groups_attribute_type": {
      "x-ntnx-enum": [
        "CONTINUOUS",
        "DISCRETE"
      ],
      "type": "string",
      "description": "The type of an attribute being used for grouping - may be continuous or discrete.\n",
      "title": "Attribute Type"
    },
    "app_protection_policy_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_protection_policy",
          "x-ntnx-enum": [
            "app_protection_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for app_protection_policy list output"
    },
    "controller_vm": {
      "description": "Host controller vm information.",
      "required": [
        "ip"
      ],
      "type": "object",
      "properties": {
        "ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "readOnly": true,
          "type": "string",
          "description": "Controller VM IP address."
        },
        "nat_ip": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Controller VM NAT IP address."
        },
        "oplog_usage": {
          "$ref": "#/definitions/oplog_usage"
        },
        "nat_port": {
          "type": "integer",
          "description": "Controller VM NAT port.",
          "format": "int32"
        }
      },
      "title": "Host Controller VM Info"
    },
    "job_instances_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "job_instance",
          "x-ntnx-enum": [
            "job_instance"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "default": 20,
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for job instance list"
    },
    "http_proxy_whitelist": {
      "description": "HTTP Proxy Whitelist.",
      "required": [
        "target",
        "target_type"
      ],
      "type": "object",
      "properties": {
        "target": {
          "type": "string"
        },
        "target_type": {
          "x-ntnx-enum": [
            "IPV4_ADDRESS",
            "IPV4_NETWORK_MASK",
            "DOMAIN_NAME_SUFFIX",
            "HOST_NAME"
          ],
          "type": "string"
        }
      },
      "title": "HTTP Proxy Whitelist"
    },
    "nutanix_reference": {
      "description": "The reference to a nutanix",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "nutanix",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "nutanix"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a nutanix"
    },
    "vm_reference": {
      "description": "The reference to a vm",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a vm"
    },
    "nutanix_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "nutanix",
          "x-ntnx-enum": [
            "nutanix"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for nutanix list"
    },
    "app_variable_intent_resource": {
      "description": "Response object for intentful operations on a app_variable",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_variable_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_variable"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_variable_metadata"
        }
      },
      "title": "app_variable Intent Response"
    },
    "approval_set_object": {
      "description": "Approval will be taken from users in approval set",
      "required": [
        "name",
        "type",
        "state",
        "approval_element_list"
      ],
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "APPROVED",
            "REJECTED"
          ],
          "type": "string",
          "description": "State of approval set.\n"
        },
        "type": {
          "enum": [
            "ALL",
            "ANY"
          ],
          "type": "string",
          "description": "State of approval request.\n"
        },
        "name": {
          "type": "string"
        },
        "approval_element_list": {
          "items": {
            "$ref": "#/definitions/approval_element_object"
          },
          "type": "array",
          "description": "Approval elements for this approval_set"
        }
      },
      "title": "Approval Sets of approval_request"
    },
    "xi_vpc_item": {
      "description": "VPC resource in Xi",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "common_domain_name_server_ip_list": {
          "items": {
            "$ref": "#/definitions/address"
          },
          "type": "array",
          "description": "List of domain name server IPs."
        },
        "nat_ip_list": {
          "items": {
            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "type": "string"
          },
          "type": "array",
          "description": "List of IP addresses used for SNAT."
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones in Xi from which resources are derived (Only supported on Xi)\n"
        },
        "name": {
          "type": "string",
          "description": "VPC Name.",
          "maxLength": 64
        },
        "vpn_config": {
          "x-ntnx-enum": [
            "CONNECTED",
            "DISCONNECTED"
          ],
          "type": "string",
          "description": "Per region providing secure connection from on-prem to Xi (Only supported on Xi)\n"
        }
      },
      "title": "VPC resource in Xi"
    },
    "citrix_connector_config_details": {
      "description": "Citrix Connector details.",
      "type": "object",
      "properties": {
        "citrix_vm_reference_list": {
          "items": {
            "$ref": "#/definitions/vm_reference"
          },
          "type": "array",
          "description": "Reference to the list of vm ids registered with citrix cloud."
        },
        "client_secret": {
          "type": "string",
          "description": "The client secret for the Citrix Cloud."
        },
        "customer_id": {
          "type": "string",
          "description": "The customer id registered with Citrix Cloud."
        },
        "client_id": {
          "type": "string",
          "description": "The client id for the Citrix Cloud."
        },
        "resource_location": {
          "$ref": "#/definitions/citrix_resource_location"
        }
      },
      "title": "Citrix Connector details."
    },
    "disk_reference_upload": {
      "description": "The reference to a disk",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "disk",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "disk"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a disk"
    },
    "schedule": {
      "description": "Defines the schedule parameters.",
      "required": [
        "interval_type",
        "interval_multiple"
      ],
      "type": "object",
      "properties": {
        "interval_type": {
          "x-ntnx-enum": [
            "ONCE",
            "MINUTELY",
            "HOURLY",
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "YEARLY"
          ],
          "type": "string",
          "description": "Type of schedule interval. For schedule once, the interval_type is set\nto Once. ONCE is for aperiodic schedules.\n"
        },
        "duration_secs": {
          "type": "integer",
          "description": "Duration of the event. If set, an event of duration duration_usecs\nwill repeat as per the recurrence defined in interval_type.\n",
          "format": "int64"
        },
        "start_time": {
          "type": "string",
          "description": "Start time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n",
          "format": "date-time"
        },
        "interval_multiple": {
          "type": "integer",
          "description": "Multiple of interval_type.",
          "format": "int32"
        },
        "day_of_week": {
          "items": {
            "x-ntnx-enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "For schedule on weekly basis,like every Monday and Friday 10:00. To use this field, it is\nrequired that start_time (datetime) is set, and the interval_type is set to weekly or\nNONE.  If interval_type is set to NONE, then, only schedule for Monday and Friday once, in\nthis example.\n"
        },
        "end_time": {
          "type": "string",
          "description": "End time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n",
          "format": "date-time"
        },
        "is_suspended": {
          "type": "boolean",
          "description": "Whether the schedule is suspended."
        }
      },
      "title": "Schedule definition."
    },
    "task_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "task",
          "x-ntnx-enum": [
            "task"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for task list"
    },
    "storage_qos_policy_config_output": {
      "description": "The policy rule to be enforced depending on the type of policy. For ex -\nprovisioned/throttled iops would be set for a storage qos policy.\n",
      "type": "object",
      "properties": {
        "throttled_iops": {
          "type": "integer",
          "description": "Throttled iops for the entities being governed by the policy. The\nblock size for the IO is 32kB.\n",
          "format": "int64"
        }
      },
      "title": "Storage Qos Policy Parameters Output."
    },
    "xi_image_list_response": {
      "description": "Response body for xi images list",
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/xi_image_item"
          },
          "type": "array"
        }
      },
      "title": "Response body for xi images list"
    },
    "mh_vm_def_status": {
      "description": "An intentful representation of a mh_vm status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "mh_vm Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the mh_vm."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the mh_vm, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/mh_vm_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for mh_vm."
        }
      },
      "title": "mh_vm Intent Status with placement specified"
    },
    "encryption_status": {
      "default": "NOT_SUPPORTED",
      "x-ntnx-enum": [
        "NOT_SUPPORTED",
        "DISABLED",
        "ENABLED"
      ],
      "type": "string",
      "description": "Cluster encryption status.",
      "title": "Cluster encryption status"
    },
    "availability_zone_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "availability_zone",
          "x-ntnx-enum": [
            "availability_zone"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for availability_zone list"
    },
    "app_substrate_element": {
      "description": "Substrate element definition for Application",
      "required": [
        "uuid",
        "name",
        "type",
        "variable_list",
        "action_list",
        "state"
      ],
      "type": "object",
      "properties": {
        "recovery_point_reference": {
          "description": "Recovery Point Reference of the substrate",
          "$ref": "#/definitions/vm_recovery_point_reference"
        },
        "instance_address": {
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "platform_data": {
          "type": "string",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "instance_id": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "readiness_probe": {
          "$ref": "#/definitions/app_substrate_readiness_probe"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "os_type": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "VM",
            "AHV_VM",
            "AWS_VM",
            "GCP_VM",
            "AZURE_VM",
            "EXISTING_VM",
            "BARE_METAL",
            "GENERIC",
            "VMWARE_VM",
            "K8S_POD",
            "XI_RC_VM",
            "HTTP"
          ],
          "type": "string",
          "description": ""
        },
        "create_spec": {
          "additionalProperties": true,
          "type": "object",
          "description": "Spec of the substrate"
        },
        "instance_name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "instance_power_state": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Substrate element for Application"
    },
    "app_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app",
          "x-ntnx-enum": [
            "app"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app list"
    },
    "app_package_reference_upload": {
      "description": "The reference to a app_package",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_package",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_package"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_package"
    },
    "cloud_credentials": {
      "description": "Cloud credentials spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User friendly name for the credentials.",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/cloud_credentials_resources"
        }
      },
      "title": "Cloud Credentials Spec"
    },
    "environment_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "environment",
          "x-ntnx-enum": [
            "environment"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for environment list"
    },
    "match_user_details": {
      "description": "Details of user",
      "type": "object",
      "properties": {
        "user_attribute_list": {
          "items": {
            "$ref": "#/definitions/user_attribute"
          },
          "type": "array"
        },
        "type": {
          "type": "string",
          "maxLength": 64
        },
        "name": {
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "User details"
    },
    "task_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "task",
          "x-ntnx-enum": [
            "task"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for task list output"
    },
    "endpoint_download_intent_response": {
      "description": "Response object for intentful operations on an endpoint",
      "required": [
        "api_version",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/endpoint_download_def_status"
        },
        "spec": {
          "$ref": "#/definitions/endpoint_upload"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/endpoint_metadata"
        }
      },
      "title": "Endpoint Intent Response"
    },
    "license_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "license",
          "x-ntnx-enum": [
            "license"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for license list output"
    },
    "policy_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy",
          "x-ntnx-enum": [
            "policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for policy list output"
    },
    "app_clone_spec": {
      "description": "Spec for application clone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the cloned application",
          "maxLength": 5000
        },
        "description": {
          "type": "string",
          "description": "Description of the application"
        }
      },
      "title": "Spec for application clone"
    },
    "cluster_software": {
      "description": "Cluster software.",
      "required": [
        "software_type",
        "version"
      ],
      "properties": {
        "status": {
          "default": "INSTALLED",
          "x-ntnx-enum": [
            "INSTALLED",
            "UPGRADING",
            "DOWNLOADED"
          ],
          "type": "string",
          "description": "Current software status."
        },
        "version": {
          "type": "string"
        },
        "software_type": {
          "$ref": "#/definitions/software_type"
        }
      },
      "title": "Cluster software"
    },
    "vm_storage_config_status": {
      "description": "Current state of storage configuration parameters.",
      "type": "object",
      "properties": {
        "qos_policy": {
          "description": "Storage qos policy parameters applied on the VM.",
          "$ref": "#/definitions/storage_qos_policy_config_output"
        },
        "flash_mode": {
          "description": "Indicates whether Flash Mode is enabled or disabled on the VM.\nWhen enabled, virtual disks of VM are pinned to the hot tier.\n",
          "$ref": "#/definitions/flash_mode"
        }
      },
      "title": "VM Storage Config output"
    },
    "action_reference_upload": {
      "description": "The reference to a action",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "action",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "action"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a action"
    },
    "abort_script_input_spec": {
      "additionalProperties": true,
      "type": "object",
      "description": "abort script input spec",
      "title": "abort script input spec"
    },
    "app_variable_response": {
      "description": "Variable definition for application.",
      "required": [
        "name",
        "uuid",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for variable"
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Variable definition for application."
    },
    "cluster_operation_mode": {
      "x-ntnx-enum": [
        "NORMAL",
        "READ_ONLY",
        "STAND_ALONE",
        "SWITCH_TO_TWO_NODE",
        "OVERRIDE"
      ],
      "type": "string",
      "description": "Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is\n                 valid only for single node or two node clusters.\n- 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node\n                        cluster.\n- 'OVERRIDE': Valid only for single node cluster. If the user wants to\n              run vms on a single node cluster in read only mode, he\n              can set the cluster peration mode to override. Writes\n              will be allowed in override mode.\n",
      "title": "Cluster operation mode"
    },
    "app_service_input": {
      "description": "Service definition for Application",
      "required": [
        "name",
        "uuid",
        "variable_list",
        "action_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to service action\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "config_reference": {
          "$ref": "#/definitions/app_service_reference"
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "container_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s continaer spec"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        }
      },
      "title": "Service for Application"
    },
    "block": {
      "description": "Host block config info.",
      "type": "object",
      "properties": {
        "block_serial_number": {
          "type": "string",
          "description": "Rackable unit serial number."
        },
        "block_model": {
          "type": "string",
          "description": "Rackable unit model name."
        }
      },
      "title": "Host block information"
    },
    "jobs_response": {
      "description": "Restful represtation of the job",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/jobs_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/jobs_metadata"
        }
      },
      "title": "job Response"
    },
    "project_usage_filter": {
      "description": "Project usage filter body",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts under the project"
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of environments under the project"
        },
        "user_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of users under the project"
        },
        "vpc_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of vpc under the project"
        },
        "cluster_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of cluster under the project"
        },
        "subnet_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of subnets under the project"
        }
      },
      "title": "Project usage filter body"
    },
    "client_auth": {
      "description": "Client authentication config.",
      "required": [
        "status"
      ],
      "type": "object",
      "properties": {
        "status": {
          "default": "DISABLED",
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "Status of client authentication."
        },
        "ca_chain": {
          "readOnly": true,
          "type": "string",
          "description": "Content of CA chain certificate.",
          "format": "byte"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Name of CA chain file.",
          "maxLength": 64
        }
      },
      "title": "Client authentication config"
    },
    "substrate_reference_upload": {
      "description": "The reference to a substrate",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "substrate",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "substrate"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a substrate"
    },
    "network_group": {
      "description": "An intentful representation of a network_group spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "network_group Name.",
          "maxLength": 256
        },
        "resources": {
          "$ref": "#/definitions/network_group_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for network_group.",
          "maxLength": 1000
        }
      },
      "title": "network_group Intent Spec with placement specified"
    },
    "app_filters": {
      "description": "Supported filters in app list call",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "environment_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vm_name_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vpc_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cluster_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subnet_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Supported filters in app list call"
    },
    "vm_recovery_point_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm_recovery_point",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm_recovery_point"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "project_reference": {
      "description": "The reference to a project",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "project",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "project"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a project"
    },
    "image": {
      "description": "An intentful representation of a image spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "image Name.",
          "maxLength": 80
        },
        "resources": {
          "$ref": "#/definitions/image_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for image.",
          "maxLength": 1000
        }
      },
      "title": "image Intent Spec with placement specified"
    },
    "aws_security_group_resources_def_status": {
      "description": "AWS Security Group resources",
      "type": "object",
      "properties": {
        "vpc_id": {
          "pattern": "^vpc-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the VPC for the security group."
        },
        "tag_list": {
          "$ref": "#/definitions/aws_tag_list"
        },
        "id": {
          "pattern": "^sg-[a-f0-9]{1,17}$",
          "type": "string",
          "description": "The AWS ID of the security group."
        }
      },
      "title": "AWS Security Group resources"
    },
    "app_variable_def_status": {
      "description": "An intentful representation of a app_variable status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_variable Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_variable."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_variable, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_variable_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_variable."
        }
      },
      "title": "app_variable Intent Status with placement specified"
    },
    "blueprint_intent_response": {
      "description": "Response object for intentful operations on a blueprint",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/blueprint_def_status"
        },
        "spec": {
          "$ref": "#/definitions/blueprint"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "blueprint Intent Response"
    },
    "mpi_patch_with_environment_validate_response_status": {
      "description": "Status for marketplace item patch validation.",
      "required": [
        "environment_profile_pairs"
      ],
      "type": "object",
      "properties": {
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/mpi_patch_validate_environment_profile_pair_response"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment"
        }
      },
      "title": "Status for marketplace item patch validation."
    },
    "access_control_policy_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "access_control_policy",
          "x-ntnx-enum": [
            "access_control_policy"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for access_control_policy list"
    },
    "account_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "account",
          "x-ntnx-enum": [
            "account"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for account list"
    },
    "app_protection_policy_intent_response": {
      "description": "Response object for intentful operations on a app_protection_policy",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_protection_policy_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_protection_policy"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_protection_policy_metadata"
        }
      },
      "title": "app_protection_policy Intent Response"
    },
    "app_protection_policy_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_protection_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_protection_policy"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "nutanix_guest_tools_spec": {
      "description": "Information regarding Nutanix Guest Tools.",
      "type": "object",
      "properties": {
        "ngt_state": {
          "x-ntnx-enum": [
            "INSTALLED",
            "UNINSTALLED"
          ],
          "type": "string",
          "description": "Nutanix guest tools is installed or not."
        },
        "iso_mount_state": {
          "x-ntnx-enum": [
            "MOUNTED",
            "UNMOUNTED"
          ],
          "type": "string",
          "description": "Desired mount state of Nutanix Guest Tools ISO.\n"
        },
        "state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "Nutanix Guest Tools is enabled or not."
        },
        "version": {
          "type": "string",
          "description": "Desired Version of Nutanix Guest Tools installed on the VM."
        },
        "enabled_capability_list": {
          "items": {
            "x-ntnx-enum": [
              "SELF_SERVICE_RESTORE",
              "VSS_SNAPSHOT"
            ],
            "type": "string"
          },
          "type": "array",
          "description": "Application names that are enabled."
        },
        "credentials": {
          "description": "Administrator Credentials of UVM. This is required for installing Nutanix Guest Tools on the UVM.\n",
          "$ref": "#/definitions/credentials"
        }
      },
      "title": "Nutanix Guest Tools information"
    },
    "app_task": {
      "description": "An intentful representation of a app_task spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_task Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_task.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_task_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_task Intent Spec with placement specified"
    },
    "app_runlog_archive_response": {
      "description": "App Archive Response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Archive file name."
        },
        "start_time": {
          "type": "string",
          "description": "From time for archive.",
          "format": "date-time"
        },
        "creation_time": {
          "type": "string",
          "description": "Creation time of archive.",
          "format": "date-time"
        },
        "is_available": {
          "type": "boolean",
          "description": "Archive available flag."
        },
        "end_time": {
          "type": "string",
          "description": "Till time for archive.",
          "format": "date-time"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "Archive file uuid.",
          "format": "UUID"
        }
      },
      "title": "App Archive Response"
    },
    "nutanix_metadata": {
      "description": "The nutanix kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when nutanix was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "nutanix",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "nutanix"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "nutanix uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the nutanix is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when nutanix was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the nutanix. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the nutanix. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "nutanix name",
          "maxLength": 80
        }
      },
      "title": "nutanix metadata"
    },
    "role_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "role",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "role"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "vmware_list_metadata": {
      "description": "All vmware meta api calls  will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for vmware meta apis"
    },
    "blueprint_download_def_status": {
      "description": "App blueprint download status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/blueprint_download_resources_def_status"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "App blueprint download status"
    },
    "external_configurations_spec": {
      "description": "External configurations for the connectors.",
      "type": "object",
      "properties": {
        "citrix_connector_config": {
          "$ref": "#/definitions/citrix_connector_config_details_spec"
        }
      },
      "title": "External Connector Configurations."
    },
    "app_engine_runlog_tree_response": {
      "description": "App Engine Runlog Tree Response",
      "type": "object",
      "properties": {
        "entities": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the task"
            },
            "name": {
              "type": "string",
              "description": "Name of the Task"
            },
            "task_id": {
              "type": "string",
              "description": "Uuid of the task",
              "format": "UUID"
            },
            "run_id": {
              "type": "string",
              "description": "Run uuid of the task",
              "format": "UUID"
            },
            "lastmodified": {
              "type": "string",
              "description": "Lastmodified time of the task",
              "format": "date-time"
            },
            "script": {
              "type": "string",
              "description": "Script used in task"
            },
            "exit_code": {
              "type": "string",
              "description": "Exit code of the trl"
            },
            "entity": {
              "type": "string",
              "description": "Entity associated with task"
            },
            "machine": {
              "type": "string",
              "description": "Machine associated with task"
            },
            "reason": {
              "type": "string",
              "description": "Reason for the task status"
            },
            "t_type": {
              "type": "string",
              "description": "Type of the task"
            },
            "created": {
              "type": "string",
              "description": "Creation time of the task",
              "format": "date-time"
            },
            "props": {
              "type": "string",
              "description": "Propertoes of the task"
            },
            "children": {
              "items": {
                "$ref": "#/definitions/app_engine_runlog_task_uuid_response"
              },
              "type": "array"
            },
            "uuid": {
              "type": "string",
              "description": "Engine uuid of the task",
              "format": "UUID"
            }
          }
        }
      },
      "title": "App Engine Runlog Tree Response"
    },
    "app_runbook_reference": {
      "description": "The reference to a app_runbook",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_runbook",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_runbook"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_runbook"
    },
    "app_variable_share_resources": {
      "description": "Libraty variable resources definition.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "val_type": {
          "x-ntnx-enum": [
            "STRING",
            "INT",
            "DICT",
            "DATE",
            "TIME",
            "DATE_TIME",
            "MULTILINE_STRING"
          ],
          "type": "string",
          "description": ""
        },
        "regex": {
          "type": "object",
          "description": "Regex to which variable value should adhere to",
          "properties": {
            "should_validate": {
              "type": "boolean",
              "description": "Whether the variable should be validated against the regex or not"
            },
            "value": {
              "type": "string",
              "description": "Regular expression"
            }
          }
        },
        "is_mandatory": {
          "type": "boolean",
          "description": "Whether the variable MUST have a value or not"
        },
        "data_type": {
          "x-ntnx-enum": [
            "BASE",
            "LIST",
            "SINGLE_SELECT_LIST"
          ],
          "type": "string",
          "description": ""
        },
        "library_reference": {
          "type": "string",
          "description": "Reference to the library variable (if any) using which this variable is configured"
        },
        "created_by": {
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": ""
        },
        "project_reference_list": {
          "items": {
            "$ref": "#/definitions/project_reference"
          },
          "type": "array",
          "description": "The projects this variable type has been assigned to"
        },
        "value": {
          "type": "string",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "is_hidden": {
          "type": "boolean",
          "description": "Whether the variable should be hidden from launch screen or not"
        },
        "type": {
          "x-ntnx-enum": [
            "LOCAL",
            "SECRET",
            "EXTERNAL",
            "EXEC_LOCAL",
            "HTTP_LOCAL",
            "EXEC_SECRET",
            "HTTP_SECRET",
            "EXEC_EXTERNAL",
            "HTTP_EXTERNAL"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "type": "object",
          "description": "Choices for the variable value",
          "properties": {
            "type": {
              "x-ntnx-enum": [
                "PREDEFINED",
                "EXEC",
                "HTTP"
              ],
              "type": "string",
              "description": "Whether the options are predefined or script based or HTTP request based"
            },
            "attrs": {
              "additionalProperties": true,
              "type": "object",
              "description": "EScript/HTTP request info needed for dynamically fetching options"
            },
            "choices": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "Predefined choices for variable value"
            }
          }
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": ""
        }
      },
      "title": "Library variable resources"
    },
    "app_icon_summary_intent_response": {
      "description": "Response object for intentful operations on a app_icon_summary",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/app_icon_summary_def_status"
        },
        "spec": {
          "$ref": "#/definitions/app_icon_summary"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/app_icon_summary_metadata"
        }
      },
      "title": "app_icon_summary Intent Response"
    },
    "subnet_resources": {
      "description": "Subnet creation/modification spec.",
      "required": [
        "subnet_type"
      ],
      "type": "object",
      "properties": {
        "subnet_type": {
          "x-ntnx-enum": [
            "VLAN",
            "OVERLAY"
          ],
          "type": "string"
        },
        "vpc_reference": {
          "description": "The VPC this subnet belongs to (Only supported on Xi).\n",
          "$ref": "#/definitions/vpc_reference"
        },
        "is_external": {
          "type": "boolean",
          "description": "Whether the subnet is external subnet or not."
        },
        "vswitch_name": {
          "type": "string",
          "maxLength": 64
        },
        "network_function_chain_reference": {
          "$ref": "#/definitions/network_function_chain_reference"
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones from which resources are derived (Only supported on Xi).\n"
        },
        "virtual_network_reference": {
          "description": "The virtual network this subnet belongs to (Only supported on Xi). This reference is deprecated, use vpc_reference instead.\n",
          "$ref": "#/definitions/virtual_network_reference"
        },
        "external_connectivity_state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "External connectivity state (Only supported on Xi)"
        },
        "vlan_id": {
          "minimum": 0,
          "type": "integer",
          "format": "int32"
        },
        "ip_config": {
          "$ref": "#/definitions/ip_config"
        }
      },
      "title": "Subnet creation/modification spec"
    },
    "recovery_plan_network": {
      "description": "Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the network.\n",
          "maxLength": 64
        },
        "vpc_reference": {
          "description": "Reference to the VPC.",
          "$ref": "#/definitions/vpc_reference"
        },
        "use_vpc_reference": {
          "type": "boolean",
          "description": "Client need to specify this field as true while using vpc_reference for specifying the VPC for the network. Without this values in vpc_reference will be ignored.\n"
        },
        "virtual_network_reference": {
          "description": "Reference to the Virtual Network. This reference is deprecated, use vpc_reference instead.",
          "$ref": "#/definitions/virtual_network_reference"
        },
        "subnet_list": {
          "items": {
            "$ref": "#/definitions/recovery_plan_subnet_config"
          },
          "type": "array",
          "description": "List of subnets for the network.\n"
        }
      },
      "title": "Network configuration for the Recovery Plan\n"
    },
    "app_profile_reference": {
      "description": "The reference to a app_profile",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_profile",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_profile"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_profile"
    },
    "access_control_policy_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "access_control_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "access_control_policy"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "image_metadata": {
      "description": "The image kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when image was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "image",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "image uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the image is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when image was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the image. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the image. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "image name",
          "maxLength": 80
        }
      },
      "title": "image metadata"
    },
    "mpi_patch_with_environment_validate_spec": {
      "description": "Spec for marketplace item patch validation.",
      "required": [
        "environment_profile_pairs"
      ],
      "type": "object",
      "properties": {
        "environment_profile_pairs": {
          "items": {
            "$ref": "#/definitions/patch_environment_profile_pair"
          },
          "type": "array",
          "description": "Pairs of app-profile and environment for patching"
        }
      },
      "title": "Spec for marketplace item patch validation."
    },
    "cluster_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "cluster",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "cluster"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "blueprint": {
      "description": "An intentful representation of a blueprint spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "blueprint Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for blueprint.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/blueprint_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "blueprint Intent Spec with placement specified"
    },
    "cluster_domain_server": {
      "description": "Cluster domain server. Only applied to the cluster with all Hyper-V hosts.\n",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "nameserver": {
          "type": "string",
          "description": "The IP of the nameserver that can resolve the domain name. Must set\nwhen joining the domain.\n"
        },
        "name": {
          "type": "string",
          "description": "Joined domain name. In 'put' request, empty name will unjoin the\ncluster from current domain.\n"
        },
        "domain_credentials": {
          "$ref": "#/definitions/credentials"
        }
      },
      "title": "Domain Server"
    },
    "marketplace_item_metadata": {
      "description": "The marketplace_item kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when marketplace_item was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "marketplace_item",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "marketplace_item"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "marketplace_item uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the marketplace_item is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when marketplace_item was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the marketplace_item. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the marketplace_item. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "marketplace_item name",
          "maxLength": 80
        }
      },
      "title": "marketplace_item metadata"
    },
    "mpi_patch_with_environment_validate_response": {
      "description": "Response containing information on whether the given app-profile and environment pairs are valid for patching",
      "required": [
        "api_version",
        "metadata",
        "status",
        "spec"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/mpi_patch_with_environment_validate_response_status"
        },
        "spec": {
          "$ref": "#/definitions/mpi_patch_with_environment_validate_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/marketplace_item_metadata"
        }
      },
      "title": "Response containing information on whether the given app-profile and environment pairs are valid for patching"
    },
    "runbook_runlog_resources": {
      "description": "Runlog resources",
      "required": [
        "type",
        "is_critical",
        "reason_list"
      ],
      "type": "object",
      "properties": {
        "action_reference": {
          "description": "action reference",
          "$ref": "#/definitions/entity_reference"
        },
        "task_reference": {
          "description": "task reference",
          "$ref": "#/definitions/app_task_reference"
        },
        "userdata_reference": {
          "description": "user data reference",
          "$ref": "#/definitions/entity_reference"
        },
        "is_critical": {
          "default": false,
          "type": "boolean",
          "description": "critical or non-critical runlog"
        },
        "root_reference": {
          "description": "root reference",
          "$ref": "#/definitions/runbook_runlog_reference"
        },
        "call_runbook_reference": {
          "description": "call runbook task reference",
          "$ref": "#/definitions/app_task_reference"
        },
        "element_type": {
          "x-ntnx-enum": [
            "Substrate",
            "Package",
            "Service",
            "Deployment",
            "Application",
            "LoadBalancer",
            "SubstrateElement",
            "PackageElement",
            "ServiceElement",
            "DeploymentElement"
          ],
          "type": "string",
          "description": "type of element this runlog refers to."
        },
        "reason_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "reasons of failure if any"
        },
        "parent_reference": {
          "description": "parent reference",
          "$ref": "#/definitions/runbook_runlog_reference"
        },
        "output_variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "is_runlog_archived": {
          "default": false,
          "type": "boolean",
          "description": "Describe if action runlog is archived"
        },
        "type": {
          "x-ntnx-enum": [
            "TaskRunlog",
            "RunbookRunlog",
            "ActionRunlog",
            "PolicyRunlog"
          ],
          "type": "string",
          "description": "type of runlog"
        },
        "runlog_meta_state": {
          "type": "object",
          "description": "Meta state of runlog",
          "properties": {
            "state": {
              "type": "string",
              "description": "Meta state"
            },
            "message": {
              "type": "string",
              "description": "Message for meta state"
            }
          }
        },
        "element_reference": {
          "$ref": "#/definitions/entity_reference"
        }
      },
      "title": "Runlog resources"
    },
    "jobs_spec": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "executable": {
          "$ref": "#/definitions/job_executable_resources"
        },
        "name": {
          "type": "string",
          "description": "name of the job"
        },
        "description": {
          "type": "string"
        },
        "messages": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string",
          "x-ntnx-enum": [
            "ACTIVE",
            "INACTIVE",
            "EXPIRED"
          ],
          "description": "current state of job"
        },
        "skip_concurrent_execution": {
          "default": false,
          "type": "boolean",
          "description": "flag to decide if current execution should be skipped/continued if previous execution is still in progress will be skipped if true"
        },
        "next_execution_time": {
          "readOnly": true,
          "type": "string",
          "description": "next execution time for a job"
        },
        "type": {
          "x-ntnx-enum": [
            "ONE-TIME",
            "RECURRING"
          ],
          "type": "string",
          "description": "type of job"
        },
        "schedule_info": {
          "$ref": "#/definitions/schedule_info"
        }
      },
      "title": "job spec"
    },
    "job_instances_list_intent_response": {
      "description": "Response object for intentful operation of job instances",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/job_instances_response"
          },
          "type": "array"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/job_instances_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "policy_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "endpoint_download_resources_def_status": {
      "description": "Resource object for intentful operations on an endpoint",
      "type": "object",
      "properties": {
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "maxLength": 64
        },
        "type": {
          "type": "string",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Attributes for specified endpoint type."
        },
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Resources for endpoints"
    },
    "runbook_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook",
          "x-ntnx-enum": [
            "runbook"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for runbook list"
    },
    "fetch_variable_value_response": {
      "description": "Response object while fetching dynamic variable's value",
      "required": [
        "trl_id",
        "request_id",
        "state",
        "value"
      ],
      "type": "object",
      "properties": {
        "trl_id": {
          "type": "string",
          "description": "Task Runlog ID for the execution"
        },
        "state": {
          "type": "string",
          "description": "Status of the execution"
        },
        "run_id": {
          "type": "string",
          "description": "Execution ID for abort purposes"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of values fetched from the execution"
        },
        "request_id": {
          "type": "string",
          "description": "Ergon task ID"
        }
      },
      "title": "Fetch variable value response"
    },
    "environment_resources_def_status": {
      "description": "Status of the environment",
      "type": "object",
      "properties": {
        "infra_inclusion_list": {
          "items": {
            "$ref": "#/definitions/environment_infra_inclusion_list"
          },
          "type": "array",
          "description": "Infrastrucure included in the environment"
        },
        "project_reference": {
          "description": "The project the environment is in.",
          "$ref": "#/definitions/project_reference"
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_response"
          },
          "type": "array",
          "description": "Substrate definitions for Environment."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of variables"
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response"
          },
          "type": "array",
          "description": "Credential definitions for Environment."
        }
      },
      "title": "Status of the environment"
    },
    "provider_intent_resource": {
      "description": "Response object for intentful operations on a provider",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/provider_def_status"
        },
        "spec": {
          "$ref": "#/definitions/provider"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/provider_metadata"
        }
      },
      "title": "provider Intent Response"
    },
    "scope_right_hand_side": {
      "properties": {
        "categories": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "The category values represented as a dictionary of key -> list of values. e.g.{\"env\":[\"env1\", \"env2\"]}\n"
        },
        "collection": {
          "x-ntnx-enum": [
            "ALL"
          ],
          "type": "string",
          "description": "A representative term for supported groupings of entities. ALL = All the entities of a given kind.\n"
        },
        "uuid_list": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array",
          "description": "The explicit list of UUIDs for the given kind."
        }
      },
      "x-ntnx-one-of": [
        {
          "required": [
            "collection"
          ]
        },
        {
          "required": [
            "categories"
          ]
        },
        {
          "required": [
            "uuid_list"
          ]
        }
      ],
      "type": "object",
      "description": "The right hand side of an scope expression.",
      "title": "The right hand side (RHS) of an scope expression."
    },
    "blueprint_launch_response_status": {
      "description": "Status of the Blueprint launch.",
      "type": "object",
      "properties": {
        "request_id": {
          "type": "string",
          "description": "Request id to track the launch process"
        }
      },
      "title": "Status of the Blueprint launch."
    },
    "app_published_service_response": {
      "description": "Published service definition",
      "required": [
        "name",
        "uuid",
        "state",
        "action_list",
        "variable_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_element"
          },
          "type": "array",
          "description": ""
        },
        "type": {
          "default": "K8S_SERVICE",
          "x-ntnx-enum": [
            "K8S_SERVICE"
          ],
          "type": "string",
          "description": "Type of published service"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "config_reference": {
          "$ref": "#/definitions/app_published_service_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for service"
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional published service options"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Published service definition"
    },
    "config_input": {
      "description": "config definition for target object.",
      "required": [
        "uuid",
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "is_system_generated": {
          "default": false,
          "type": "boolean"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": "List of variables"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "attrs_list": {
          "items": {
            "additionalProperties": true,
            "type": "object"
          },
          "type": "array"
        },
        "runbook": {
          "$ref": "#/definitions/app_runbook_input"
        },
        "type": {
          "x-ntnx-enum": [
            "AHV_SNAPSHOT",
            "AHV_RESTORE",
            "PATCH"
          ],
          "type": "string",
          "description": ""
        },
        "config_reference_list": {
          "items": {
            "$ref": "#/definitions/app_config_spec_reference"
          },
          "type": "array"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "config definition for target object."
    },
    "app_package_response_download": {
      "description": "Package definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "state"
      ],
      "type": "object",
      "properties": {
        "image_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s image spec"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "element_list": {
          "items": {
            "$ref": "#/definitions/app_package_element"
          },
          "type": "array",
          "description": ""
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for package"
        },
        "service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_reference"
          },
          "type": "array",
          "description": "References of the service."
        },
        "account_reference": {
          "$ref": "#/definitions/account_reference_upload"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 128
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "version": {
          "type": "string",
          "description": ""
        },
        "service_element_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_service_element"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "config_reference": {
          "$ref": "#/definitions/app_package_reference_upload"
        },
        "type": {
          "x-ntnx-enum": [
            "SNAPSHOT",
            "ISO",
            "DEB",
            "RPM",
            "DOCKER_IMAGE",
            "CHEF_COOKBOOK",
            "PUPPET_MANIFEST",
            "CUSTOM",
            "SUBSTRATE_IMAGE",
            "K8S_IMAGE"
          ],
          "type": "string",
          "description": ""
        },
        "options": {
          "additionalProperties": true,
          "type": "object",
          "description": "Details based on type of the package."
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        }
      },
      "title": "Package for Application"
    },
    "user_usage_in_projects": {
      "description": "User usage in project definition.",
      "required": [
        "api_version"
      ],
      "type": "object",
      "properties": {
        "project_resource_domain_list": {
          "items": {
            "required": [
              "project_reference",
              "resource_domain"
            ],
            "type": "object",
            "properties": {
              "project_reference": {
                "$ref": "#/definitions/project_reference"
              },
              "resource_domain": {
                "description": "Usage information for the user in the project.",
                "$ref": "#/definitions/resource_domain_resources_status"
              }
            }
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "User usage in project definition."
    },
    "ip_pool": {
      "description": "IP pool.",
      "type": "object",
      "properties": {
        "range": {
          "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[ ](?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
          "type": "string",
          "description": "Range of IPs (example: 10.0.0.9 10.0.0.19).\n"
        }
      },
      "title": "IP pool"
    },
    "environment_reference": {
      "description": "The reference to a environment",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "environment",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "environment"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a environment"
    },
    "vpc_reference": {
      "description": "The reference to a vpc",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "vpc",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vpc"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a vpc"
    },
    "app_protection_policy_reference": {
      "description": "The reference to a app_protection_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_protection_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_protection_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a app_protection_policy"
    },
    "resource_type_action_parameters": {
      "description": "Input/Output parameters corresponding to actions defined on resource_types",
      "type": "object",
      "properties": {
        "output_parameters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of output parameters"
        },
        "input_parameters": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "List of input parameters"
        }
      },
      "title": "Input/Output parameters of resource_type actions."
    },
    "blueprint_clone_response": {
      "description": "Response containing the uuid of the cloned blueprint",
      "required": [
        "blueprint_uuid"
      ],
      "type": "object",
      "properties": {
        "blueprint_uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Response containing the uuid of the cloned blueprint"
    },
    "license_cluster_wise_consumption": {
      "description": "cluster wise consumption data",
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Cluster UUID"
        },
        "unique_active_vms": {
          "type": "integer",
          "description": "Number of unique active vms"
        },
        "cluster_type": {
          "type": "string",
          "description": "Type of the cluster"
        },
        "active_vms": {
          "type": "integer",
          "description": "Number of active vms"
        },
        "unique_active_containers": {
          "type": "integer",
          "description": "Number of unique active containers"
        },
        "active_containers": {
          "type": "integer",
          "description": "Number of active containers"
        },
        "cores": {
          "type": "integer",
          "description": "Cores on the cluster"
        }
      },
      "title": "cluster wise consumption data"
    },
    "csrs_spec": {
      "description": "Spec for CSRs download. If node uuid list is empty, all cluster nodes will\nbe assumed.\n",
      "type": "object",
      "properties": {
        "node_uuid_list": {
          "items": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string",
            "format": "UUID"
          },
          "type": "array"
        }
      },
      "title": "Spec for CSRs download"
    },
    "blueprint_deployment_input": {
      "description": "Deployment definition for Application.",
      "required": [
        "name",
        "uuid",
        "substrate_local_reference",
        "min_replicas",
        "max_replicas"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input"
          },
          "type": "array",
          "description": "List of references to action"
        },
        "package_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_package_reference"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "published_service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_reference"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "type": {
          "default": "GREENFIELD",
          "x-ntnx-enum": [
            "BROWNFIELD",
            "GREENFIELD",
            "K8S_DEPLOYMENT"
          ],
          "type": "string",
          "description": ""
        },
        "substrate_local_reference": {
          "$ref": "#/definitions/app_substrate_reference"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "brownfield_instance_list": {
          "items": {
            "$ref": "#/definitions/brownfield_instance_input"
          },
          "type": "array",
          "description": "brownfield map"
        }
      },
      "title": "Deployment definition for Application."
    },
    "runbook_runlog_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook_runlog",
          "x-ntnx-enum": [
            "runbook_runlog"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for runbook_runlog list"
    },
    "job_instances_spec": {
      "type": "object",
      "properties": {
        "scheduled_time": {
          "type": "string",
          "description": "scheduled time for job instance"
        },
        "job_executable_reference": {
          "$ref": "#/definitions/job_executable_reference"
        },
        "state": {
          "default": "PENDING",
          "readOnly": true,
          "enum": [
            "PENDING",
            "SCHEDULED",
            "RUNNING",
            "ABORTED",
            "FAILED",
            "SUCCEEDED",
            "SKIPPED"
          ],
          "type": "string",
          "description": "current state of job_instance"
        },
        "job_reference": {
          "$ref": "#/definitions/job_reference"
        },
        "execution_data": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "end_time": {
          "type": "string",
          "description": "end time for job instance"
        },
        "start_time": {
          "type": "string",
          "description": "start time for job instance"
        }
      },
      "title": "job_instance spec"
    },
    "app_icon_summary": {
      "description": "An intentful representation of a app_icon_summary spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_icon_summary Name.",
          "maxLength": 80
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "description": {
          "type": "string",
          "description": "A description for app_icon_summary.",
          "maxLength": 1000
        },
        "resources": {
          "$ref": "#/definitions/app_icon_summary_resources"
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        }
      },
      "title": "app_icon_summary Intent Spec with placement specified"
    },
    "blueprint_dependency_list": {
      "description": "Depends on definition for Application.",
      "required": [
        "getter_resource_kind",
        "getter_resource_name",
        "setter_resource_attr",
        "setter_resource_kind",
        "setter_resource_name",
        "action_resource_kind",
        "action_resource_name",
        "action_name"
      ],
      "type": "object",
      "properties": {
        "getter_resource_kind": {
          "type": "string",
          "description": ""
        },
        "from_resource_kind": {
          "type": "string",
          "description": ""
        },
        "setter_resource_kind": {
          "type": "string",
          "description": ""
        },
        "setter_resource_name": {
          "type": "string",
          "description": ""
        },
        "action_name": {
          "type": "string",
          "description": ""
        },
        "action_resource_name": {
          "type": "string",
          "description": ""
        },
        "getter_resource_name": {
          "type": "string",
          "description": ""
        },
        "setter_resource_attr": {
          "type": "string",
          "description": ""
        },
        "action_resource_kind": {
          "type": "string",
          "description": ""
        }
      },
      "title": "Depends on Definition for Application."
    },
    "resource_type_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "resource_type",
          "x-ntnx-enum": [
            "resource_type"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for resource_type list output"
    },
    "xi_subnet_item": {
      "description": "Subnet resource in Xi",
      "required": [
        "name",
        "subnet_type"
      ],
      "type": "object",
      "properties": {
        "subnet_type": {
          "x-ntnx-enum": [
            "VLAN",
            "OVERLAY"
          ],
          "type": "string"
        },
        "vpc_reference": {
          "description": "The VPC this subnet belongs to (Only supported on Xi).\n",
          "$ref": "#/definitions/vpc_reference"
        },
        "is_external": {
          "type": "boolean",
          "description": "Whether the subnet is external subnet or not."
        },
        "name": {
          "type": "string",
          "description": "subnet Name.",
          "maxLength": 64
        },
        "vswitch_name": {
          "type": "string",
          "maxLength": 64
        },
        "network_function_chain_reference": {
          "$ref": "#/definitions/network_function_chain_reference"
        },
        "availability_zone_reference_list": {
          "items": {
            "$ref": "#/definitions/availability_zone_reference"
          },
          "type": "array",
          "description": "List of availability zones from which resources are derived (Only supported on Xi).\n"
        },
        "ip_config": {
          "$ref": "#/definitions/ip_config"
        },
        "external_connectivity_state": {
          "x-ntnx-enum": [
            "ENABLED",
            "DISABLED"
          ],
          "type": "string",
          "description": "External connectivity state (Only supported on Xi)"
        },
        "vlan_id": {
          "minimum": 0,
          "type": "integer",
          "format": "int32"
        },
        "virtual_network_reference": {
          "description": "The virtual network this subnet belongs to (Only supported on Xi). This reference is deprecated, use vpc_reference instead.\n",
          "$ref": "#/definitions/virtual_network_reference"
        }
      },
      "title": "Subnet resource in Xi"
    },
    "replication_connection_resources": {
      "description": "Replication data to link 2 accounts.",
      "required": [
        "account_pair_detail"
      ],
      "type": "object",
      "properties": {
        "account_pair_detail": {
          "description": "accounts that are paired to represent an active replication route.",
          "$ref": "#/definitions/replication_pair"
        }
      },
      "title": "Replication data to link 2 accounts"
    },
    "runbook_upload_custom_intent_input": {
      "description": "An intentful representation of a runbook",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/runbook_upload"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Entity"
    },
    "endpoint_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "endpoint",
          "x-ntnx-enum": [
            "endpoint"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for endpoint list output"
    },
    "role_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "role",
          "x-ntnx-enum": [
            "role"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for role list output"
    },
    "image_placement_policy_resources_def_status": {
      "description": "Describes the status of the image policy object",
      "type": "object",
      "properties": {
        "cluster_entity_filter": {
          "description": "Category list for filtering clsuters",
          "$ref": "#/definitions/placement_entity_filter"
        },
        "image_entity_filter": {
          "description": "Category list for filtering images",
          "$ref": "#/definitions/placement_entity_filter"
        },
        "placement_type": {
          "x-ntnx-enum": [
            "AT_LEAST",
            "EXACTLY"
          ],
          "type": "string",
          "description": "Describes the image placement semantic"
        }
      },
      "title": "Image placement policy status resources"
    },
    "policy_action_type_reference": {
      "description": "The reference to a policy_action_type",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "policy_action_type",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "policy_action_type"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a policy_action_type"
    },
    "quota_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "quota",
          "x-ntnx-enum": [
            "quota"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for quota list output"
    },
    "approval_request_intent_response": {
      "description": "Response object for intentful operations on a approval_request",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/approval_request_def_status"
        },
        "spec": {
          "$ref": "#/definitions/approval_request"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/approval_request_metadata"
        }
      },
      "title": "approval_request Intent Response"
    },
    "environment_usage_filter": {
      "description": "Environment usage filter body",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts under the environment"
        },
        "subnet_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of subnets under the environment"
        },
        "vpc_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of vpcs under the environment"
        },
        "cluster_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of clusters under the environment"
        }
      },
      "title": "Environment usage filter body"
    },
    "script_output_response": {
      "required": [
        "state",
        "output"
      ],
      "type": "object",
      "properties": {
        "output": {
          "type": "string",
          "description": "The output of playground script execution"
        },
        "state": {
          "type": "string",
          "description": "The state of playground script execution"
        }
      }
    },
    "job_executable_resources": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/job_executable_action"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "uuid of the executable",
          "format": "UUI"
        },
        "entity": {
          "$ref": "#/definitions/job_executable_entity"
        }
      }
    },
    "network_group_tunnel_reference": {
      "description": "The reference to a network_group_tunnel",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a network_group_tunnel"
    },
    "blueprint_runtime_editable_response": {
      "description": "Response containing the runtime variables on the blueprint",
      "type": "object",
      "properties": {
        "resources": {
          "items": {
            "$ref": "#/definitions/blueprint_editables_spec"
          },
          "type": "array"
        }
      },
      "title": "Runtime variables on the blueprint"
    },
    "blueprint_editables_spec": {
      "description": "Response containing the runtime editables on the blueprint and app profile reference\n",
      "type": "object",
      "properties": {
        "app_profile_reference": {
          "$ref": "#/definitions/app_profile_reference"
        },
        "runtime_editables": {
          "$ref": "#/definitions/blueprint_editables"
        }
      },
      "title": "Runtime editable on the blueprint"
    },
    "vmware_library_item_resource": {
      "type": "object",
      "properties": {
        "library_id": {
          "type": "string",
          "description": "unique identifier of library"
        },
        "name": {
          "type": "string",
          "description": "name of the library item"
        },
        "creation_time": {
          "type": "string",
          "description": "Creation time of library item",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "description": "version number of library item"
        },
        "last_modified_time": {
          "type": "string",
          "description": "last update time of library item",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "description": "type of content library item"
        },
        "id": {
          "type": "string",
          "description": "unique identifier of library item"
        }
      }
    },
    "aws_availability_zone_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        }
      },
      "title": "Metadata for aws_availability_zone list"
    },
    "app_icon_def_status": {
      "description": "An intentful representation of a app_icon status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app_icon Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app_icon."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app_icon, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_icon_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app_icon."
        }
      },
      "title": "app_icon Intent Status with placement specified"
    },
    "image_intent_resource": {
      "description": "Response object for intentful operations on a image",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/image_def_status"
        },
        "spec": {
          "$ref": "#/definitions/image"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/image_metadata"
        }
      },
      "title": "image Intent Response"
    },
    "account_list_intent_response": {
      "description": "Response object for intentful operation of accounts",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/account_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/account_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "vm_recovery_point_def_status": {
      "description": "The output object that defines a vm recovery point",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the recovery point."
        },
        "state": {
          "type": "string",
          "description": "The state of the vm recovery point."
        },
        "availability_zone_reference": {
          "description": "Reference to the availability zone where this recovery point is\nlocated.\n",
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the vm, if in an error state."
        },
        "cluster_reference": {
          "description": "Reference to the cluster in the availability zone where this recovery\npoint is located.\n",
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "type": "object",
          "properties": {
            "consistency_group_uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
            },
            "source_availability_zone_reference": {
              "description": "Reference to the availability zone where the source recovery\npoint exists. This need to be set to copy a recovery from some\nother location.\n",
              "$ref": "#/definitions/availability_zone_reference"
            },
            "source_cluster_reference": {
              "description": "Reference to the cluster in the source availability zone. This\nneed to be set to copy a recovery from some other location.\n",
              "$ref": "#/definitions/cluster_reference"
            },
            "recoverability": {
              "type": "object",
              "description": "Recoverability of the recovery point. Will be populated only for LIVE snapshots.\n",
              "properties": {
                "status": {
                  "x-ntnx-enum": [
                    "RECOVERABLE",
                    "PARTIAL_RECOVERABLE",
                    "UNRECOVERABLE"
                  ],
                  "type": "string",
                  "description": "Recoverability status of the recovery point."
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for the recoverability status of the recovery point.\n",
                  "maxLength": 256
                }
              }
            },
            "parent_vm_reference": {
              "description": "Reference to vm that this recovery point is a snapshot of.\n",
              "$ref": "#/definitions/vm_reference"
            },
            "recovery_point_type": {
              "x-ntnx-enum": [
                "CRASH_CONSISTENT",
                "APPLICATION_CONSISTENT",
                "LIVE"
              ],
              "type": "string",
              "description": "Crash consistent or Application Consistent recovery point"
            },
            "vm_spec": {
              "description": "Spec of the vm at the time of snapshot.\n",
              "$ref": "#/definitions/vm"
            },
            "vm_recovery_point_location_agnostic_uuid": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string",
              "description": "Location agnostic UUID of the recovery point. If a recovery\npoint is replicated to a different clusters, then all the\ninstances of same recovery point will share this UUID.\n",
              "format": "UUID"
            },
            "creation_time": {
              "type": "string",
              "description": "The time when the the recovery point is created. This is in internet\ndate/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z,\nthis represents 20 minutes and 50.52 seconds after the 23rd hour of\nApril 12th, 1985 in UTC.\n"
            },
            "vm_metadata": {
              "description": "Metadata of the vm at the time of snapshot.\n",
              "$ref": "#/definitions/vm_metadata"
            },
            "expiration_time": {
              "type": "string",
              "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T23:20:50.52Z, this represents 20 minutes and\n50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not\nset, then the recovery point never expires.\n",
              "format": "date-time"
            }
          },
          "title": "Recovery point resources"
        }
      },
      "title": "vm recovery point output definitions"
    },
    "access_control_policy_reference": {
      "description": "The reference to a access_control_policy",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "access_control_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "access_control_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a access_control_policy"
    },
    "runbook_resources_def_status": {
      "description": "Status of the Runbook.",
      "type": "object",
      "properties": {
        "client_attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Data needed for clients."
        },
        "default_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "substrate_definition_list": {
          "items": {
            "$ref": "#/definitions/app_substrate_response"
          },
          "type": "array",
          "description": "Substrate definitions for Runbook."
        },
        "endpoint_definition_list": {
          "items": {
            "$ref": "#/definitions/app_endpoint_response"
          },
          "type": "array",
          "description": "Endpoint definitions for Runbook."
        },
        "credential_definition_list": {
          "items": {
            "$ref": "#/definitions/app_credential_response"
          },
          "type": "array",
          "description": "Credential definitions for Runbook."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for runbook"
        },
        "default_credential_local_reference": {
          "$ref": "#/definitions/app_credential_response"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "runbook": {
          "description": "Action runbook\n",
          "$ref": "#/definitions/runbook_runbook_response"
        },
        "type": {
          "type": "string",
          "description": "Type of runbook",
          "maxLength": 64
        },
        "is_cloned": {
          "default": false,
          "type": "boolean",
          "description": "Cloned or original runbook"
        }
      },
      "title": "Status of the Runbook."
    },
    "resource_utilization_spec": {
      "description": "specify the limits and units for a resource type",
      "required": [
        "resource_type"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "description": "The resource consumption limit"
        },
        "resource_type": {
          "x-ntnx-enum": [
            "STORAGE",
            "MEMORY",
            "VCPUS",
            "VMS"
          ],
          "type": "string",
          "description": "The type of resource (i.e. storage, CPUs)"
        }
      },
      "title": "Resource Utilization Specification"
    },
    "subnet_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "subnet",
          "x-ntnx-enum": [
            "subnet"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for subnet list output"
    },
    "app_actionrun_input": {
      "description": "Request object for action_run, contains action_run_log",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/app_actionrun_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/app_metadata"
        }
      },
      "title": "app actionrun request format"
    },
    "app_runlog_metadata": {
      "description": "The app_runlog kind metadata",
      "required": [
        "kind"
      ],
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_runlog was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "app_runlog",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "app_runlog"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "app_runlog uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the app_runlog is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when app_runlog was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the app_runlog. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "entity_version": {
          "readOnly": true,
          "type": "string",
          "description": "Logical entity version that allows serializing updates to the entity\nacross multiple API namespaces.  For kinds that support\nentity_version, it overrides spec_version described above.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the app_runlog. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "app_runlog name",
          "maxLength": 80
        }
      },
      "title": "app_runlog metadata"
    },
    "app_task_resources": {
      "description": "Libraty task resources definition.",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "target_any_local_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "retries": {
          "type": "string",
          "description": "Number of retries for the task."
        },
        "exec_target_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "inherit_target": {
          "type": "boolean",
          "description": "Flag to determine if target needs to be inherited."
        },
        "child_tasks_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_task_reference"
          },
          "type": "array",
          "description": ""
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Task attrs for application of type object."
        },
        "timeout_secs": {
          "type": "string",
          "description": "task timeout."
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input"
          },
          "type": "array",
          "description": ""
        }
      },
      "title": "Library task resources"
    },
    "network_group_tunnel_vm_reference": {
      "description": "The reference to a network_group_tunnel_vm",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel_vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "network_group_tunnel_vm"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a network_group_tunnel_vm"
    },
    "endpoint_upload_resources": {
      "description": "Resource object for intentful operations on an endpoint",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Attributes for specified endpoint type."
        },
        "tunnel_reference": {
          "$ref": "#/definitions/tunnel_reference"
        },
        "type": {
          "type": "string",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Resources for endpoints"
    },
    "blueprint_clone_input": {
      "description": "Clone Blueprint request.",
      "required": [
        "metadata",
        "blueprint_name"
      ],
      "type": "object",
      "properties": {
        "blueprint_name": {
          "type": "string",
          "maxLength": 64
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Clone Blueprint request."
    },
    "instance_tenancy": {
      "x-ntnx-enum": [
        "DEFAULT",
        "DEDICATED"
      ],
      "type": "string",
      "description": "The supported tenancy options for instances launched into the VPC.\n",
      "title": "Instance Tenancy"
    },
    "network_group_tunnel_vm_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "network_group_tunnel_vm",
          "x-ntnx-enum": [
            "network_group_tunnel_vm"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for network_group_tunnel_vm list"
    },
    "project_usage_input": {
      "description": "Project usage input filters",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/project_usage_filter"
        }
      },
      "title": "Project usage input filters"
    },
    "substrate_reference": {
      "description": "The reference to a substrate",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "substrate",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "substrate"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a substrate"
    },
    "environment_infra_whitelist": {
      "additionalProperties": true,
      "required": [
        "account_reference"
      ],
      "type": "object",
      "properties": {
        "account_reference": {
          "$ref": "#/definitions/account_reference"
        }
      }
    },
    "app_credential_response": {
      "description": "Credential definition for Application",
      "required": [
        "name",
        "uuid",
        "type",
        "username",
        "secret"
      ],
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": ""
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list"
        },
        "resource_type_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "exec_runbook_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "secret": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential secret object"
        },
        "passphrase": {
          "additionalProperties": true,
          "type": "object",
          "description": "Credential passphrase object associated with the provided key"
        },
        "account_reference": {
          "$ref": "#/definitions/entity_reference"
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "cred_class": {
          "type": "string",
          "description": ""
        },
        "type": {
          "x-ntnx-enum": [
            "PASSWORD",
            "KEY"
          ],
          "type": "string",
          "description": ""
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response"
          },
          "type": "array",
          "description": "Variable list of the credential"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        }
      },
      "title": "Credential for Application"
    },
    "image_placement_policy_reference_upload": {
      "description": "The reference to a image_placement_policy",
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "image_placement_policy",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "image_placement_policy"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a image_placement_policy"
    },
    "user_group_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "user_group",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "user_group"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "mh_vm_resources": {
      "description": "VM Resources Definition.",
      "type": "object",
      "properties": {
        "storage_config": {
          "description": "Storage configuration of the VM.",
          "$ref": "#/definitions/mh_vm_storage_config"
        },
        "parent_reference": {
          "$ref": "#/definitions/reference"
        },
        "guest_tools": {
          "description": "Information regarding guest tools.",
          "$ref": "#/definitions/guest_tools_spec"
        }
      },
      "title": "VM Resources"
    },
    "runbook_list_input": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "runbook",
          "x-ntnx-enum": [
            "runbook"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "advanced_filter": {
          "$ref": "#/definitions/runbook_filters"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for runbook list"
    },
    "aws_volume_type_def_status": {
      "description": "aws_volume_type resources status",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "aws_volume_type name."
        },
        "resources": {
          "$ref": "#/definitions/aws_volume_type_resources_def_status"
        }
      },
      "title": "aws_volume_type resources status"
    },
    "groups_entity": {
      "description": "An Individual Entity.",
      "type": "object",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/groups_field_data"
          },
          "type": "array"
        }
      },
      "title": "Entity"
    },
    "app_def_status": {
      "description": "An intentful representation of a app status",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "app Name."
        },
        "state": {
          "type": "string",
          "description": "The state of the app."
        },
        "availability_zone_reference": {
          "$ref": "#/definitions/availability_zone_reference"
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Any error messages for the app, if in an error state."
        },
        "cluster_reference": {
          "$ref": "#/definitions/cluster_reference"
        },
        "resources": {
          "$ref": "#/definitions/app_resources_def_status"
        },
        "description": {
          "type": "string",
          "description": "A description for app."
        }
      },
      "title": "app Intent Status with placement specified"
    },
    "environment_usage_spec": {
      "description": "Environment usage resource object",
      "required": [
        "resources"
      ],
      "type": "object",
      "properties": {
        "usage": {
          "$ref": "#/definitions/environment_usage_def"
        },
        "name": {
          "type": "string",
          "description": "name of the environment"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/entity_usage"
          },
          "type": "array",
          "description": "Usage for the entity"
        }
      },
      "title": "Environment usage resource object"
    },
    "image_version_status": {
      "description": "The image version, which is composed of a product name and product version.\n",
      "required": [
        "product_name",
        "product_version"
      ],
      "type": "object",
      "properties": {
        "product_version": {
          "type": "string",
          "description": "Version string for the disk image."
        },
        "product_name": {
          "type": "string",
          "description": "Name of the producer/distribution of the image. For example windows or red hat.\n"
        }
      },
      "title": "Image version"
    },
    "endpoint_filters": {
      "description": "Supported filters in endpoint list call",
      "type": "object",
      "properties": {
        "account_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_reference_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "title": "Supported filters in endpoint list call"
    },
    "vm_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "vm",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "vm"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "aws_role_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "kind": {
          "default": "aws_role",
          "x-ntnx-enum": [
            "aws_role"
          ],
          "type": "string",
          "description": "The kind name"
        }
      },
      "title": "Metadata for aws_role list output"
    },
    "aws_image_resource": {
      "description": "aws_image entity",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_image_def_status"
        }
      },
      "title": "aws_image"
    },
    "app_pricing_details": {
      "description": "Pricing definition for account.",
      "required": [
        "occurrence"
      ],
      "type": "object",
      "properties": {
        "association_type": {
          "x-ntnx-enum": [
            "APPLICATION",
            "CONTAINER",
            "DEPLOYMENT",
            "PACKAGE",
            "SERVICE",
            "SUBSTRATE",
            "VM"
          ],
          "type": "string",
          "description": "Type of the associated entity."
        },
        "occurrence": {
          "type": "string",
          "description": "Recurring or one time cost."
        },
        "provider_type": {
          "x-ntnx-enum": [
            "AWS",
            "AZURE",
            "CHEF",
            "DOCKER",
            "DOCKER_REGISTRY",
            "EXISTING_MACHINE",
            "GCP",
            "JENKINS",
            "NUTANIX",
            "PUPPET",
            "SALT",
            "VCENTER"
          ],
          "type": "string",
          "description": "Type of the provider this pricing is for."
        }
      },
      "title": "Pricing for account"
    },
    "groups_sort_downsampling_function": {
      "x-ntnx-enum": [
        "MAX",
        "MIN",
        "FIRST",
        "LAST",
        "LATEST"
      ],
      "type": "string",
      "description": "Downsampling function to take time series data and resolve to one value for sorting purposes.\n",
      "title": "Entities Request Downsampling Function"
    },
    "host_list_intent_response": {
      "description": "Response object for intentful operation of hosts",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/host_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/host_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "marketplace_icon_list_metadata_output": {
      "description": "All api calls that return a list will have this metadata block\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "marketplace_icon",
          "x-ntnx-enum": [
            "marketplace_icon"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "total_matches": {
          "type": "integer",
          "description": "Total matches found"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter used for the results"
        },
        "length": {
          "type": "integer",
          "description": "The number of records retrieved relative to the offset"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "type": "integer",
          "description": "Offset from the start of the entity list"
        }
      },
      "title": "Metadata for marketplace_icon list output"
    },
    "project_usage_def": {
      "description": "Project usage definition",
      "type": "object",
      "properties": {
        "blueprint": {
          "type": "integer",
          "description": "Number of blueprints associated with project"
        },
        "marketplace_item": {
          "type": "integer",
          "description": "Number of marketplace items associated with project"
        },
        "app": {
          "type": "integer",
          "description": "Number of apps associated with project"
        },
        "vm": {
          "type": "integer",
          "description": "Number of vms associated with project"
        },
        "app_variable": {
          "type": "integer",
          "description": "Number of app variables associated with project"
        },
        "app_task": {
          "type": "integer",
          "description": "Number of app variables associated with project"
        }
      },
      "title": "Project usage definition"
    },
    "category_query_usage_type": {
      "x-ntnx-enum": [
        "USED_IN",
        "APPLIED_TO"
      ],
      "type": "string",
      "description": "USED_IN - to get policies in which specified categories are used.\nAPPLIED_TO - to get entities attached to specified categories.\n",
      "title": "Query Usage Type"
    },
    "packet_trace": {
      "description": "Output of the packet trace. Contains a list of user-configured\nlogical pipeline stages that the packet matched with, and the\naction at each stage (dropped/forwarded)\n",
      "type": "object",
      "properties": {
        "stage_list": {
          "items": {
            "$ref": "#/definitions/packet_trace_stage"
          },
          "type": "array",
          "description": "Details of stages that dropped/forwarded the packet"
        }
      },
      "title": "Packet Trace output"
    },
    "user_group": {
      "description": "User Group Input Definition.",
      "type": "object",
      "properties": {
        "resources": {
          "$ref": "#/definitions/user_group_input_resource"
        }
      },
      "title": "user group."
    },
    "aws_security_group_resource": {
      "description": "aws_security_group entity",
      "required": [
        "metadata"
      ],
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/aws_security_group_def_status"
        },
        "metadata": {
          "$ref": "#/definitions/aws_security_group_metadata"
        }
      },
      "title": "aws_security_group"
    },
    "blueprint_patch_with_environment_validate_input": {
      "description": "Validate blueprint patch with environment request",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/blueprint_patch_with_environment_validate_spec"
        },
        "api_version": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/blueprint_metadata"
        }
      },
      "title": "Validate blueprint patch request."
    },
    "custom_project_internal_intent_input": {
      "description": "An intentful representation of a Project",
      "required": [
        "api_version",
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/custom_project_internal"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/project_metadata"
        }
      },
      "title": "Project Intent Entity"
    },
    "mutable_blueprint_metadata": {
      "description": "The blueprint kind metadata",
      "type": "object",
      "properties": {
        "last_update_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when blueprint was last updated\n",
          "format": "date-time"
        },
        "use_categories_mapping": {
          "default": false,
          "type": "boolean",
          "description": "Client need to specify this field as true if user want to use the\nnewer way of assigning the categories. Without this things should work\nas it was earlier.\n"
        },
        "kind": {
          "default": "blueprint",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "blueprint"
          ]
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "blueprint uuid",
          "format": "UUID"
        },
        "project_reference": {
          "description": "The project the blueprint is in.",
          "$ref": "#/definitions/project_reference"
        },
        "creation_time": {
          "readOnly": true,
          "type": "string",
          "description": "UTC date and time in RFC-3339 format when blueprint was created\n",
          "format": "date-time"
        },
        "spec_version": {
          "type": "integer",
          "description": "Version number of the latest spec."
        },
        "spec_hash": {
          "type": "string",
          "description": "Hash of the spec. This will be returned from server.\n"
        },
        "categories_mapping": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object",
          "description": "Categories for the blueprint. This allows setting up multiple\nvalues from a single key. Categories assigned using the older view will be\npresent here. This is the new way of assigning categories.\n"
        },
        "should_force_translate": {
          "type": "boolean",
          "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
        },
        "owner_reference": {
          "$ref": "#/definitions/user_reference"
        },
        "categories": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Categories for the blueprint. This allows assigning one value\nof a key to any entity. Changes done in this will be reflected in\nthe categories_mapping field.\n"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "blueprint name"
        }
      },
      "title": "blueprint metadata"
    },
    "affected_entity": {
      "description": "Information about an entity that is affected by a protection rule. This\nis like a union, at a time either VM or VG reference will be set.\n",
      "type": "object",
      "properties": {
        "conflicting_protection_rule_list": {
          "items": {
            "type": "object",
            "properties": {
              "protection_rule_reference": {
                "description": "Protection rule reference that has conflicts over this entity.\n",
                "$ref": "#/definitions/protection_rule_reference"
              }
            }
          },
          "type": "array",
          "description": "List of reference to conflicting protection rules for an entity. If\nan entity is filtered by multiple protection rules, Kanon service can\nnot protect that entity. We will flag those entities along with the\nprotection rules. This is set only incase if the entity has conflicts.\n"
        },
        "vm_reference": {
          "description": "Reference to the VM entity.",
          "$ref": "#/definitions/vm_reference"
        }
      },
      "title": "Entity information"
    },
    "cluster_network_entity": {
      "description": "Cluster network entity.",
      "required": [
        "address"
      ],
      "type": "object",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/credentials"
        },
        "proxy_type_list": {
          "items": {
            "default": "HTTP",
            "x-ntnx-enum": [
              "HTTP",
              "HTTPS",
              "SOCKS"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "address": {
          "$ref": "#/definitions/address"
        }
      },
      "title": "Cluster Network Entity"
    },
    "app_service_input_upload": {
      "description": "Service definition for Application",
      "required": [
        "name",
        "variable_list",
        "action_list"
      ],
      "type": "object",
      "properties": {
        "singleton": {
          "default": false,
          "type": "boolean",
          "description": "If True, then this service can only be in a deployment with replica 1\n"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_input_upload"
          },
          "type": "array",
          "description": "List of references to service action\n"
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "config_reference": {
          "$ref": "#/definitions/app_service_reference_upload"
        },
        "port_list": {
          "items": {
            "$ref": "#/definitions/app_service_port"
          },
          "type": "array",
          "description": ""
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "tier": {
          "type": "string",
          "description": "Service tier name"
        },
        "container_spec": {
          "additionalProperties": true,
          "description": "Additional properties for k8s continaer spec"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_input_upload"
          },
          "type": "array",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        }
      },
      "title": "Service for Application"
    },
    "cloud_credentials_resources": {
      "description": "Cloud credentials resources",
      "required": [
        "cloud_type"
      ],
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean",
          "description": "Indicates if it is the default credentials"
        },
        "key_id": {
          "type": "string",
          "description": "Access key for AWS, or subscription id for Azure\n"
        },
        "cloud_type": {
          "$ref": "#/definitions/cloud_type"
        },
        "secure_id": {
          "type": "string",
          "description": "Secret key for AWS, or full file path of the Azure client certificate\nfile(<file_name>.pem)\n"
        }
      },
      "title": "Cloud Credentials resources"
    },
    "image_placement_policy": {
      "description": "Image placement policy",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Image placement policy name.",
          "maxLength": 64
        },
        "resources": {
          "$ref": "#/definitions/image_placement_policy_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for Image placement policy.",
          "maxLength": 1000
        }
      },
      "title": "Image placement policy"
    },
    "runbook_intent_input": {
      "description": "An intentful representation of a runbook",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/runbook"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/runbook_metadata"
        }
      },
      "title": "runbook Intent Entity"
    },
    "environment_list_intent_response": {
      "description": "Response object for intentful operation of environments",
      "required": [
        "api_version",
        "metadata"
      ],
      "type": "object",
      "properties": {
        "entities": {
          "items": {
            "$ref": "#/definitions/environment_intent_resource"
          },
          "type": "array"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/environment_list_metadata_output"
        }
      },
      "title": "Entity Intent List Response"
    },
    "disk_address": {
      "description": "Disk Address.",
      "required": [
        "adapter_type",
        "device_index"
      ],
      "type": "object",
      "properties": {
        "device_index": {
          "type": "integer"
        },
        "adapter_type": {
          "x-ntnx-enum": [
            "SCSI",
            "IDE",
            "PCI",
            "SATA",
            "SPAPR"
          ],
          "type": "string"
        }
      },
      "title": "Disk Address"
    },
    "account_cluster_list_intent_response": {
      "description": "List of all clusters in given accounts",
      "type": "object",
      "properties": {
        "cluster_list": {
          "items": {
            "$ref": "#/definitions/cluster_details"
          },
          "type": "array",
          "description": "Pricing for this account"
        }
      },
      "title": "Account Cluster resources"
    },
    "cluster_details": {
      "description": "Cluster information of providers",
      "required": [
        "type",
        "name",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "This is the type of provider for this cluster"
        },
        "name": {
          "type": "string",
          "description": "This is the name of the cluster"
        },
        "node_list": {
          "type": "array",
          "description": "List of all nodes/hosts in this cluster",
          "schema": {
            "$ref": "#/definitions/node_details"
          }
        },
        "uuid": {
          "type": "string",
          "description": "This is the uuid of the cluster"
        }
      },
      "title": "Cluster Information"
    },
    "image_create_spec": {
      "description": "Spec for image create action launch.",
      "required": [
        "image_details_list"
      ],
      "type": "object",
      "properties": {
        "image_details_list": {
          "items": {
            "$ref": "#/definitions/image_detail_arg"
          },
          "type": "array",
          "description": "List of image details for each disk."
        }
      },
      "title": "Spec for image create action launch."
    },
    "blueprint_deployment_response_download": {
      "description": "Deployment definition for Application.",
      "required": [
        "name",
        "substrate_local_reference",
        "min_replicas",
        "max_replicas",
        "state",
        "message_list"
      ],
      "type": "object",
      "properties": {
        "percent_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "description": "",
          "format": "UUID"
        },
        "fault_domain_scope": {
          "x-ntnx-enum": [
            "HOST",
            "CLUSTER",
            "AZ"
          ],
          "type": "string",
          "description": ""
        },
        "description": {
          "type": "string",
          "description": "",
          "maxLength": 1000
        },
        "action_list": {
          "items": {
            "$ref": "#/definitions/app_action_response_download"
          },
          "type": "array",
          "description": "List of references to action\n"
        },
        "type": {
          "default": "GREENFIELD",
          "x-ntnx-enum": [
            "BROWNFIELD",
            "GREENFIELD",
            "K8S_DEPLOYMENT"
          ],
          "type": "string",
          "description": ""
        },
        "package_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_package_reference_upload"
          },
          "type": "array",
          "description": "List of references for the packages"
        },
        "published_service_local_reference_list": {
          "items": {
            "$ref": "#/definitions/app_published_service_reference_upload"
          },
          "type": "array",
          "description": "List of references for published services"
        },
        "default_replicas": {
          "type": "string",
          "description": "Default replicas for the deployment."
        },
        "name": {
          "type": "string",
          "description": "",
          "maxLength": 64
        },
        "editables": {
          "additionalProperties": true,
          "type": "object",
          "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "depends_on_list": {
          "items": {
            "$ref": "#/definitions/entity_reference"
          },
          "type": "array",
          "description": ""
        },
        "max_replicas": {
          "default": "1",
          "type": "string",
          "description": "Maximum replicas for the deployment."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "type": "array",
          "description": "Message list for blueprint deployment"
        },
        "substrate_local_reference": {
          "$ref": "#/definitions/app_substrate_reference_upload"
        },
        "variable_list": {
          "items": {
            "$ref": "#/definitions/app_variable_response_download"
          },
          "type": "array",
          "description": ""
        },
        "min_replicas": {
          "default": "1",
          "type": "string",
          "description": "Minimum replicas for the deployment."
        },
        "options": {
          "additionalProperties": true,
          "description": "Additional deployment options"
        },
        "num_fault_tolerance": {
          "type": "integer",
          "description": "",
          "format": "int64"
        },
        "brownfield_instance_list": {
          "items": {
            "$ref": "#/definitions/brownfield_instance_input"
          },
          "type": "array",
          "description": "brownfield map"
        }
      },
      "title": "Deployment Definition for Application."
    },
    "feature_project_saml_input": {
      "description": "Input for feature - SAML Support",
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object",
      "properties": {
        "spec": {
          "required": [
            "feature_status"
          ],
          "type": "object",
          "properties": {
            "feature_status": {
              "$ref": "#/definitions/feature_project_saml"
            }
          }
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        },
        "metadata": {
          "$ref": "#/definitions/calm_feature_metadata"
        }
      },
      "title": "Input for feature - SAML Support"
    },
    "source_options": {
      "description": "Options while accessing image source.\n",
      "type": "object",
      "properties": {
        "allow_insecure_connection": {
          "type": "boolean",
          "description": "allow_insecure_connection is an option for the user to ignore the server certificate verification while accessing source_uri (image location). If it has value = true, it ignores server certificate verification. If it has value = false, it does regular server certificate verification.\n"
        }
      },
      "title": "Source options"
    },
    "network_group_tunnel_vm": {
      "description": "An intentful representation of a network_group_tunnel_vm spec",
      "required": [
        "name",
        "resources"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "network_group_tunnel_vm Name.",
          "maxLength": 256
        },
        "resources": {
          "$ref": "#/definitions/network_group_tunnel_vm_resources"
        },
        "description": {
          "type": "string",
          "description": "A description for network_group_tunnel_vm.",
          "maxLength": 1000
        }
      },
      "title": "network_group_tunnel_vm Intent Spec with placement specified"
    },
    "quota_status": {
      "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "quota",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "quota"
          ]
        },
        "code": {
          "readOnly": true,
          "type": "integer",
          "description": "The HTTP error code."
        },
        "message_list": {
          "items": {
            "$ref": "#/definitions/message_resource"
          },
          "readOnly": true,
          "type": "array"
        },
        "state": {
          "readOnly": true,
          "type": "string"
        },
        "api_version": {
          "$ref": "#/definitions/api_version"
        }
      },
      "title": "Response Kind"
    },
    "endpoint_resources_def_status": {
      "description": "Resource object for intentful operations on an endpoint",
      "type": "object",
      "properties": {
        "value_type": {
          "x-ntnx-enum": [
            "IP",
            "VM"
          ],
          "type": "string",
          "maxLength": 64
        },
        "type": {
          "type": "string",
          "maxLength": 64
        },
        "attrs": {
          "additionalProperties": true,
          "type": "object",
          "description": "Attributes for specified endpoint type."
        },
        "name": {
          "type": "string",
          "maxLength": 64
        },
        "provider_type": {
          "x-ntnx-enum": [
            "NUTANIX_PC",
            "VMWARE"
          ],
          "type": "string",
          "maxLength": 64
        }
      },
      "title": "Resources for endpoints"
    },
    "app_task_list_metadata": {
      "description": "All api calls that return a list will have this metadata block as input\n",
      "type": "object",
      "properties": {
        "kind": {
          "default": "app_task",
          "x-ntnx-enum": [
            "app_task"
          ],
          "type": "string",
          "description": "The kind name"
        },
        "sort_attribute": {
          "type": "string",
          "description": "The attribute to perform sort on"
        },
        "filter": {
          "type": "string",
          "description": "The filter in FIQL syntax used for the results."
        },
        "length": {
          "minimum": 1,
          "type": "integer",
          "description": "The number of records to retrieve relative to the offset",
          "format": "int32"
        },
        "sort_order": {
          "$ref": "#/definitions/sort_order"
        },
        "offset": {
          "minimum": 0,
          "type": "integer",
          "description": "Offset from the start of the entity list",
          "format": "int32"
        }
      },
      "title": "Metadata for app_task list"
    },
    "protection_rule_reference": {
      "description": "The reference to a protection_rule",
      "required": [
        "kind",
        "uuid"
      ],
      "type": "object",
      "properties": {
        "kind": {
          "default": "protection_rule",
          "readOnly": true,
          "type": "string",
          "description": "The kind name",
          "x-ntnx-enum": [
            "protection_rule"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "uuid": {
          "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
          "type": "string",
          "format": "UUID"
        }
      },
      "title": "Reference to a protection_rule"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "swagger": "2.0",
  "consumes": [
    "application/json"
  ],
  "basePath": "/api/nutanix/v3",
  "host": "/"
}